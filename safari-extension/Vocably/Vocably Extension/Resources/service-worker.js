/*! For license information please see service-worker.js.LICENSE.txt */
(() => {
  var e = {
      893: (e, t) => {
        'use strict';
        Object.defineProperty(t, '__esModule', { value: !0 });
      },
      4532: (e, t) => {
        'use strict';
        Object.defineProperty(t, '__esModule', { value: !0 });
      },
      5039: (e, t) => {
        'use strict';
        Object.defineProperty(t, '__esModule', { value: !0 });
      },
      6177: (e, t) => {
        'use strict';
        Object.defineProperty(t, '__esModule', { value: !0 });
      },
      9693: (e, t) => {
        'use strict';
        Object.defineProperty(t, '__esModule', { value: !0 }),
          (t.isMsWindow = void 0);
        var n = [
          'decrypt',
          'digest',
          'encrypt',
          'exportKey',
          'generateKey',
          'importKey',
          'sign',
          'verify',
        ];
        t.isMsWindow = function (e) {
          if (
            (function (e) {
              return 'MSInputMethodContext' in e && 'msCrypto' in e;
            })(e) &&
            void 0 !== e.msCrypto.subtle
          ) {
            var t = e.msCrypto,
              r = t.getRandomValues,
              o = t.subtle;
            return n
              .map(function (e) {
                return o[e];
              })
              .concat(r)
              .every(function (e) {
                return 'function' == typeof e;
              });
          }
          return !1;
        };
      },
      2860: (e, t, n) => {
        'use strict';
        Object.defineProperty(t, '__esModule', { value: !0 });
        var r = n(8967);
        r.__exportStar(n(893), t),
          r.__exportStar(n(4532), t),
          r.__exportStar(n(5039), t),
          r.__exportStar(n(6177), t),
          r.__exportStar(n(9693), t);
      },
      8967: (e, t, n) => {
        'use strict';
        n.r(t),
          n.d(t, {
            __assign: () => i,
            __asyncDelegator: () => w,
            __asyncGenerator: () => b,
            __asyncValues: () => S,
            __await: () => m,
            __awaiter: () => l,
            __classPrivateFieldGet: () => C,
            __classPrivateFieldSet: () => I,
            __createBinding: () => h,
            __decorate: () => a,
            __exportStar: () => d,
            __extends: () => o,
            __generator: () => f,
            __importDefault: () => E,
            __importStar: () => A,
            __makeTemplateObject: () => _,
            __metadata: () => c,
            __param: () => u,
            __read: () => g,
            __rest: () => s,
            __spread: () => v,
            __spreadArrays: () => y,
            __values: () => p,
          });
        var r = function (e, t) {
          return (
            (r =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (e, t) {
                  e.__proto__ = t;
                }) ||
              function (e, t) {
                for (var n in t) t.hasOwnProperty(n) && (e[n] = t[n]);
              }),
            r(e, t)
          );
        };
        function o(e, t) {
          function n() {
            this.constructor = e;
          }
          r(e, t),
            (e.prototype =
              null === t
                ? Object.create(t)
                : ((n.prototype = t.prototype), new n()));
        }
        var i = function () {
          return (
            (i =
              Object.assign ||
              function (e) {
                for (var t, n = 1, r = arguments.length; n < r; n++)
                  for (var o in (t = arguments[n]))
                    Object.prototype.hasOwnProperty.call(t, o) && (e[o] = t[o]);
                return e;
              }),
            i.apply(this, arguments)
          );
        };
        function s(e, t) {
          var n = {};
          for (var r in e)
            Object.prototype.hasOwnProperty.call(e, r) &&
              t.indexOf(r) < 0 &&
              (n[r] = e[r]);
          if (null != e && 'function' == typeof Object.getOwnPropertySymbols) {
            var o = 0;
            for (r = Object.getOwnPropertySymbols(e); o < r.length; o++)
              t.indexOf(r[o]) < 0 &&
                Object.prototype.propertyIsEnumerable.call(e, r[o]) &&
                (n[r[o]] = e[r[o]]);
          }
          return n;
        }
        function a(e, t, n, r) {
          var o,
            i = arguments.length,
            s =
              i < 3
                ? t
                : null === r
                ? (r = Object.getOwnPropertyDescriptor(t, n))
                : r;
          if (
            'object' == typeof Reflect &&
            'function' == typeof Reflect.decorate
          )
            s = Reflect.decorate(e, t, n, r);
          else
            for (var a = e.length - 1; a >= 0; a--)
              (o = e[a]) &&
                (s = (i < 3 ? o(s) : i > 3 ? o(t, n, s) : o(t, n)) || s);
          return i > 3 && s && Object.defineProperty(t, n, s), s;
        }
        function u(e, t) {
          return function (n, r) {
            t(n, r, e);
          };
        }
        function c(e, t) {
          if (
            'object' == typeof Reflect &&
            'function' == typeof Reflect.metadata
          )
            return Reflect.metadata(e, t);
        }
        function l(e, t, n, r) {
          return new (n || (n = Promise))(function (o, i) {
            function s(e) {
              try {
                u(r.next(e));
              } catch (e) {
                i(e);
              }
            }
            function a(e) {
              try {
                u(r.throw(e));
              } catch (e) {
                i(e);
              }
            }
            function u(e) {
              var t;
              e.done
                ? o(e.value)
                : ((t = e.value),
                  t instanceof n
                    ? t
                    : new n(function (e) {
                        e(t);
                      })).then(s, a);
            }
            u((r = r.apply(e, t || [])).next());
          });
        }
        function f(e, t) {
          var n,
            r,
            o,
            i,
            s = {
              label: 0,
              sent: function () {
                if (1 & o[0]) throw o[1];
                return o[1];
              },
              trys: [],
              ops: [],
            };
          return (
            (i = { next: a(0), throw: a(1), return: a(2) }),
            'function' == typeof Symbol &&
              (i[Symbol.iterator] = function () {
                return this;
              }),
            i
          );
          function a(i) {
            return function (a) {
              return (function (i) {
                if (n) throw new TypeError('Generator is already executing.');
                for (; s; )
                  try {
                    if (
                      ((n = 1),
                      r &&
                        (o =
                          2 & i[0]
                            ? r.return
                            : i[0]
                            ? r.throw || ((o = r.return) && o.call(r), 0)
                            : r.next) &&
                        !(o = o.call(r, i[1])).done)
                    )
                      return o;
                    switch (((r = 0), o && (i = [2 & i[0], o.value]), i[0])) {
                      case 0:
                      case 1:
                        o = i;
                        break;
                      case 4:
                        return s.label++, { value: i[1], done: !1 };
                      case 5:
                        s.label++, (r = i[1]), (i = [0]);
                        continue;
                      case 7:
                        (i = s.ops.pop()), s.trys.pop();
                        continue;
                      default:
                        if (
                          !(
                            (o = (o = s.trys).length > 0 && o[o.length - 1]) ||
                            (6 !== i[0] && 2 !== i[0])
                          )
                        ) {
                          s = 0;
                          continue;
                        }
                        if (
                          3 === i[0] &&
                          (!o || (i[1] > o[0] && i[1] < o[3]))
                        ) {
                          s.label = i[1];
                          break;
                        }
                        if (6 === i[0] && s.label < o[1]) {
                          (s.label = o[1]), (o = i);
                          break;
                        }
                        if (o && s.label < o[2]) {
                          (s.label = o[2]), s.ops.push(i);
                          break;
                        }
                        o[2] && s.ops.pop(), s.trys.pop();
                        continue;
                    }
                    i = t.call(e, s);
                  } catch (e) {
                    (i = [6, e]), (r = 0);
                  } finally {
                    n = o = 0;
                  }
                if (5 & i[0]) throw i[1];
                return { value: i[0] ? i[1] : void 0, done: !0 };
              })([i, a]);
            };
          }
        }
        function h(e, t, n, r) {
          void 0 === r && (r = n), (e[r] = t[n]);
        }
        function d(e, t) {
          for (var n in e)
            'default' === n || t.hasOwnProperty(n) || (t[n] = e[n]);
        }
        function p(e) {
          var t = 'function' == typeof Symbol && Symbol.iterator,
            n = t && e[t],
            r = 0;
          if (n) return n.call(e);
          if (e && 'number' == typeof e.length)
            return {
              next: function () {
                return (
                  e && r >= e.length && (e = void 0),
                  { value: e && e[r++], done: !e }
                );
              },
            };
          throw new TypeError(
            t ? 'Object is not iterable.' : 'Symbol.iterator is not defined.'
          );
        }
        function g(e, t) {
          var n = 'function' == typeof Symbol && e[Symbol.iterator];
          if (!n) return e;
          var r,
            o,
            i = n.call(e),
            s = [];
          try {
            for (; (void 0 === t || t-- > 0) && !(r = i.next()).done; )
              s.push(r.value);
          } catch (e) {
            o = { error: e };
          } finally {
            try {
              r && !r.done && (n = i.return) && n.call(i);
            } finally {
              if (o) throw o.error;
            }
          }
          return s;
        }
        function v() {
          for (var e = [], t = 0; t < arguments.length; t++)
            e = e.concat(g(arguments[t]));
          return e;
        }
        function y() {
          for (var e = 0, t = 0, n = arguments.length; t < n; t++)
            e += arguments[t].length;
          var r = Array(e),
            o = 0;
          for (t = 0; t < n; t++)
            for (var i = arguments[t], s = 0, a = i.length; s < a; s++, o++)
              r[o] = i[s];
          return r;
        }
        function m(e) {
          return this instanceof m ? ((this.v = e), this) : new m(e);
        }
        function b(e, t, n) {
          if (!Symbol.asyncIterator)
            throw new TypeError('Symbol.asyncIterator is not defined.');
          var r,
            o = n.apply(e, t || []),
            i = [];
          return (
            (r = {}),
            s('next'),
            s('throw'),
            s('return'),
            (r[Symbol.asyncIterator] = function () {
              return this;
            }),
            r
          );
          function s(e) {
            o[e] &&
              (r[e] = function (t) {
                return new Promise(function (n, r) {
                  i.push([e, t, n, r]) > 1 || a(e, t);
                });
              });
          }
          function a(e, t) {
            try {
              (n = o[e](t)).value instanceof m
                ? Promise.resolve(n.value.v).then(u, c)
                : l(i[0][2], n);
            } catch (e) {
              l(i[0][3], e);
            }
            var n;
          }
          function u(e) {
            a('next', e);
          }
          function c(e) {
            a('throw', e);
          }
          function l(e, t) {
            e(t), i.shift(), i.length && a(i[0][0], i[0][1]);
          }
        }
        function w(e) {
          var t, n;
          return (
            (t = {}),
            r('next'),
            r('throw', function (e) {
              throw e;
            }),
            r('return'),
            (t[Symbol.iterator] = function () {
              return this;
            }),
            t
          );
          function r(r, o) {
            t[r] = e[r]
              ? function (t) {
                  return (n = !n)
                    ? { value: m(e[r](t)), done: 'return' === r }
                    : o
                    ? o(t)
                    : t;
                }
              : o;
          }
        }
        function S(e) {
          if (!Symbol.asyncIterator)
            throw new TypeError('Symbol.asyncIterator is not defined.');
          var t,
            n = e[Symbol.asyncIterator];
          return n
            ? n.call(e)
            : ((e = p(e)),
              (t = {}),
              r('next'),
              r('throw'),
              r('return'),
              (t[Symbol.asyncIterator] = function () {
                return this;
              }),
              t);
          function r(n) {
            t[n] =
              e[n] &&
              function (t) {
                return new Promise(function (r, o) {
                  !(function (e, t, n, r) {
                    Promise.resolve(r).then(function (t) {
                      e({ value: t, done: n });
                    }, t);
                  })(r, o, (t = e[n](t)).done, t.value);
                });
              };
          }
        }
        function _(e, t) {
          return (
            Object.defineProperty
              ? Object.defineProperty(e, 'raw', { value: t })
              : (e.raw = t),
            e
          );
        }
        function A(e) {
          if (e && e.__esModule) return e;
          var t = {};
          if (null != e)
            for (var n in e) Object.hasOwnProperty.call(e, n) && (t[n] = e[n]);
          return (t.default = e), t;
        }
        function E(e) {
          return e && e.__esModule ? e : { default: e };
        }
        function C(e, t) {
          if (!t.has(e))
            throw new TypeError(
              'attempted to get private field on non-instance'
            );
          return t.get(e);
        }
        function I(e, t, n) {
          if (!t.has(e))
            throw new TypeError(
              'attempted to set private field on non-instance'
            );
          return t.set(e, n), n;
        }
      },
      3497: (e, t) => {
        'use strict';
        Object.defineProperty(t, '__esModule', { value: !0 }),
          (t.EMPTY_DATA_SHA_256 =
            t.SHA_256_HMAC_ALGO =
            t.SHA_256_HASH =
              void 0),
          (t.SHA_256_HASH = { name: 'SHA-256' }),
          (t.SHA_256_HMAC_ALGO = { name: 'HMAC', hash: t.SHA_256_HASH }),
          (t.EMPTY_DATA_SHA_256 = new Uint8Array([
            227, 176, 196, 66, 152, 252, 28, 20, 154, 251, 244, 200, 153, 111,
            185, 36, 39, 174, 65, 228, 100, 155, 147, 76, 164, 149, 153, 27,
            120, 82, 184, 85,
          ]));
      },
      2401: (e, t, n) => {
        'use strict';
        Object.defineProperty(t, '__esModule', { value: !0 }),
          (t.Sha256 = void 0);
        var r = n(8479),
          o = n(214),
          i = n(4327),
          s = n(2942),
          a = n(2860),
          u = n(8281),
          c = (function () {
            function e(e) {
              (0, s.supportsWebCrypto)((0, u.locateWindow)())
                ? (this.hash = new o.Sha256(e))
                : (0, a.isMsWindow)((0, u.locateWindow)())
                ? (this.hash = new r.Sha256(e))
                : (this.hash = new i.Sha256(e));
            }
            return (
              (e.prototype.update = function (e, t) {
                this.hash.update(e, t);
              }),
              (e.prototype.digest = function () {
                return this.hash.digest();
              }),
              e
            );
          })();
        t.Sha256 = c;
      },
      8479: (e, t, n) => {
        'use strict';
        Object.defineProperty(t, '__esModule', { value: !0 }),
          (t.Sha256 = void 0);
        var r = n(5780),
          o = n(3497),
          i = n(8323),
          s = n(8281),
          a = (function () {
            function e(e) {
              e
                ? ((this.operation = (function (e) {
                    return new Promise(function (t, n) {
                      var r = (0, s.locateWindow)().msCrypto.subtle.importKey(
                        'raw',
                        u(e),
                        o.SHA_256_HMAC_ALGO,
                        !1,
                        ['sign']
                      );
                      (r.oncomplete = function () {
                        r.result && t(r.result),
                          n(
                            new Error(
                              'ImportKey completed without importing key.'
                            )
                          );
                      }),
                        (r.onerror = function () {
                          n(new Error('ImportKey failed to import key.'));
                        });
                    });
                  })(e).then(function (e) {
                    return (0, s.locateWindow)().msCrypto.subtle.sign(
                      o.SHA_256_HMAC_ALGO,
                      e
                    );
                  })),
                  this.operation.catch(function () {}))
                : (this.operation = Promise.resolve(
                    (0, s.locateWindow)().msCrypto.subtle.digest('SHA-256')
                  ));
            }
            return (
              (e.prototype.update = function (e) {
                var t = this;
                (0, r.isEmptyData)(e) ||
                  ((this.operation = this.operation.then(function (n) {
                    return (
                      (n.onerror = function () {
                        t.operation = Promise.reject(
                          new Error('Error encountered updating hash')
                        );
                      }),
                      n.process(u(e)),
                      n
                    );
                  })),
                  this.operation.catch(function () {}));
              }),
              (e.prototype.digest = function () {
                return this.operation.then(function (e) {
                  return new Promise(function (t, n) {
                    (e.onerror = function () {
                      n(new Error('Error encountered finalizing hash'));
                    }),
                      (e.oncomplete = function () {
                        e.result && t(new Uint8Array(e.result)),
                          n(new Error('Error encountered finalizing hash'));
                      }),
                      e.finish();
                  });
                });
              }),
              e
            );
          })();
        function u(e) {
          return 'string' == typeof e
            ? (0, i.fromUtf8)(e)
            : ArrayBuffer.isView(e)
            ? new Uint8Array(
                e.buffer,
                e.byteOffset,
                e.byteLength / Uint8Array.BYTES_PER_ELEMENT
              )
            : new Uint8Array(e);
        }
        t.Sha256 = a;
      },
      8322: (e, t, n) => {
        'use strict';
        Object.defineProperty(t, '__esModule', { value: !0 }),
          (t.WebCryptoSha256 = t.Ie11Sha256 = void 0),
          (0, n(2505).__exportStar)(n(2401), t);
        var r = n(8479);
        Object.defineProperty(t, 'Ie11Sha256', {
          enumerable: !0,
          get: function () {
            return r.Sha256;
          },
        });
        var o = n(214);
        Object.defineProperty(t, 'WebCryptoSha256', {
          enumerable: !0,
          get: function () {
            return o.Sha256;
          },
        });
      },
      5780: (e, t) => {
        'use strict';
        Object.defineProperty(t, '__esModule', { value: !0 }),
          (t.isEmptyData = void 0),
          (t.isEmptyData = function (e) {
            return 'string' == typeof e ? 0 === e.length : 0 === e.byteLength;
          });
      },
      214: (e, t, n) => {
        'use strict';
        Object.defineProperty(t, '__esModule', { value: !0 }),
          (t.Sha256 = void 0);
        var r = n(4959),
          o = n(3497),
          i = n(8281),
          s = (function () {
            function e(e) {
              (this.toHash = new Uint8Array(0)),
                void 0 !== e &&
                  ((this.key = new Promise(function (t, n) {
                    (0, i.locateWindow)()
                      .crypto.subtle.importKey(
                        'raw',
                        (0, r.convertToBuffer)(e),
                        o.SHA_256_HMAC_ALGO,
                        !1,
                        ['sign']
                      )
                      .then(t, n);
                  })),
                  this.key.catch(function () {}));
            }
            return (
              (e.prototype.update = function (e) {
                if (!(0, r.isEmptyData)(e)) {
                  var t = (0, r.convertToBuffer)(e),
                    n = new Uint8Array(this.toHash.byteLength + t.byteLength);
                  n.set(this.toHash, 0),
                    n.set(t, this.toHash.byteLength),
                    (this.toHash = n);
                }
              }),
              (e.prototype.digest = function () {
                var e = this;
                return this.key
                  ? this.key.then(function (t) {
                      return (0, i.locateWindow)()
                        .crypto.subtle.sign(o.SHA_256_HMAC_ALGO, t, e.toHash)
                        .then(function (e) {
                          return new Uint8Array(e);
                        });
                    })
                  : (0, r.isEmptyData)(this.toHash)
                  ? Promise.resolve(o.EMPTY_DATA_SHA_256)
                  : Promise.resolve()
                      .then(function () {
                        return (0, i.locateWindow)().crypto.subtle.digest(
                          o.SHA_256_HASH,
                          e.toHash
                        );
                      })
                      .then(function (e) {
                        return Promise.resolve(new Uint8Array(e));
                      });
              }),
              e
            );
          })();
        t.Sha256 = s;
      },
      8089: (e, t, n) => {
        'use strict';
        Object.defineProperty(t, '__esModule', { value: !0 }),
          (t.RawSha256 = void 0);
        var r = n(7127),
          o = (function () {
            function e() {
              (this.state = Int32Array.from(r.INIT)),
                (this.temp = new Int32Array(64)),
                (this.buffer = new Uint8Array(64)),
                (this.bufferLength = 0),
                (this.bytesHashed = 0),
                (this.finished = !1);
            }
            return (
              (e.prototype.update = function (e) {
                if (this.finished)
                  throw new Error(
                    'Attempted to update an already finished hash.'
                  );
                var t = 0,
                  n = e.byteLength;
                if (
                  ((this.bytesHashed += n),
                  8 * this.bytesHashed > r.MAX_HASHABLE_LENGTH)
                )
                  throw new Error('Cannot hash more than 2^53 - 1 bits');
                for (; n > 0; )
                  (this.buffer[this.bufferLength++] = e[t++]),
                    n--,
                    this.bufferLength === r.BLOCK_SIZE &&
                      (this.hashBuffer(), (this.bufferLength = 0));
              }),
              (e.prototype.digest = function () {
                if (!this.finished) {
                  var e = 8 * this.bytesHashed,
                    t = new DataView(
                      this.buffer.buffer,
                      this.buffer.byteOffset,
                      this.buffer.byteLength
                    ),
                    n = this.bufferLength;
                  if (
                    (t.setUint8(this.bufferLength++, 128),
                    n % r.BLOCK_SIZE >= r.BLOCK_SIZE - 8)
                  ) {
                    for (var o = this.bufferLength; o < r.BLOCK_SIZE; o++)
                      t.setUint8(o, 0);
                    this.hashBuffer(), (this.bufferLength = 0);
                  }
                  for (o = this.bufferLength; o < r.BLOCK_SIZE - 8; o++)
                    t.setUint8(o, 0);
                  t.setUint32(r.BLOCK_SIZE - 8, Math.floor(e / 4294967296), !0),
                    t.setUint32(r.BLOCK_SIZE - 4, e),
                    this.hashBuffer(),
                    (this.finished = !0);
                }
                var i = new Uint8Array(r.DIGEST_LENGTH);
                for (o = 0; o < 8; o++)
                  (i[4 * o] = (this.state[o] >>> 24) & 255),
                    (i[4 * o + 1] = (this.state[o] >>> 16) & 255),
                    (i[4 * o + 2] = (this.state[o] >>> 8) & 255),
                    (i[4 * o + 3] = (this.state[o] >>> 0) & 255);
                return i;
              }),
              (e.prototype.hashBuffer = function () {
                for (
                  var e = this.buffer,
                    t = this.state,
                    n = t[0],
                    o = t[1],
                    i = t[2],
                    s = t[3],
                    a = t[4],
                    u = t[5],
                    c = t[6],
                    l = t[7],
                    f = 0;
                  f < r.BLOCK_SIZE;
                  f++
                ) {
                  if (f < 16)
                    this.temp[f] =
                      ((255 & e[4 * f]) << 24) |
                      ((255 & e[4 * f + 1]) << 16) |
                      ((255 & e[4 * f + 2]) << 8) |
                      (255 & e[4 * f + 3]);
                  else {
                    var h = this.temp[f - 2],
                      d =
                        ((h >>> 17) | (h << 15)) ^
                        ((h >>> 19) | (h << 13)) ^
                        (h >>> 10),
                      p =
                        (((h = this.temp[f - 15]) >>> 7) | (h << 25)) ^
                        ((h >>> 18) | (h << 14)) ^
                        (h >>> 3);
                    this.temp[f] =
                      ((d + this.temp[f - 7]) | 0) +
                      ((p + this.temp[f - 16]) | 0);
                  }
                  var g =
                      ((((((a >>> 6) | (a << 26)) ^
                        ((a >>> 11) | (a << 21)) ^
                        ((a >>> 25) | (a << 7))) +
                        ((a & u) ^ (~a & c))) |
                        0) +
                        ((l + ((r.KEY[f] + this.temp[f]) | 0)) | 0)) |
                      0,
                    v =
                      ((((n >>> 2) | (n << 30)) ^
                        ((n >>> 13) | (n << 19)) ^
                        ((n >>> 22) | (n << 10))) +
                        ((n & o) ^ (n & i) ^ (o & i))) |
                      0;
                  (l = c),
                    (c = u),
                    (u = a),
                    (a = (s + g) | 0),
                    (s = i),
                    (i = o),
                    (o = n),
                    (n = (g + v) | 0);
                }
                (t[0] += n),
                  (t[1] += o),
                  (t[2] += i),
                  (t[3] += s),
                  (t[4] += a),
                  (t[5] += u),
                  (t[6] += c),
                  (t[7] += l);
              }),
              e
            );
          })();
        t.RawSha256 = o;
      },
      7127: (e, t) => {
        'use strict';
        Object.defineProperty(t, '__esModule', { value: !0 }),
          (t.MAX_HASHABLE_LENGTH =
            t.INIT =
            t.KEY =
            t.DIGEST_LENGTH =
            t.BLOCK_SIZE =
              void 0),
          (t.BLOCK_SIZE = 64),
          (t.DIGEST_LENGTH = 32),
          (t.KEY = new Uint32Array([
            1116352408, 1899447441, 3049323471, 3921009573, 961987163,
            1508970993, 2453635748, 2870763221, 3624381080, 310598401,
            607225278, 1426881987, 1925078388, 2162078206, 2614888103,
            3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983,
            1249150122, 1555081692, 1996064986, 2554220882, 2821834349,
            2952996808, 3210313671, 3336571891, 3584528711, 113926993,
            338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700,
            1986661051, 2177026350, 2456956037, 2730485921, 2820302411,
            3259730800, 3345764771, 3516065817, 3600352804, 4094571909,
            275423344, 430227734, 506948616, 659060556, 883997877, 958139571,
            1322822218, 1537002063, 1747873779, 1955562222, 2024104815,
            2227730452, 2361852424, 2428436474, 2756734187, 3204031479,
            3329325298,
          ])),
          (t.INIT = [
            1779033703, 3144134277, 1013904242, 2773480762, 1359893119,
            2600822924, 528734635, 1541459225,
          ]),
          (t.MAX_HASHABLE_LENGTH = Math.pow(2, 53) - 1);
      },
      4327: (e, t, n) => {
        'use strict';
        Object.defineProperty(t, '__esModule', { value: !0 }),
          (0, n(2505).__exportStar)(n(8609), t);
      },
      8609: (e, t, n) => {
        'use strict';
        Object.defineProperty(t, '__esModule', { value: !0 }),
          (t.Sha256 = void 0);
        var r = n(2505),
          o = n(7127),
          i = n(8089),
          s = n(4959),
          a = (function () {
            function e(e) {
              if (((this.hash = new i.RawSha256()), e)) {
                this.outer = new i.RawSha256();
                var t = (function (e) {
                    var t = (0, s.convertToBuffer)(e);
                    if (t.byteLength > o.BLOCK_SIZE) {
                      var n = new i.RawSha256();
                      n.update(t), (t = n.digest());
                    }
                    var r = new Uint8Array(o.BLOCK_SIZE);
                    return r.set(t), r;
                  })(e),
                  n = new Uint8Array(o.BLOCK_SIZE);
                n.set(t);
                for (var r = 0; r < o.BLOCK_SIZE; r++)
                  (t[r] ^= 54), (n[r] ^= 92);
                for (
                  this.hash.update(t), this.outer.update(n), r = 0;
                  r < t.byteLength;
                  r++
                )
                  t[r] = 0;
              }
            }
            return (
              (e.prototype.update = function (e) {
                if (!(0, s.isEmptyData)(e) && !this.error)
                  try {
                    this.hash.update((0, s.convertToBuffer)(e));
                  } catch (e) {
                    this.error = e;
                  }
              }),
              (e.prototype.digestSync = function () {
                if (this.error) throw this.error;
                return this.outer
                  ? (this.outer.finished ||
                      this.outer.update(this.hash.digest()),
                    this.outer.digest())
                  : this.hash.digest();
              }),
              (e.prototype.digest = function () {
                return (0, r.__awaiter)(this, void 0, void 0, function () {
                  return (0, r.__generator)(this, function (e) {
                    return [2, this.digestSync()];
                  });
                });
              }),
              e
            );
          })();
        t.Sha256 = a;
      },
      2505: (e, t, n) => {
        'use strict';
        n.r(t),
          n.d(t, {
            __assign: () => i,
            __asyncDelegator: () => w,
            __asyncGenerator: () => b,
            __asyncValues: () => S,
            __await: () => m,
            __awaiter: () => l,
            __classPrivateFieldGet: () => C,
            __classPrivateFieldSet: () => I,
            __createBinding: () => h,
            __decorate: () => a,
            __exportStar: () => d,
            __extends: () => o,
            __generator: () => f,
            __importDefault: () => E,
            __importStar: () => A,
            __makeTemplateObject: () => _,
            __metadata: () => c,
            __param: () => u,
            __read: () => g,
            __rest: () => s,
            __spread: () => v,
            __spreadArrays: () => y,
            __values: () => p,
          });
        var r = function (e, t) {
          return (
            (r =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (e, t) {
                  e.__proto__ = t;
                }) ||
              function (e, t) {
                for (var n in t) t.hasOwnProperty(n) && (e[n] = t[n]);
              }),
            r(e, t)
          );
        };
        function o(e, t) {
          function n() {
            this.constructor = e;
          }
          r(e, t),
            (e.prototype =
              null === t
                ? Object.create(t)
                : ((n.prototype = t.prototype), new n()));
        }
        var i = function () {
          return (
            (i =
              Object.assign ||
              function (e) {
                for (var t, n = 1, r = arguments.length; n < r; n++)
                  for (var o in (t = arguments[n]))
                    Object.prototype.hasOwnProperty.call(t, o) && (e[o] = t[o]);
                return e;
              }),
            i.apply(this, arguments)
          );
        };
        function s(e, t) {
          var n = {};
          for (var r in e)
            Object.prototype.hasOwnProperty.call(e, r) &&
              t.indexOf(r) < 0 &&
              (n[r] = e[r]);
          if (null != e && 'function' == typeof Object.getOwnPropertySymbols) {
            var o = 0;
            for (r = Object.getOwnPropertySymbols(e); o < r.length; o++)
              t.indexOf(r[o]) < 0 &&
                Object.prototype.propertyIsEnumerable.call(e, r[o]) &&
                (n[r[o]] = e[r[o]]);
          }
          return n;
        }
        function a(e, t, n, r) {
          var o,
            i = arguments.length,
            s =
              i < 3
                ? t
                : null === r
                ? (r = Object.getOwnPropertyDescriptor(t, n))
                : r;
          if (
            'object' == typeof Reflect &&
            'function' == typeof Reflect.decorate
          )
            s = Reflect.decorate(e, t, n, r);
          else
            for (var a = e.length - 1; a >= 0; a--)
              (o = e[a]) &&
                (s = (i < 3 ? o(s) : i > 3 ? o(t, n, s) : o(t, n)) || s);
          return i > 3 && s && Object.defineProperty(t, n, s), s;
        }
        function u(e, t) {
          return function (n, r) {
            t(n, r, e);
          };
        }
        function c(e, t) {
          if (
            'object' == typeof Reflect &&
            'function' == typeof Reflect.metadata
          )
            return Reflect.metadata(e, t);
        }
        function l(e, t, n, r) {
          return new (n || (n = Promise))(function (o, i) {
            function s(e) {
              try {
                u(r.next(e));
              } catch (e) {
                i(e);
              }
            }
            function a(e) {
              try {
                u(r.throw(e));
              } catch (e) {
                i(e);
              }
            }
            function u(e) {
              var t;
              e.done
                ? o(e.value)
                : ((t = e.value),
                  t instanceof n
                    ? t
                    : new n(function (e) {
                        e(t);
                      })).then(s, a);
            }
            u((r = r.apply(e, t || [])).next());
          });
        }
        function f(e, t) {
          var n,
            r,
            o,
            i,
            s = {
              label: 0,
              sent: function () {
                if (1 & o[0]) throw o[1];
                return o[1];
              },
              trys: [],
              ops: [],
            };
          return (
            (i = { next: a(0), throw: a(1), return: a(2) }),
            'function' == typeof Symbol &&
              (i[Symbol.iterator] = function () {
                return this;
              }),
            i
          );
          function a(i) {
            return function (a) {
              return (function (i) {
                if (n) throw new TypeError('Generator is already executing.');
                for (; s; )
                  try {
                    if (
                      ((n = 1),
                      r &&
                        (o =
                          2 & i[0]
                            ? r.return
                            : i[0]
                            ? r.throw || ((o = r.return) && o.call(r), 0)
                            : r.next) &&
                        !(o = o.call(r, i[1])).done)
                    )
                      return o;
                    switch (((r = 0), o && (i = [2 & i[0], o.value]), i[0])) {
                      case 0:
                      case 1:
                        o = i;
                        break;
                      case 4:
                        return s.label++, { value: i[1], done: !1 };
                      case 5:
                        s.label++, (r = i[1]), (i = [0]);
                        continue;
                      case 7:
                        (i = s.ops.pop()), s.trys.pop();
                        continue;
                      default:
                        if (
                          !(
                            (o = (o = s.trys).length > 0 && o[o.length - 1]) ||
                            (6 !== i[0] && 2 !== i[0])
                          )
                        ) {
                          s = 0;
                          continue;
                        }
                        if (
                          3 === i[0] &&
                          (!o || (i[1] > o[0] && i[1] < o[3]))
                        ) {
                          s.label = i[1];
                          break;
                        }
                        if (6 === i[0] && s.label < o[1]) {
                          (s.label = o[1]), (o = i);
                          break;
                        }
                        if (o && s.label < o[2]) {
                          (s.label = o[2]), s.ops.push(i);
                          break;
                        }
                        o[2] && s.ops.pop(), s.trys.pop();
                        continue;
                    }
                    i = t.call(e, s);
                  } catch (e) {
                    (i = [6, e]), (r = 0);
                  } finally {
                    n = o = 0;
                  }
                if (5 & i[0]) throw i[1];
                return { value: i[0] ? i[1] : void 0, done: !0 };
              })([i, a]);
            };
          }
        }
        function h(e, t, n, r) {
          void 0 === r && (r = n), (e[r] = t[n]);
        }
        function d(e, t) {
          for (var n in e)
            'default' === n || t.hasOwnProperty(n) || (t[n] = e[n]);
        }
        function p(e) {
          var t = 'function' == typeof Symbol && Symbol.iterator,
            n = t && e[t],
            r = 0;
          if (n) return n.call(e);
          if (e && 'number' == typeof e.length)
            return {
              next: function () {
                return (
                  e && r >= e.length && (e = void 0),
                  { value: e && e[r++], done: !e }
                );
              },
            };
          throw new TypeError(
            t ? 'Object is not iterable.' : 'Symbol.iterator is not defined.'
          );
        }
        function g(e, t) {
          var n = 'function' == typeof Symbol && e[Symbol.iterator];
          if (!n) return e;
          var r,
            o,
            i = n.call(e),
            s = [];
          try {
            for (; (void 0 === t || t-- > 0) && !(r = i.next()).done; )
              s.push(r.value);
          } catch (e) {
            o = { error: e };
          } finally {
            try {
              r && !r.done && (n = i.return) && n.call(i);
            } finally {
              if (o) throw o.error;
            }
          }
          return s;
        }
        function v() {
          for (var e = [], t = 0; t < arguments.length; t++)
            e = e.concat(g(arguments[t]));
          return e;
        }
        function y() {
          for (var e = 0, t = 0, n = arguments.length; t < n; t++)
            e += arguments[t].length;
          var r = Array(e),
            o = 0;
          for (t = 0; t < n; t++)
            for (var i = arguments[t], s = 0, a = i.length; s < a; s++, o++)
              r[o] = i[s];
          return r;
        }
        function m(e) {
          return this instanceof m ? ((this.v = e), this) : new m(e);
        }
        function b(e, t, n) {
          if (!Symbol.asyncIterator)
            throw new TypeError('Symbol.asyncIterator is not defined.');
          var r,
            o = n.apply(e, t || []),
            i = [];
          return (
            (r = {}),
            s('next'),
            s('throw'),
            s('return'),
            (r[Symbol.asyncIterator] = function () {
              return this;
            }),
            r
          );
          function s(e) {
            o[e] &&
              (r[e] = function (t) {
                return new Promise(function (n, r) {
                  i.push([e, t, n, r]) > 1 || a(e, t);
                });
              });
          }
          function a(e, t) {
            try {
              (n = o[e](t)).value instanceof m
                ? Promise.resolve(n.value.v).then(u, c)
                : l(i[0][2], n);
            } catch (e) {
              l(i[0][3], e);
            }
            var n;
          }
          function u(e) {
            a('next', e);
          }
          function c(e) {
            a('throw', e);
          }
          function l(e, t) {
            e(t), i.shift(), i.length && a(i[0][0], i[0][1]);
          }
        }
        function w(e) {
          var t, n;
          return (
            (t = {}),
            r('next'),
            r('throw', function (e) {
              throw e;
            }),
            r('return'),
            (t[Symbol.iterator] = function () {
              return this;
            }),
            t
          );
          function r(r, o) {
            t[r] = e[r]
              ? function (t) {
                  return (n = !n)
                    ? { value: m(e[r](t)), done: 'return' === r }
                    : o
                    ? o(t)
                    : t;
                }
              : o;
          }
        }
        function S(e) {
          if (!Symbol.asyncIterator)
            throw new TypeError('Symbol.asyncIterator is not defined.');
          var t,
            n = e[Symbol.asyncIterator];
          return n
            ? n.call(e)
            : ((e = p(e)),
              (t = {}),
              r('next'),
              r('throw'),
              r('return'),
              (t[Symbol.asyncIterator] = function () {
                return this;
              }),
              t);
          function r(n) {
            t[n] =
              e[n] &&
              function (t) {
                return new Promise(function (r, o) {
                  !(function (e, t, n, r) {
                    Promise.resolve(r).then(function (t) {
                      e({ value: t, done: n });
                    }, t);
                  })(r, o, (t = e[n](t)).done, t.value);
                });
              };
          }
        }
        function _(e, t) {
          return (
            Object.defineProperty
              ? Object.defineProperty(e, 'raw', { value: t })
              : (e.raw = t),
            e
          );
        }
        function A(e) {
          if (e && e.__esModule) return e;
          var t = {};
          if (null != e)
            for (var n in e) Object.hasOwnProperty.call(e, n) && (t[n] = e[n]);
          return (t.default = e), t;
        }
        function E(e) {
          return e && e.__esModule ? e : { default: e };
        }
        function C(e, t) {
          if (!t.has(e))
            throw new TypeError(
              'attempted to get private field on non-instance'
            );
          return t.get(e);
        }
        function I(e, t, n) {
          if (!t.has(e))
            throw new TypeError(
              'attempted to set private field on non-instance'
            );
          return t.set(e, n), n;
        }
      },
      2942: (e, t, n) => {
        'use strict';
        Object.defineProperty(t, '__esModule', { value: !0 }),
          n(8428).__exportStar(n(2445), t);
      },
      2445: (e, t, n) => {
        'use strict';
        Object.defineProperty(t, '__esModule', { value: !0 }),
          (t.supportsZeroByteGCM =
            t.supportsSubtleCrypto =
            t.supportsSecureRandom =
            t.supportsWebCrypto =
              void 0);
        var r = n(8428),
          o = [
            'decrypt',
            'digest',
            'encrypt',
            'exportKey',
            'generateKey',
            'importKey',
            'sign',
            'verify',
          ];
        function i(e) {
          return (
            'object' == typeof e &&
            'object' == typeof e.crypto &&
            'function' == typeof e.crypto.getRandomValues
          );
        }
        function s(e) {
          return (
            e &&
            o.every(function (t) {
              return 'function' == typeof e[t];
            })
          );
        }
        (t.supportsWebCrypto = function (e) {
          return (
            !(!i(e) || 'object' != typeof e.crypto.subtle) && s(e.crypto.subtle)
          );
        }),
          (t.supportsSecureRandom = i),
          (t.supportsSubtleCrypto = s),
          (t.supportsZeroByteGCM = function (e) {
            return r.__awaiter(this, void 0, void 0, function () {
              var t;
              return r.__generator(this, function (n) {
                switch (n.label) {
                  case 0:
                    if (!s(e)) return [2, !1];
                    n.label = 1;
                  case 1:
                    return (
                      n.trys.push([1, 4, , 5]),
                      [
                        4,
                        e.generateKey({ name: 'AES-GCM', length: 128 }, !1, [
                          'encrypt',
                        ]),
                      ]
                    );
                  case 2:
                    return (
                      (t = n.sent()),
                      [
                        4,
                        e.encrypt(
                          {
                            name: 'AES-GCM',
                            iv: new Uint8Array(Array(12)),
                            additionalData: new Uint8Array(Array(16)),
                            tagLength: 128,
                          },
                          t,
                          new Uint8Array(0)
                        ),
                      ]
                    );
                  case 3:
                    return [2, 16 === n.sent().byteLength];
                  case 4:
                    return n.sent(), [2, !1];
                  case 5:
                    return [2];
                }
              });
            });
          });
      },
      8428: (e, t, n) => {
        'use strict';
        n.r(t),
          n.d(t, {
            __assign: () => i,
            __asyncDelegator: () => w,
            __asyncGenerator: () => b,
            __asyncValues: () => S,
            __await: () => m,
            __awaiter: () => l,
            __classPrivateFieldGet: () => C,
            __classPrivateFieldSet: () => I,
            __createBinding: () => h,
            __decorate: () => a,
            __exportStar: () => d,
            __extends: () => o,
            __generator: () => f,
            __importDefault: () => E,
            __importStar: () => A,
            __makeTemplateObject: () => _,
            __metadata: () => c,
            __param: () => u,
            __read: () => g,
            __rest: () => s,
            __spread: () => v,
            __spreadArrays: () => y,
            __values: () => p,
          });
        var r = function (e, t) {
          return (
            (r =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (e, t) {
                  e.__proto__ = t;
                }) ||
              function (e, t) {
                for (var n in t) t.hasOwnProperty(n) && (e[n] = t[n]);
              }),
            r(e, t)
          );
        };
        function o(e, t) {
          function n() {
            this.constructor = e;
          }
          r(e, t),
            (e.prototype =
              null === t
                ? Object.create(t)
                : ((n.prototype = t.prototype), new n()));
        }
        var i = function () {
          return (
            (i =
              Object.assign ||
              function (e) {
                for (var t, n = 1, r = arguments.length; n < r; n++)
                  for (var o in (t = arguments[n]))
                    Object.prototype.hasOwnProperty.call(t, o) && (e[o] = t[o]);
                return e;
              }),
            i.apply(this, arguments)
          );
        };
        function s(e, t) {
          var n = {};
          for (var r in e)
            Object.prototype.hasOwnProperty.call(e, r) &&
              t.indexOf(r) < 0 &&
              (n[r] = e[r]);
          if (null != e && 'function' == typeof Object.getOwnPropertySymbols) {
            var o = 0;
            for (r = Object.getOwnPropertySymbols(e); o < r.length; o++)
              t.indexOf(r[o]) < 0 &&
                Object.prototype.propertyIsEnumerable.call(e, r[o]) &&
                (n[r[o]] = e[r[o]]);
          }
          return n;
        }
        function a(e, t, n, r) {
          var o,
            i = arguments.length,
            s =
              i < 3
                ? t
                : null === r
                ? (r = Object.getOwnPropertyDescriptor(t, n))
                : r;
          if (
            'object' == typeof Reflect &&
            'function' == typeof Reflect.decorate
          )
            s = Reflect.decorate(e, t, n, r);
          else
            for (var a = e.length - 1; a >= 0; a--)
              (o = e[a]) &&
                (s = (i < 3 ? o(s) : i > 3 ? o(t, n, s) : o(t, n)) || s);
          return i > 3 && s && Object.defineProperty(t, n, s), s;
        }
        function u(e, t) {
          return function (n, r) {
            t(n, r, e);
          };
        }
        function c(e, t) {
          if (
            'object' == typeof Reflect &&
            'function' == typeof Reflect.metadata
          )
            return Reflect.metadata(e, t);
        }
        function l(e, t, n, r) {
          return new (n || (n = Promise))(function (o, i) {
            function s(e) {
              try {
                u(r.next(e));
              } catch (e) {
                i(e);
              }
            }
            function a(e) {
              try {
                u(r.throw(e));
              } catch (e) {
                i(e);
              }
            }
            function u(e) {
              var t;
              e.done
                ? o(e.value)
                : ((t = e.value),
                  t instanceof n
                    ? t
                    : new n(function (e) {
                        e(t);
                      })).then(s, a);
            }
            u((r = r.apply(e, t || [])).next());
          });
        }
        function f(e, t) {
          var n,
            r,
            o,
            i,
            s = {
              label: 0,
              sent: function () {
                if (1 & o[0]) throw o[1];
                return o[1];
              },
              trys: [],
              ops: [],
            };
          return (
            (i = { next: a(0), throw: a(1), return: a(2) }),
            'function' == typeof Symbol &&
              (i[Symbol.iterator] = function () {
                return this;
              }),
            i
          );
          function a(i) {
            return function (a) {
              return (function (i) {
                if (n) throw new TypeError('Generator is already executing.');
                for (; s; )
                  try {
                    if (
                      ((n = 1),
                      r &&
                        (o =
                          2 & i[0]
                            ? r.return
                            : i[0]
                            ? r.throw || ((o = r.return) && o.call(r), 0)
                            : r.next) &&
                        !(o = o.call(r, i[1])).done)
                    )
                      return o;
                    switch (((r = 0), o && (i = [2 & i[0], o.value]), i[0])) {
                      case 0:
                      case 1:
                        o = i;
                        break;
                      case 4:
                        return s.label++, { value: i[1], done: !1 };
                      case 5:
                        s.label++, (r = i[1]), (i = [0]);
                        continue;
                      case 7:
                        (i = s.ops.pop()), s.trys.pop();
                        continue;
                      default:
                        if (
                          !(
                            (o = (o = s.trys).length > 0 && o[o.length - 1]) ||
                            (6 !== i[0] && 2 !== i[0])
                          )
                        ) {
                          s = 0;
                          continue;
                        }
                        if (
                          3 === i[0] &&
                          (!o || (i[1] > o[0] && i[1] < o[3]))
                        ) {
                          s.label = i[1];
                          break;
                        }
                        if (6 === i[0] && s.label < o[1]) {
                          (s.label = o[1]), (o = i);
                          break;
                        }
                        if (o && s.label < o[2]) {
                          (s.label = o[2]), s.ops.push(i);
                          break;
                        }
                        o[2] && s.ops.pop(), s.trys.pop();
                        continue;
                    }
                    i = t.call(e, s);
                  } catch (e) {
                    (i = [6, e]), (r = 0);
                  } finally {
                    n = o = 0;
                  }
                if (5 & i[0]) throw i[1];
                return { value: i[0] ? i[1] : void 0, done: !0 };
              })([i, a]);
            };
          }
        }
        function h(e, t, n, r) {
          void 0 === r && (r = n), (e[r] = t[n]);
        }
        function d(e, t) {
          for (var n in e)
            'default' === n || t.hasOwnProperty(n) || (t[n] = e[n]);
        }
        function p(e) {
          var t = 'function' == typeof Symbol && Symbol.iterator,
            n = t && e[t],
            r = 0;
          if (n) return n.call(e);
          if (e && 'number' == typeof e.length)
            return {
              next: function () {
                return (
                  e && r >= e.length && (e = void 0),
                  { value: e && e[r++], done: !e }
                );
              },
            };
          throw new TypeError(
            t ? 'Object is not iterable.' : 'Symbol.iterator is not defined.'
          );
        }
        function g(e, t) {
          var n = 'function' == typeof Symbol && e[Symbol.iterator];
          if (!n) return e;
          var r,
            o,
            i = n.call(e),
            s = [];
          try {
            for (; (void 0 === t || t-- > 0) && !(r = i.next()).done; )
              s.push(r.value);
          } catch (e) {
            o = { error: e };
          } finally {
            try {
              r && !r.done && (n = i.return) && n.call(i);
            } finally {
              if (o) throw o.error;
            }
          }
          return s;
        }
        function v() {
          for (var e = [], t = 0; t < arguments.length; t++)
            e = e.concat(g(arguments[t]));
          return e;
        }
        function y() {
          for (var e = 0, t = 0, n = arguments.length; t < n; t++)
            e += arguments[t].length;
          var r = Array(e),
            o = 0;
          for (t = 0; t < n; t++)
            for (var i = arguments[t], s = 0, a = i.length; s < a; s++, o++)
              r[o] = i[s];
          return r;
        }
        function m(e) {
          return this instanceof m ? ((this.v = e), this) : new m(e);
        }
        function b(e, t, n) {
          if (!Symbol.asyncIterator)
            throw new TypeError('Symbol.asyncIterator is not defined.');
          var r,
            o = n.apply(e, t || []),
            i = [];
          return (
            (r = {}),
            s('next'),
            s('throw'),
            s('return'),
            (r[Symbol.asyncIterator] = function () {
              return this;
            }),
            r
          );
          function s(e) {
            o[e] &&
              (r[e] = function (t) {
                return new Promise(function (n, r) {
                  i.push([e, t, n, r]) > 1 || a(e, t);
                });
              });
          }
          function a(e, t) {
            try {
              (n = o[e](t)).value instanceof m
                ? Promise.resolve(n.value.v).then(u, c)
                : l(i[0][2], n);
            } catch (e) {
              l(i[0][3], e);
            }
            var n;
          }
          function u(e) {
            a('next', e);
          }
          function c(e) {
            a('throw', e);
          }
          function l(e, t) {
            e(t), i.shift(), i.length && a(i[0][0], i[0][1]);
          }
        }
        function w(e) {
          var t, n;
          return (
            (t = {}),
            r('next'),
            r('throw', function (e) {
              throw e;
            }),
            r('return'),
            (t[Symbol.iterator] = function () {
              return this;
            }),
            t
          );
          function r(r, o) {
            t[r] = e[r]
              ? function (t) {
                  return (n = !n)
                    ? { value: m(e[r](t)), done: 'return' === r }
                    : o
                    ? o(t)
                    : t;
                }
              : o;
          }
        }
        function S(e) {
          if (!Symbol.asyncIterator)
            throw new TypeError('Symbol.asyncIterator is not defined.');
          var t,
            n = e[Symbol.asyncIterator];
          return n
            ? n.call(e)
            : ((e = p(e)),
              (t = {}),
              r('next'),
              r('throw'),
              r('return'),
              (t[Symbol.asyncIterator] = function () {
                return this;
              }),
              t);
          function r(n) {
            t[n] =
              e[n] &&
              function (t) {
                return new Promise(function (r, o) {
                  !(function (e, t, n, r) {
                    Promise.resolve(r).then(function (t) {
                      e({ value: t, done: n });
                    }, t);
                  })(r, o, (t = e[n](t)).done, t.value);
                });
              };
          }
        }
        function _(e, t) {
          return (
            Object.defineProperty
              ? Object.defineProperty(e, 'raw', { value: t })
              : (e.raw = t),
            e
          );
        }
        function A(e) {
          if (e && e.__esModule) return e;
          var t = {};
          if (null != e)
            for (var n in e) Object.hasOwnProperty.call(e, n) && (t[n] = e[n]);
          return (t.default = e), t;
        }
        function E(e) {
          return e && e.__esModule ? e : { default: e };
        }
        function C(e, t) {
          if (!t.has(e))
            throw new TypeError(
              'attempted to get private field on non-instance'
            );
          return t.get(e);
        }
        function I(e, t, n) {
          if (!t.has(e))
            throw new TypeError(
              'attempted to set private field on non-instance'
            );
          return t.set(e, n), n;
        }
      },
      3376: (e, t, n) => {
        'use strict';
        Object.defineProperty(t, '__esModule', { value: !0 }),
          (t.convertToBuffer = void 0);
        var r = n(9896),
          o =
            'undefined' != typeof Buffer && Buffer.from
              ? function (e) {
                  return Buffer.from(e, 'utf8');
                }
              : r.fromUtf8;
        t.convertToBuffer = function (e) {
          return e instanceof Uint8Array
            ? e
            : 'string' == typeof e
            ? o(e)
            : ArrayBuffer.isView(e)
            ? new Uint8Array(
                e.buffer,
                e.byteOffset,
                e.byteLength / Uint8Array.BYTES_PER_ELEMENT
              )
            : new Uint8Array(e);
        };
      },
      4959: (e, t, n) => {
        'use strict';
        Object.defineProperty(t, '__esModule', { value: !0 }),
          (t.uint32ArrayFrom =
            t.numToUint8 =
            t.isEmptyData =
            t.convertToBuffer =
              void 0);
        var r = n(3376);
        Object.defineProperty(t, 'convertToBuffer', {
          enumerable: !0,
          get: function () {
            return r.convertToBuffer;
          },
        });
        var o = n(1205);
        Object.defineProperty(t, 'isEmptyData', {
          enumerable: !0,
          get: function () {
            return o.isEmptyData;
          },
        });
        var i = n(1443);
        Object.defineProperty(t, 'numToUint8', {
          enumerable: !0,
          get: function () {
            return i.numToUint8;
          },
        });
        var s = n(1650);
        Object.defineProperty(t, 'uint32ArrayFrom', {
          enumerable: !0,
          get: function () {
            return s.uint32ArrayFrom;
          },
        });
      },
      1205: (e, t) => {
        'use strict';
        Object.defineProperty(t, '__esModule', { value: !0 }),
          (t.isEmptyData = void 0),
          (t.isEmptyData = function (e) {
            return 'string' == typeof e ? 0 === e.length : 0 === e.byteLength;
          });
      },
      1443: (e, t) => {
        'use strict';
        Object.defineProperty(t, '__esModule', { value: !0 }),
          (t.numToUint8 = void 0),
          (t.numToUint8 = function (e) {
            return new Uint8Array([
              (4278190080 & e) >> 24,
              (16711680 & e) >> 16,
              (65280 & e) >> 8,
              255 & e,
            ]);
          });
      },
      1650: (e, t) => {
        'use strict';
        Object.defineProperty(t, '__esModule', { value: !0 }),
          (t.uint32ArrayFrom = void 0),
          (t.uint32ArrayFrom = function (e) {
            if (!Array.from) {
              for (var t = new Uint32Array(e.length); 0 < e.length; )
                t[0] = e[0];
              return t;
            }
            return Uint32Array.from(e);
          });
      },
      9896: (e, t, n) => {
        'use strict';
        n.r(t), n.d(t, { fromUtf8: () => r, toUtf8: () => o });
        var r = function (e) {
            return 'function' == typeof TextEncoder
              ? (function (e) {
                  return new TextEncoder().encode(e);
                })(e)
              : (function (e) {
                  for (var t = [], n = 0, r = e.length; n < r; n++) {
                    var o = e.charCodeAt(n);
                    if (o < 128) t.push(o);
                    else if (o < 2048) t.push((o >> 6) | 192, (63 & o) | 128);
                    else if (
                      n + 1 < e.length &&
                      55296 == (64512 & o) &&
                      56320 == (64512 & e.charCodeAt(n + 1))
                    ) {
                      var i =
                        65536 + ((1023 & o) << 10) + (1023 & e.charCodeAt(++n));
                      t.push(
                        (i >> 18) | 240,
                        ((i >> 12) & 63) | 128,
                        ((i >> 6) & 63) | 128,
                        (63 & i) | 128
                      );
                    } else
                      t.push(
                        (o >> 12) | 224,
                        ((o >> 6) & 63) | 128,
                        (63 & o) | 128
                      );
                  }
                  return Uint8Array.from(t);
                })(e);
          },
          o = function (e) {
            return 'function' == typeof TextDecoder
              ? (function (e) {
                  return new TextDecoder('utf-8').decode(e);
                })(e)
              : (function (e) {
                  for (var t = '', n = 0, r = e.length; n < r; n++) {
                    var o = e[n];
                    if (o < 128) t += String.fromCharCode(o);
                    else if (192 <= o && o < 224) {
                      var i = e[++n];
                      t += String.fromCharCode(((31 & o) << 6) | (63 & i));
                    } else if (240 <= o && o < 365) {
                      var s =
                        '%' +
                        [o, e[++n], e[++n], e[++n]]
                          .map(function (e) {
                            return e.toString(16);
                          })
                          .join('%');
                      t += decodeURIComponent(s);
                    } else
                      t += String.fromCharCode(
                        ((15 & o) << 12) | ((63 & e[++n]) << 6) | (63 & e[++n])
                      );
                  }
                  return t;
                })(e);
          };
      },
      273: (e, t, n) => {
        var r = n(5314),
          o = n(4706),
          i = o;
        (i.v1 = r), (i.v4 = o), (e.exports = i);
      },
      554: (e) => {
        for (var t = [], n = 0; n < 256; ++n)
          t[n] = (n + 256).toString(16).substr(1);
        e.exports = function (e, n) {
          var r = n || 0,
            o = t;
          return [
            o[e[r++]],
            o[e[r++]],
            o[e[r++]],
            o[e[r++]],
            '-',
            o[e[r++]],
            o[e[r++]],
            '-',
            o[e[r++]],
            o[e[r++]],
            '-',
            o[e[r++]],
            o[e[r++]],
            '-',
            o[e[r++]],
            o[e[r++]],
            o[e[r++]],
            o[e[r++]],
            o[e[r++]],
            o[e[r++]],
          ].join('');
        };
      },
      436: (e) => {
        var t =
          ('undefined' != typeof crypto &&
            crypto.getRandomValues &&
            crypto.getRandomValues.bind(crypto)) ||
          ('undefined' != typeof msCrypto &&
            'function' == typeof window.msCrypto.getRandomValues &&
            msCrypto.getRandomValues.bind(msCrypto));
        if (t) {
          var n = new Uint8Array(16);
          e.exports = function () {
            return t(n), n;
          };
        } else {
          var r = new Array(16);
          e.exports = function () {
            for (var e, t = 0; t < 16; t++)
              0 == (3 & t) && (e = 4294967296 * Math.random()),
                (r[t] = (e >>> ((3 & t) << 3)) & 255);
            return r;
          };
        }
      },
      5314: (e, t, n) => {
        var r,
          o,
          i = n(436),
          s = n(554),
          a = 0,
          u = 0;
        e.exports = function (e, t, n) {
          var c = (t && n) || 0,
            l = t || [],
            f = (e = e || {}).node || r,
            h = void 0 !== e.clockseq ? e.clockseq : o;
          if (null == f || null == h) {
            var d = i();
            null == f && (f = r = [1 | d[0], d[1], d[2], d[3], d[4], d[5]]),
              null == h && (h = o = 16383 & ((d[6] << 8) | d[7]));
          }
          var p = void 0 !== e.msecs ? e.msecs : new Date().getTime(),
            g = void 0 !== e.nsecs ? e.nsecs : u + 1,
            v = p - a + (g - u) / 1e4;
          if (
            (v < 0 && void 0 === e.clockseq && (h = (h + 1) & 16383),
            (v < 0 || p > a) && void 0 === e.nsecs && (g = 0),
            g >= 1e4)
          )
            throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
          (a = p), (u = g), (o = h);
          var y = (1e4 * (268435455 & (p += 122192928e5)) + g) % 4294967296;
          (l[c++] = (y >>> 24) & 255),
            (l[c++] = (y >>> 16) & 255),
            (l[c++] = (y >>> 8) & 255),
            (l[c++] = 255 & y);
          var m = ((p / 4294967296) * 1e4) & 268435455;
          (l[c++] = (m >>> 8) & 255),
            (l[c++] = 255 & m),
            (l[c++] = ((m >>> 24) & 15) | 16),
            (l[c++] = (m >>> 16) & 255),
            (l[c++] = (h >>> 8) | 128),
            (l[c++] = 255 & h);
          for (var b = 0; b < 6; ++b) l[c + b] = f[b];
          return t || s(l);
        };
      },
      4706: (e, t, n) => {
        var r = n(436),
          o = n(554);
        e.exports = function (e, t, n) {
          var i = (t && n) || 0;
          'string' == typeof e &&
            ((t = 'binary' === e ? new Array(16) : null), (e = null));
          var s = (e = e || {}).random || (e.rng || r)();
          if (((s[6] = (15 & s[6]) | 64), (s[8] = (63 & s[8]) | 128), t))
            for (var a = 0; a < 16; ++a) t[i + a] = s[a];
          return t || o(s);
        };
      },
      8281: (e, t, n) => {
        'use strict';
        n.r(t), n.d(t, { locateWindow: () => o });
        var r = {};
        function o() {
          return 'undefined' != typeof window
            ? window
            : 'undefined' != typeof self
            ? self
            : r;
        }
      },
      8323: (e, t, n) => {
        'use strict';
        n.r(t), n.d(t, { fromUtf8: () => r, toUtf8: () => o });
        var r = function (e) {
            return 'function' == typeof TextEncoder
              ? (function (e) {
                  return new TextEncoder().encode(e);
                })(e)
              : (function (e) {
                  for (var t = [], n = 0, r = e.length; n < r; n++) {
                    var o = e.charCodeAt(n);
                    if (o < 128) t.push(o);
                    else if (o < 2048) t.push((o >> 6) | 192, (63 & o) | 128);
                    else if (
                      n + 1 < e.length &&
                      55296 == (64512 & o) &&
                      56320 == (64512 & e.charCodeAt(n + 1))
                    ) {
                      var i =
                        65536 + ((1023 & o) << 10) + (1023 & e.charCodeAt(++n));
                      t.push(
                        (i >> 18) | 240,
                        ((i >> 12) & 63) | 128,
                        ((i >> 6) & 63) | 128,
                        (63 & i) | 128
                      );
                    } else
                      t.push(
                        (o >> 12) | 224,
                        ((o >> 6) & 63) | 128,
                        (63 & o) | 128
                      );
                  }
                  return Uint8Array.from(t);
                })(e);
          },
          o = function (e) {
            return 'function' == typeof TextDecoder
              ? (function (e) {
                  return new TextDecoder('utf-8').decode(e);
                })(e)
              : (function (e) {
                  for (var t = '', n = 0, r = e.length; n < r; n++) {
                    var o = e[n];
                    if (o < 128) t += String.fromCharCode(o);
                    else if (192 <= o && o < 224) {
                      var i = e[++n];
                      t += String.fromCharCode(((31 & o) << 6) | (63 & i));
                    } else if (240 <= o && o < 365) {
                      var s =
                        '%' +
                        [o, e[++n], e[++n], e[++n]]
                          .map(function (e) {
                            return e.toString(16);
                          })
                          .join('%');
                      t += decodeURIComponent(s);
                    } else
                      t += String.fromCharCode(
                        ((15 & o) << 12) | ((63 & e[++n]) << 6) | (63 & e[++n])
                      );
                  }
                  return t;
                })(e);
          };
      },
      5766: (e, t) => {
        'use strict';
        (t.byteLength = function (e) {
          var t = u(e),
            n = t[0],
            r = t[1];
          return (3 * (n + r)) / 4 - r;
        }),
          (t.toByteArray = function (e) {
            var t,
              n,
              i = u(e),
              s = i[0],
              a = i[1],
              c = new o(
                (function (e, t, n) {
                  return (3 * (t + n)) / 4 - n;
                })(0, s, a)
              ),
              l = 0,
              f = a > 0 ? s - 4 : s;
            for (n = 0; n < f; n += 4)
              (t =
                (r[e.charCodeAt(n)] << 18) |
                (r[e.charCodeAt(n + 1)] << 12) |
                (r[e.charCodeAt(n + 2)] << 6) |
                r[e.charCodeAt(n + 3)]),
                (c[l++] = (t >> 16) & 255),
                (c[l++] = (t >> 8) & 255),
                (c[l++] = 255 & t);
            return (
              2 === a &&
                ((t =
                  (r[e.charCodeAt(n)] << 2) | (r[e.charCodeAt(n + 1)] >> 4)),
                (c[l++] = 255 & t)),
              1 === a &&
                ((t =
                  (r[e.charCodeAt(n)] << 10) |
                  (r[e.charCodeAt(n + 1)] << 4) |
                  (r[e.charCodeAt(n + 2)] >> 2)),
                (c[l++] = (t >> 8) & 255),
                (c[l++] = 255 & t)),
              c
            );
          }),
          (t.fromByteArray = function (e) {
            for (
              var t,
                r = e.length,
                o = r % 3,
                i = [],
                s = 16383,
                a = 0,
                u = r - o;
              a < u;
              a += s
            )
              i.push(c(e, a, a + s > u ? u : a + s));
            return (
              1 === o
                ? ((t = e[r - 1]), i.push(n[t >> 2] + n[(t << 4) & 63] + '=='))
                : 2 === o &&
                  ((t = (e[r - 2] << 8) + e[r - 1]),
                  i.push(
                    n[t >> 10] + n[(t >> 4) & 63] + n[(t << 2) & 63] + '='
                  )),
              i.join('')
            );
          });
        for (
          var n = [],
            r = [],
            o = 'undefined' != typeof Uint8Array ? Uint8Array : Array,
            i =
              'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',
            s = 0,
            a = i.length;
          s < a;
          ++s
        )
          (n[s] = i[s]), (r[i.charCodeAt(s)] = s);
        function u(e) {
          var t = e.length;
          if (t % 4 > 0)
            throw new Error('Invalid string. Length must be a multiple of 4');
          var n = e.indexOf('=');
          return -1 === n && (n = t), [n, n === t ? 0 : 4 - (n % 4)];
        }
        function c(e, t, r) {
          for (var o, i, s = [], a = t; a < r; a += 3)
            (o =
              ((e[a] << 16) & 16711680) +
              ((e[a + 1] << 8) & 65280) +
              (255 & e[a + 2])),
              s.push(
                n[((i = o) >> 18) & 63] +
                  n[(i >> 12) & 63] +
                  n[(i >> 6) & 63] +
                  n[63 & i]
              );
          return s.join('');
        }
        (r['-'.charCodeAt(0)] = 62), (r['_'.charCodeAt(0)] = 63);
      },
      7160: function (e) {
        e.exports = (function (e) {
          var t = {};
          function n(r) {
            if (t[r]) return t[r].exports;
            var o = (t[r] = { i: r, l: !1, exports: {} });
            return e[r].call(o.exports, o, o.exports, n), (o.l = !0), o.exports;
          }
          return (
            (n.m = e),
            (n.c = t),
            (n.d = function (e, t, r) {
              n.o(e, t) ||
                Object.defineProperty(e, t, { enumerable: !0, get: r });
            }),
            (n.r = function (e) {
              'undefined' != typeof Symbol &&
                Symbol.toStringTag &&
                Object.defineProperty(e, Symbol.toStringTag, {
                  value: 'Module',
                }),
                Object.defineProperty(e, '__esModule', { value: !0 });
            }),
            (n.t = function (e, t) {
              if ((1 & t && (e = n(e)), 8 & t)) return e;
              if (4 & t && 'object' == typeof e && e && e.__esModule) return e;
              var r = Object.create(null);
              if (
                (n.r(r),
                Object.defineProperty(r, 'default', {
                  enumerable: !0,
                  value: e,
                }),
                2 & t && 'string' != typeof e)
              )
                for (var o in e)
                  n.d(
                    r,
                    o,
                    function (t) {
                      return e[t];
                    }.bind(null, o)
                  );
              return r;
            }),
            (n.n = function (e) {
              var t =
                e && e.__esModule
                  ? function () {
                      return e.default;
                    }
                  : function () {
                      return e;
                    };
              return n.d(t, 'a', t), t;
            }),
            (n.o = function (e, t) {
              return Object.prototype.hasOwnProperty.call(e, t);
            }),
            (n.p = ''),
            n((n.s = 90))
          );
        })({
          17: function (e, t, n) {
            'use strict';
            (t.__esModule = !0), (t.default = void 0);
            var r = n(18),
              o = (function () {
                function e() {}
                return (
                  (e.getFirstMatch = function (e, t) {
                    var n = t.match(e);
                    return (n && n.length > 0 && n[1]) || '';
                  }),
                  (e.getSecondMatch = function (e, t) {
                    var n = t.match(e);
                    return (n && n.length > 1 && n[2]) || '';
                  }),
                  (e.matchAndReturnConst = function (e, t, n) {
                    if (e.test(t)) return n;
                  }),
                  (e.getWindowsVersionName = function (e) {
                    switch (e) {
                      case 'NT':
                        return 'NT';
                      case 'XP':
                      case 'NT 5.1':
                        return 'XP';
                      case 'NT 5.0':
                        return '2000';
                      case 'NT 5.2':
                        return '2003';
                      case 'NT 6.0':
                        return 'Vista';
                      case 'NT 6.1':
                        return '7';
                      case 'NT 6.2':
                        return '8';
                      case 'NT 6.3':
                        return '8.1';
                      case 'NT 10.0':
                        return '10';
                      default:
                        return;
                    }
                  }),
                  (e.getMacOSVersionName = function (e) {
                    var t = e
                      .split('.')
                      .splice(0, 2)
                      .map(function (e) {
                        return parseInt(e, 10) || 0;
                      });
                    if ((t.push(0), 10 === t[0]))
                      switch (t[1]) {
                        case 5:
                          return 'Leopard';
                        case 6:
                          return 'Snow Leopard';
                        case 7:
                          return 'Lion';
                        case 8:
                          return 'Mountain Lion';
                        case 9:
                          return 'Mavericks';
                        case 10:
                          return 'Yosemite';
                        case 11:
                          return 'El Capitan';
                        case 12:
                          return 'Sierra';
                        case 13:
                          return 'High Sierra';
                        case 14:
                          return 'Mojave';
                        case 15:
                          return 'Catalina';
                        default:
                          return;
                      }
                  }),
                  (e.getAndroidVersionName = function (e) {
                    var t = e
                      .split('.')
                      .splice(0, 2)
                      .map(function (e) {
                        return parseInt(e, 10) || 0;
                      });
                    if ((t.push(0), !(1 === t[0] && t[1] < 5)))
                      return 1 === t[0] && t[1] < 6
                        ? 'Cupcake'
                        : 1 === t[0] && t[1] >= 6
                        ? 'Donut'
                        : 2 === t[0] && t[1] < 2
                        ? 'Eclair'
                        : 2 === t[0] && 2 === t[1]
                        ? 'Froyo'
                        : 2 === t[0] && t[1] > 2
                        ? 'Gingerbread'
                        : 3 === t[0]
                        ? 'Honeycomb'
                        : 4 === t[0] && t[1] < 1
                        ? 'Ice Cream Sandwich'
                        : 4 === t[0] && t[1] < 4
                        ? 'Jelly Bean'
                        : 4 === t[0] && t[1] >= 4
                        ? 'KitKat'
                        : 5 === t[0]
                        ? 'Lollipop'
                        : 6 === t[0]
                        ? 'Marshmallow'
                        : 7 === t[0]
                        ? 'Nougat'
                        : 8 === t[0]
                        ? 'Oreo'
                        : 9 === t[0]
                        ? 'Pie'
                        : void 0;
                  }),
                  (e.getVersionPrecision = function (e) {
                    return e.split('.').length;
                  }),
                  (e.compareVersions = function (t, n, r) {
                    void 0 === r && (r = !1);
                    var o = e.getVersionPrecision(t),
                      i = e.getVersionPrecision(n),
                      s = Math.max(o, i),
                      a = 0,
                      u = e.map([t, n], function (t) {
                        var n = s - e.getVersionPrecision(t),
                          r = t + new Array(n + 1).join('.0');
                        return e
                          .map(r.split('.'), function (e) {
                            return new Array(20 - e.length).join('0') + e;
                          })
                          .reverse();
                      });
                    for (r && (a = s - Math.min(o, i)), s -= 1; s >= a; ) {
                      if (u[0][s] > u[1][s]) return 1;
                      if (u[0][s] === u[1][s]) {
                        if (s === a) return 0;
                        s -= 1;
                      } else if (u[0][s] < u[1][s]) return -1;
                    }
                  }),
                  (e.map = function (e, t) {
                    var n,
                      r = [];
                    if (Array.prototype.map)
                      return Array.prototype.map.call(e, t);
                    for (n = 0; n < e.length; n += 1) r.push(t(e[n]));
                    return r;
                  }),
                  (e.find = function (e, t) {
                    var n, r;
                    if (Array.prototype.find)
                      return Array.prototype.find.call(e, t);
                    for (n = 0, r = e.length; n < r; n += 1) {
                      var o = e[n];
                      if (t(o, n)) return o;
                    }
                  }),
                  (e.assign = function (e) {
                    for (
                      var t,
                        n,
                        r = e,
                        o = arguments.length,
                        i = new Array(o > 1 ? o - 1 : 0),
                        s = 1;
                      s < o;
                      s++
                    )
                      i[s - 1] = arguments[s];
                    if (Object.assign)
                      return Object.assign.apply(Object, [e].concat(i));
                    var a = function () {
                      var e = i[t];
                      'object' == typeof e &&
                        null !== e &&
                        Object.keys(e).forEach(function (t) {
                          r[t] = e[t];
                        });
                    };
                    for (t = 0, n = i.length; t < n; t += 1) a();
                    return e;
                  }),
                  (e.getBrowserAlias = function (e) {
                    return r.BROWSER_ALIASES_MAP[e];
                  }),
                  (e.getBrowserTypeByAlias = function (e) {
                    return r.BROWSER_MAP[e] || '';
                  }),
                  e
                );
              })();
            (t.default = o), (e.exports = t.default);
          },
          18: function (e, t, n) {
            'use strict';
            (t.__esModule = !0),
              (t.ENGINE_MAP =
                t.OS_MAP =
                t.PLATFORMS_MAP =
                t.BROWSER_MAP =
                t.BROWSER_ALIASES_MAP =
                  void 0),
              (t.BROWSER_ALIASES_MAP = {
                'Amazon Silk': 'amazon_silk',
                'Android Browser': 'android',
                Bada: 'bada',
                BlackBerry: 'blackberry',
                Chrome: 'chrome',
                Chromium: 'chromium',
                Electron: 'electron',
                Epiphany: 'epiphany',
                Firefox: 'firefox',
                Focus: 'focus',
                Generic: 'generic',
                'Google Search': 'google_search',
                Googlebot: 'googlebot',
                'Internet Explorer': 'ie',
                'K-Meleon': 'k_meleon',
                Maxthon: 'maxthon',
                'Microsoft Edge': 'edge',
                'MZ Browser': 'mz',
                'NAVER Whale Browser': 'naver',
                Opera: 'opera',
                'Opera Coast': 'opera_coast',
                PhantomJS: 'phantomjs',
                Puffin: 'puffin',
                QupZilla: 'qupzilla',
                QQ: 'qq',
                QQLite: 'qqlite',
                Safari: 'safari',
                Sailfish: 'sailfish',
                'Samsung Internet for Android': 'samsung_internet',
                SeaMonkey: 'seamonkey',
                Sleipnir: 'sleipnir',
                Swing: 'swing',
                Tizen: 'tizen',
                'UC Browser': 'uc',
                Vivaldi: 'vivaldi',
                'WebOS Browser': 'webos',
                WeChat: 'wechat',
                'Yandex Browser': 'yandex',
                Roku: 'roku',
              }),
              (t.BROWSER_MAP = {
                amazon_silk: 'Amazon Silk',
                android: 'Android Browser',
                bada: 'Bada',
                blackberry: 'BlackBerry',
                chrome: 'Chrome',
                chromium: 'Chromium',
                electron: 'Electron',
                epiphany: 'Epiphany',
                firefox: 'Firefox',
                focus: 'Focus',
                generic: 'Generic',
                googlebot: 'Googlebot',
                google_search: 'Google Search',
                ie: 'Internet Explorer',
                k_meleon: 'K-Meleon',
                maxthon: 'Maxthon',
                edge: 'Microsoft Edge',
                mz: 'MZ Browser',
                naver: 'NAVER Whale Browser',
                opera: 'Opera',
                opera_coast: 'Opera Coast',
                phantomjs: 'PhantomJS',
                puffin: 'Puffin',
                qupzilla: 'QupZilla',
                qq: 'QQ Browser',
                qqlite: 'QQ Browser Lite',
                safari: 'Safari',
                sailfish: 'Sailfish',
                samsung_internet: 'Samsung Internet for Android',
                seamonkey: 'SeaMonkey',
                sleipnir: 'Sleipnir',
                swing: 'Swing',
                tizen: 'Tizen',
                uc: 'UC Browser',
                vivaldi: 'Vivaldi',
                webos: 'WebOS Browser',
                wechat: 'WeChat',
                yandex: 'Yandex Browser',
              }),
              (t.PLATFORMS_MAP = {
                tablet: 'tablet',
                mobile: 'mobile',
                desktop: 'desktop',
                tv: 'tv',
              }),
              (t.OS_MAP = {
                WindowsPhone: 'Windows Phone',
                Windows: 'Windows',
                MacOS: 'macOS',
                iOS: 'iOS',
                Android: 'Android',
                WebOS: 'WebOS',
                BlackBerry: 'BlackBerry',
                Bada: 'Bada',
                Tizen: 'Tizen',
                Linux: 'Linux',
                ChromeOS: 'Chrome OS',
                PlayStation4: 'PlayStation 4',
                Roku: 'Roku',
              }),
              (t.ENGINE_MAP = {
                EdgeHTML: 'EdgeHTML',
                Blink: 'Blink',
                Trident: 'Trident',
                Presto: 'Presto',
                Gecko: 'Gecko',
                WebKit: 'WebKit',
              });
          },
          90: function (e, t, n) {
            'use strict';
            (t.__esModule = !0), (t.default = void 0);
            var r,
              o = (r = n(91)) && r.__esModule ? r : { default: r },
              i = n(18);
            function s(e, t) {
              for (var n = 0; n < t.length; n++) {
                var r = t[n];
                (r.enumerable = r.enumerable || !1),
                  (r.configurable = !0),
                  'value' in r && (r.writable = !0),
                  Object.defineProperty(e, r.key, r);
              }
            }
            var a = (function () {
              function e() {}
              var t, n;
              return (
                (e.getParser = function (e, t) {
                  if ((void 0 === t && (t = !1), 'string' != typeof e))
                    throw new Error('UserAgent should be a string');
                  return new o.default(e, t);
                }),
                (e.parse = function (e) {
                  return new o.default(e).getResult();
                }),
                (t = e),
                (n = [
                  {
                    key: 'BROWSER_MAP',
                    get: function () {
                      return i.BROWSER_MAP;
                    },
                  },
                  {
                    key: 'ENGINE_MAP',
                    get: function () {
                      return i.ENGINE_MAP;
                    },
                  },
                  {
                    key: 'OS_MAP',
                    get: function () {
                      return i.OS_MAP;
                    },
                  },
                  {
                    key: 'PLATFORMS_MAP',
                    get: function () {
                      return i.PLATFORMS_MAP;
                    },
                  },
                ]),
                null && s(t.prototype, null),
                n && s(t, n),
                e
              );
            })();
            (t.default = a), (e.exports = t.default);
          },
          91: function (e, t, n) {
            'use strict';
            (t.__esModule = !0), (t.default = void 0);
            var r = u(n(92)),
              o = u(n(93)),
              i = u(n(94)),
              s = u(n(95)),
              a = u(n(17));
            function u(e) {
              return e && e.__esModule ? e : { default: e };
            }
            var c = (function () {
              function e(e, t) {
                if ((void 0 === t && (t = !1), null == e || '' === e))
                  throw new Error("UserAgent parameter can't be empty");
                (this._ua = e),
                  (this.parsedResult = {}),
                  !0 !== t && this.parse();
              }
              var t = e.prototype;
              return (
                (t.getUA = function () {
                  return this._ua;
                }),
                (t.test = function (e) {
                  return e.test(this._ua);
                }),
                (t.parseBrowser = function () {
                  var e = this;
                  this.parsedResult.browser = {};
                  var t = a.default.find(r.default, function (t) {
                    if ('function' == typeof t.test) return t.test(e);
                    if (t.test instanceof Array)
                      return t.test.some(function (t) {
                        return e.test(t);
                      });
                    throw new Error("Browser's test function is not valid");
                  });
                  return (
                    t && (this.parsedResult.browser = t.describe(this.getUA())),
                    this.parsedResult.browser
                  );
                }),
                (t.getBrowser = function () {
                  return this.parsedResult.browser
                    ? this.parsedResult.browser
                    : this.parseBrowser();
                }),
                (t.getBrowserName = function (e) {
                  return e
                    ? String(this.getBrowser().name).toLowerCase() || ''
                    : this.getBrowser().name || '';
                }),
                (t.getBrowserVersion = function () {
                  return this.getBrowser().version;
                }),
                (t.getOS = function () {
                  return this.parsedResult.os
                    ? this.parsedResult.os
                    : this.parseOS();
                }),
                (t.parseOS = function () {
                  var e = this;
                  this.parsedResult.os = {};
                  var t = a.default.find(o.default, function (t) {
                    if ('function' == typeof t.test) return t.test(e);
                    if (t.test instanceof Array)
                      return t.test.some(function (t) {
                        return e.test(t);
                      });
                    throw new Error("Browser's test function is not valid");
                  });
                  return (
                    t && (this.parsedResult.os = t.describe(this.getUA())),
                    this.parsedResult.os
                  );
                }),
                (t.getOSName = function (e) {
                  var t = this.getOS().name;
                  return e ? String(t).toLowerCase() || '' : t || '';
                }),
                (t.getOSVersion = function () {
                  return this.getOS().version;
                }),
                (t.getPlatform = function () {
                  return this.parsedResult.platform
                    ? this.parsedResult.platform
                    : this.parsePlatform();
                }),
                (t.getPlatformType = function (e) {
                  void 0 === e && (e = !1);
                  var t = this.getPlatform().type;
                  return e ? String(t).toLowerCase() || '' : t || '';
                }),
                (t.parsePlatform = function () {
                  var e = this;
                  this.parsedResult.platform = {};
                  var t = a.default.find(i.default, function (t) {
                    if ('function' == typeof t.test) return t.test(e);
                    if (t.test instanceof Array)
                      return t.test.some(function (t) {
                        return e.test(t);
                      });
                    throw new Error("Browser's test function is not valid");
                  });
                  return (
                    t &&
                      (this.parsedResult.platform = t.describe(this.getUA())),
                    this.parsedResult.platform
                  );
                }),
                (t.getEngine = function () {
                  return this.parsedResult.engine
                    ? this.parsedResult.engine
                    : this.parseEngine();
                }),
                (t.getEngineName = function (e) {
                  return e
                    ? String(this.getEngine().name).toLowerCase() || ''
                    : this.getEngine().name || '';
                }),
                (t.parseEngine = function () {
                  var e = this;
                  this.parsedResult.engine = {};
                  var t = a.default.find(s.default, function (t) {
                    if ('function' == typeof t.test) return t.test(e);
                    if (t.test instanceof Array)
                      return t.test.some(function (t) {
                        return e.test(t);
                      });
                    throw new Error("Browser's test function is not valid");
                  });
                  return (
                    t && (this.parsedResult.engine = t.describe(this.getUA())),
                    this.parsedResult.engine
                  );
                }),
                (t.parse = function () {
                  return (
                    this.parseBrowser(),
                    this.parseOS(),
                    this.parsePlatform(),
                    this.parseEngine(),
                    this
                  );
                }),
                (t.getResult = function () {
                  return a.default.assign({}, this.parsedResult);
                }),
                (t.satisfies = function (e) {
                  var t = this,
                    n = {},
                    r = 0,
                    o = {},
                    i = 0;
                  if (
                    (Object.keys(e).forEach(function (t) {
                      var s = e[t];
                      'string' == typeof s
                        ? ((o[t] = s), (i += 1))
                        : 'object' == typeof s && ((n[t] = s), (r += 1));
                    }),
                    r > 0)
                  ) {
                    var s = Object.keys(n),
                      u = a.default.find(s, function (e) {
                        return t.isOS(e);
                      });
                    if (u) {
                      var c = this.satisfies(n[u]);
                      if (void 0 !== c) return c;
                    }
                    var l = a.default.find(s, function (e) {
                      return t.isPlatform(e);
                    });
                    if (l) {
                      var f = this.satisfies(n[l]);
                      if (void 0 !== f) return f;
                    }
                  }
                  if (i > 0) {
                    var h = Object.keys(o),
                      d = a.default.find(h, function (e) {
                        return t.isBrowser(e, !0);
                      });
                    if (void 0 !== d) return this.compareVersion(o[d]);
                  }
                }),
                (t.isBrowser = function (e, t) {
                  void 0 === t && (t = !1);
                  var n = this.getBrowserName().toLowerCase(),
                    r = e.toLowerCase(),
                    o = a.default.getBrowserTypeByAlias(r);
                  return t && o && (r = o.toLowerCase()), r === n;
                }),
                (t.compareVersion = function (e) {
                  var t = [0],
                    n = e,
                    r = !1,
                    o = this.getBrowserVersion();
                  if ('string' == typeof o)
                    return (
                      '>' === e[0] || '<' === e[0]
                        ? ((n = e.substr(1)),
                          '=' === e[1]
                            ? ((r = !0), (n = e.substr(2)))
                            : (t = []),
                          '>' === e[0] ? t.push(1) : t.push(-1))
                        : '=' === e[0]
                        ? (n = e.substr(1))
                        : '~' === e[0] && ((r = !0), (n = e.substr(1))),
                      t.indexOf(a.default.compareVersions(o, n, r)) > -1
                    );
                }),
                (t.isOS = function (e) {
                  return this.getOSName(!0) === String(e).toLowerCase();
                }),
                (t.isPlatform = function (e) {
                  return this.getPlatformType(!0) === String(e).toLowerCase();
                }),
                (t.isEngine = function (e) {
                  return this.getEngineName(!0) === String(e).toLowerCase();
                }),
                (t.is = function (e, t) {
                  return (
                    void 0 === t && (t = !1),
                    this.isBrowser(e, t) || this.isOS(e) || this.isPlatform(e)
                  );
                }),
                (t.some = function (e) {
                  var t = this;
                  return (
                    void 0 === e && (e = []),
                    e.some(function (e) {
                      return t.is(e);
                    })
                  );
                }),
                e
              );
            })();
            (t.default = c), (e.exports = t.default);
          },
          92: function (e, t, n) {
            'use strict';
            (t.__esModule = !0), (t.default = void 0);
            var r,
              o = (r = n(17)) && r.__esModule ? r : { default: r },
              i = /version\/(\d+(\.?_?\d+)+)/i,
              s = [
                {
                  test: [/googlebot/i],
                  describe: function (e) {
                    var t = { name: 'Googlebot' },
                      n =
                        o.default.getFirstMatch(
                          /googlebot\/(\d+(\.\d+))/i,
                          e
                        ) || o.default.getFirstMatch(i, e);
                    return n && (t.version = n), t;
                  },
                },
                {
                  test: [/opera/i],
                  describe: function (e) {
                    var t = { name: 'Opera' },
                      n =
                        o.default.getFirstMatch(i, e) ||
                        o.default.getFirstMatch(
                          /(?:opera)[\s/](\d+(\.?_?\d+)+)/i,
                          e
                        );
                    return n && (t.version = n), t;
                  },
                },
                {
                  test: [/opr\/|opios/i],
                  describe: function (e) {
                    var t = { name: 'Opera' },
                      n =
                        o.default.getFirstMatch(
                          /(?:opr|opios)[\s/](\S+)/i,
                          e
                        ) || o.default.getFirstMatch(i, e);
                    return n && (t.version = n), t;
                  },
                },
                {
                  test: [/SamsungBrowser/i],
                  describe: function (e) {
                    var t = { name: 'Samsung Internet for Android' },
                      n =
                        o.default.getFirstMatch(i, e) ||
                        o.default.getFirstMatch(
                          /(?:SamsungBrowser)[\s/](\d+(\.?_?\d+)+)/i,
                          e
                        );
                    return n && (t.version = n), t;
                  },
                },
                {
                  test: [/Whale/i],
                  describe: function (e) {
                    var t = { name: 'NAVER Whale Browser' },
                      n =
                        o.default.getFirstMatch(i, e) ||
                        o.default.getFirstMatch(
                          /(?:whale)[\s/](\d+(?:\.\d+)+)/i,
                          e
                        );
                    return n && (t.version = n), t;
                  },
                },
                {
                  test: [/MZBrowser/i],
                  describe: function (e) {
                    var t = { name: 'MZ Browser' },
                      n =
                        o.default.getFirstMatch(
                          /(?:MZBrowser)[\s/](\d+(?:\.\d+)+)/i,
                          e
                        ) || o.default.getFirstMatch(i, e);
                    return n && (t.version = n), t;
                  },
                },
                {
                  test: [/focus/i],
                  describe: function (e) {
                    var t = { name: 'Focus' },
                      n =
                        o.default.getFirstMatch(
                          /(?:focus)[\s/](\d+(?:\.\d+)+)/i,
                          e
                        ) || o.default.getFirstMatch(i, e);
                    return n && (t.version = n), t;
                  },
                },
                {
                  test: [/swing/i],
                  describe: function (e) {
                    var t = { name: 'Swing' },
                      n =
                        o.default.getFirstMatch(
                          /(?:swing)[\s/](\d+(?:\.\d+)+)/i,
                          e
                        ) || o.default.getFirstMatch(i, e);
                    return n && (t.version = n), t;
                  },
                },
                {
                  test: [/coast/i],
                  describe: function (e) {
                    var t = { name: 'Opera Coast' },
                      n =
                        o.default.getFirstMatch(i, e) ||
                        o.default.getFirstMatch(
                          /(?:coast)[\s/](\d+(\.?_?\d+)+)/i,
                          e
                        );
                    return n && (t.version = n), t;
                  },
                },
                {
                  test: [/opt\/\d+(?:.?_?\d+)+/i],
                  describe: function (e) {
                    var t = { name: 'Opera Touch' },
                      n =
                        o.default.getFirstMatch(
                          /(?:opt)[\s/](\d+(\.?_?\d+)+)/i,
                          e
                        ) || o.default.getFirstMatch(i, e);
                    return n && (t.version = n), t;
                  },
                },
                {
                  test: [/yabrowser/i],
                  describe: function (e) {
                    var t = { name: 'Yandex Browser' },
                      n =
                        o.default.getFirstMatch(
                          /(?:yabrowser)[\s/](\d+(\.?_?\d+)+)/i,
                          e
                        ) || o.default.getFirstMatch(i, e);
                    return n && (t.version = n), t;
                  },
                },
                {
                  test: [/ucbrowser/i],
                  describe: function (e) {
                    var t = { name: 'UC Browser' },
                      n =
                        o.default.getFirstMatch(i, e) ||
                        o.default.getFirstMatch(
                          /(?:ucbrowser)[\s/](\d+(\.?_?\d+)+)/i,
                          e
                        );
                    return n && (t.version = n), t;
                  },
                },
                {
                  test: [/Maxthon|mxios/i],
                  describe: function (e) {
                    var t = { name: 'Maxthon' },
                      n =
                        o.default.getFirstMatch(i, e) ||
                        o.default.getFirstMatch(
                          /(?:Maxthon|mxios)[\s/](\d+(\.?_?\d+)+)/i,
                          e
                        );
                    return n && (t.version = n), t;
                  },
                },
                {
                  test: [/epiphany/i],
                  describe: function (e) {
                    var t = { name: 'Epiphany' },
                      n =
                        o.default.getFirstMatch(i, e) ||
                        o.default.getFirstMatch(
                          /(?:epiphany)[\s/](\d+(\.?_?\d+)+)/i,
                          e
                        );
                    return n && (t.version = n), t;
                  },
                },
                {
                  test: [/puffin/i],
                  describe: function (e) {
                    var t = { name: 'Puffin' },
                      n =
                        o.default.getFirstMatch(i, e) ||
                        o.default.getFirstMatch(
                          /(?:puffin)[\s/](\d+(\.?_?\d+)+)/i,
                          e
                        );
                    return n && (t.version = n), t;
                  },
                },
                {
                  test: [/sleipnir/i],
                  describe: function (e) {
                    var t = { name: 'Sleipnir' },
                      n =
                        o.default.getFirstMatch(i, e) ||
                        o.default.getFirstMatch(
                          /(?:sleipnir)[\s/](\d+(\.?_?\d+)+)/i,
                          e
                        );
                    return n && (t.version = n), t;
                  },
                },
                {
                  test: [/k-meleon/i],
                  describe: function (e) {
                    var t = { name: 'K-Meleon' },
                      n =
                        o.default.getFirstMatch(i, e) ||
                        o.default.getFirstMatch(
                          /(?:k-meleon)[\s/](\d+(\.?_?\d+)+)/i,
                          e
                        );
                    return n && (t.version = n), t;
                  },
                },
                {
                  test: [/micromessenger/i],
                  describe: function (e) {
                    var t = { name: 'WeChat' },
                      n =
                        o.default.getFirstMatch(
                          /(?:micromessenger)[\s/](\d+(\.?_?\d+)+)/i,
                          e
                        ) || o.default.getFirstMatch(i, e);
                    return n && (t.version = n), t;
                  },
                },
                {
                  test: [/qqbrowser/i],
                  describe: function (e) {
                    var t = {
                        name: /qqbrowserlite/i.test(e)
                          ? 'QQ Browser Lite'
                          : 'QQ Browser',
                      },
                      n =
                        o.default.getFirstMatch(
                          /(?:qqbrowserlite|qqbrowser)[/](\d+(\.?_?\d+)+)/i,
                          e
                        ) || o.default.getFirstMatch(i, e);
                    return n && (t.version = n), t;
                  },
                },
                {
                  test: [/msie|trident/i],
                  describe: function (e) {
                    var t = { name: 'Internet Explorer' },
                      n = o.default.getFirstMatch(
                        /(?:msie |rv:)(\d+(\.?_?\d+)+)/i,
                        e
                      );
                    return n && (t.version = n), t;
                  },
                },
                {
                  test: [/\sedg\//i],
                  describe: function (e) {
                    var t = { name: 'Microsoft Edge' },
                      n = o.default.getFirstMatch(
                        /\sedg\/(\d+(\.?_?\d+)+)/i,
                        e
                      );
                    return n && (t.version = n), t;
                  },
                },
                {
                  test: [/edg([ea]|ios)/i],
                  describe: function (e) {
                    var t = { name: 'Microsoft Edge' },
                      n = o.default.getSecondMatch(
                        /edg([ea]|ios)\/(\d+(\.?_?\d+)+)/i,
                        e
                      );
                    return n && (t.version = n), t;
                  },
                },
                {
                  test: [/vivaldi/i],
                  describe: function (e) {
                    var t = { name: 'Vivaldi' },
                      n = o.default.getFirstMatch(
                        /vivaldi\/(\d+(\.?_?\d+)+)/i,
                        e
                      );
                    return n && (t.version = n), t;
                  },
                },
                {
                  test: [/seamonkey/i],
                  describe: function (e) {
                    var t = { name: 'SeaMonkey' },
                      n = o.default.getFirstMatch(
                        /seamonkey\/(\d+(\.?_?\d+)+)/i,
                        e
                      );
                    return n && (t.version = n), t;
                  },
                },
                {
                  test: [/sailfish/i],
                  describe: function (e) {
                    var t = { name: 'Sailfish' },
                      n = o.default.getFirstMatch(
                        /sailfish\s?browser\/(\d+(\.\d+)?)/i,
                        e
                      );
                    return n && (t.version = n), t;
                  },
                },
                {
                  test: [/silk/i],
                  describe: function (e) {
                    var t = { name: 'Amazon Silk' },
                      n = o.default.getFirstMatch(/silk\/(\d+(\.?_?\d+)+)/i, e);
                    return n && (t.version = n), t;
                  },
                },
                {
                  test: [/phantom/i],
                  describe: function (e) {
                    var t = { name: 'PhantomJS' },
                      n = o.default.getFirstMatch(
                        /phantomjs\/(\d+(\.?_?\d+)+)/i,
                        e
                      );
                    return n && (t.version = n), t;
                  },
                },
                {
                  test: [/slimerjs/i],
                  describe: function (e) {
                    var t = { name: 'SlimerJS' },
                      n = o.default.getFirstMatch(
                        /slimerjs\/(\d+(\.?_?\d+)+)/i,
                        e
                      );
                    return n && (t.version = n), t;
                  },
                },
                {
                  test: [/blackberry|\bbb\d+/i, /rim\stablet/i],
                  describe: function (e) {
                    var t = { name: 'BlackBerry' },
                      n =
                        o.default.getFirstMatch(i, e) ||
                        o.default.getFirstMatch(
                          /blackberry[\d]+\/(\d+(\.?_?\d+)+)/i,
                          e
                        );
                    return n && (t.version = n), t;
                  },
                },
                {
                  test: [/(web|hpw)[o0]s/i],
                  describe: function (e) {
                    var t = { name: 'WebOS Browser' },
                      n =
                        o.default.getFirstMatch(i, e) ||
                        o.default.getFirstMatch(
                          /w(?:eb)?[o0]sbrowser\/(\d+(\.?_?\d+)+)/i,
                          e
                        );
                    return n && (t.version = n), t;
                  },
                },
                {
                  test: [/bada/i],
                  describe: function (e) {
                    var t = { name: 'Bada' },
                      n = o.default.getFirstMatch(
                        /dolfin\/(\d+(\.?_?\d+)+)/i,
                        e
                      );
                    return n && (t.version = n), t;
                  },
                },
                {
                  test: [/tizen/i],
                  describe: function (e) {
                    var t = { name: 'Tizen' },
                      n =
                        o.default.getFirstMatch(
                          /(?:tizen\s?)?browser\/(\d+(\.?_?\d+)+)/i,
                          e
                        ) || o.default.getFirstMatch(i, e);
                    return n && (t.version = n), t;
                  },
                },
                {
                  test: [/qupzilla/i],
                  describe: function (e) {
                    var t = { name: 'QupZilla' },
                      n =
                        o.default.getFirstMatch(
                          /(?:qupzilla)[\s/](\d+(\.?_?\d+)+)/i,
                          e
                        ) || o.default.getFirstMatch(i, e);
                    return n && (t.version = n), t;
                  },
                },
                {
                  test: [/firefox|iceweasel|fxios/i],
                  describe: function (e) {
                    var t = { name: 'Firefox' },
                      n = o.default.getFirstMatch(
                        /(?:firefox|iceweasel|fxios)[\s/](\d+(\.?_?\d+)+)/i,
                        e
                      );
                    return n && (t.version = n), t;
                  },
                },
                {
                  test: [/electron/i],
                  describe: function (e) {
                    var t = { name: 'Electron' },
                      n = o.default.getFirstMatch(
                        /(?:electron)\/(\d+(\.?_?\d+)+)/i,
                        e
                      );
                    return n && (t.version = n), t;
                  },
                },
                {
                  test: [/MiuiBrowser/i],
                  describe: function (e) {
                    var t = { name: 'Miui' },
                      n = o.default.getFirstMatch(
                        /(?:MiuiBrowser)[\s/](\d+(\.?_?\d+)+)/i,
                        e
                      );
                    return n && (t.version = n), t;
                  },
                },
                {
                  test: [/chromium/i],
                  describe: function (e) {
                    var t = { name: 'Chromium' },
                      n =
                        o.default.getFirstMatch(
                          /(?:chromium)[\s/](\d+(\.?_?\d+)+)/i,
                          e
                        ) || o.default.getFirstMatch(i, e);
                    return n && (t.version = n), t;
                  },
                },
                {
                  test: [/chrome|crios|crmo/i],
                  describe: function (e) {
                    var t = { name: 'Chrome' },
                      n = o.default.getFirstMatch(
                        /(?:chrome|crios|crmo)\/(\d+(\.?_?\d+)+)/i,
                        e
                      );
                    return n && (t.version = n), t;
                  },
                },
                {
                  test: [/GSA/i],
                  describe: function (e) {
                    var t = { name: 'Google Search' },
                      n = o.default.getFirstMatch(
                        /(?:GSA)\/(\d+(\.?_?\d+)+)/i,
                        e
                      );
                    return n && (t.version = n), t;
                  },
                },
                {
                  test: function (e) {
                    var t = !e.test(/like android/i),
                      n = e.test(/android/i);
                    return t && n;
                  },
                  describe: function (e) {
                    var t = { name: 'Android Browser' },
                      n = o.default.getFirstMatch(i, e);
                    return n && (t.version = n), t;
                  },
                },
                {
                  test: [/playstation 4/i],
                  describe: function (e) {
                    var t = { name: 'PlayStation 4' },
                      n = o.default.getFirstMatch(i, e);
                    return n && (t.version = n), t;
                  },
                },
                {
                  test: [/safari|applewebkit/i],
                  describe: function (e) {
                    var t = { name: 'Safari' },
                      n = o.default.getFirstMatch(i, e);
                    return n && (t.version = n), t;
                  },
                },
                {
                  test: [/.*/i],
                  describe: function (e) {
                    var t =
                      -1 !== e.search('\\(')
                        ? /^(.*)\/(.*)[ \t]\((.*)/
                        : /^(.*)\/(.*) /;
                    return {
                      name: o.default.getFirstMatch(t, e),
                      version: o.default.getSecondMatch(t, e),
                    };
                  },
                },
              ];
            (t.default = s), (e.exports = t.default);
          },
          93: function (e, t, n) {
            'use strict';
            (t.__esModule = !0), (t.default = void 0);
            var r,
              o = (r = n(17)) && r.__esModule ? r : { default: r },
              i = n(18),
              s = [
                {
                  test: [/Roku\/DVP/],
                  describe: function (e) {
                    var t = o.default.getFirstMatch(/Roku\/DVP-(\d+\.\d+)/i, e);
                    return { name: i.OS_MAP.Roku, version: t };
                  },
                },
                {
                  test: [/windows phone/i],
                  describe: function (e) {
                    var t = o.default.getFirstMatch(
                      /windows phone (?:os)?\s?(\d+(\.\d+)*)/i,
                      e
                    );
                    return { name: i.OS_MAP.WindowsPhone, version: t };
                  },
                },
                {
                  test: [/windows /i],
                  describe: function (e) {
                    var t = o.default.getFirstMatch(
                        /Windows ((NT|XP)( \d\d?.\d)?)/i,
                        e
                      ),
                      n = o.default.getWindowsVersionName(t);
                    return {
                      name: i.OS_MAP.Windows,
                      version: t,
                      versionName: n,
                    };
                  },
                },
                {
                  test: [/Macintosh(.*?) FxiOS(.*?)\//],
                  describe: function (e) {
                    var t = { name: i.OS_MAP.iOS },
                      n = o.default.getSecondMatch(/(Version\/)(\d[\d.]+)/, e);
                    return n && (t.version = n), t;
                  },
                },
                {
                  test: [/macintosh/i],
                  describe: function (e) {
                    var t = o.default
                        .getFirstMatch(/mac os x (\d+(\.?_?\d+)+)/i, e)
                        .replace(/[_\s]/g, '.'),
                      n = o.default.getMacOSVersionName(t),
                      r = { name: i.OS_MAP.MacOS, version: t };
                    return n && (r.versionName = n), r;
                  },
                },
                {
                  test: [/(ipod|iphone|ipad)/i],
                  describe: function (e) {
                    var t = o.default
                      .getFirstMatch(/os (\d+([_\s]\d+)*) like mac os x/i, e)
                      .replace(/[_\s]/g, '.');
                    return { name: i.OS_MAP.iOS, version: t };
                  },
                },
                {
                  test: function (e) {
                    var t = !e.test(/like android/i),
                      n = e.test(/android/i);
                    return t && n;
                  },
                  describe: function (e) {
                    var t = o.default.getFirstMatch(
                        /android[\s/-](\d+(\.\d+)*)/i,
                        e
                      ),
                      n = o.default.getAndroidVersionName(t),
                      r = { name: i.OS_MAP.Android, version: t };
                    return n && (r.versionName = n), r;
                  },
                },
                {
                  test: [/(web|hpw)[o0]s/i],
                  describe: function (e) {
                    var t = o.default.getFirstMatch(
                        /(?:web|hpw)[o0]s\/(\d+(\.\d+)*)/i,
                        e
                      ),
                      n = { name: i.OS_MAP.WebOS };
                    return t && t.length && (n.version = t), n;
                  },
                },
                {
                  test: [/blackberry|\bbb\d+/i, /rim\stablet/i],
                  describe: function (e) {
                    var t =
                      o.default.getFirstMatch(
                        /rim\stablet\sos\s(\d+(\.\d+)*)/i,
                        e
                      ) ||
                      o.default.getFirstMatch(
                        /blackberry\d+\/(\d+([_\s]\d+)*)/i,
                        e
                      ) ||
                      o.default.getFirstMatch(/\bbb(\d+)/i, e);
                    return { name: i.OS_MAP.BlackBerry, version: t };
                  },
                },
                {
                  test: [/bada/i],
                  describe: function (e) {
                    var t = o.default.getFirstMatch(/bada\/(\d+(\.\d+)*)/i, e);
                    return { name: i.OS_MAP.Bada, version: t };
                  },
                },
                {
                  test: [/tizen/i],
                  describe: function (e) {
                    var t = o.default.getFirstMatch(
                      /tizen[/\s](\d+(\.\d+)*)/i,
                      e
                    );
                    return { name: i.OS_MAP.Tizen, version: t };
                  },
                },
                {
                  test: [/linux/i],
                  describe: function () {
                    return { name: i.OS_MAP.Linux };
                  },
                },
                {
                  test: [/CrOS/],
                  describe: function () {
                    return { name: i.OS_MAP.ChromeOS };
                  },
                },
                {
                  test: [/PlayStation 4/],
                  describe: function (e) {
                    var t = o.default.getFirstMatch(
                      /PlayStation 4[/\s](\d+(\.\d+)*)/i,
                      e
                    );
                    return { name: i.OS_MAP.PlayStation4, version: t };
                  },
                },
              ];
            (t.default = s), (e.exports = t.default);
          },
          94: function (e, t, n) {
            'use strict';
            (t.__esModule = !0), (t.default = void 0);
            var r,
              o = (r = n(17)) && r.__esModule ? r : { default: r },
              i = n(18),
              s = [
                {
                  test: [/googlebot/i],
                  describe: function () {
                    return { type: 'bot', vendor: 'Google' };
                  },
                },
                {
                  test: [/huawei/i],
                  describe: function (e) {
                    var t = o.default.getFirstMatch(/(can-l01)/i, e) && 'Nova',
                      n = { type: i.PLATFORMS_MAP.mobile, vendor: 'Huawei' };
                    return t && (n.model = t), n;
                  },
                },
                {
                  test: [/nexus\s*(?:7|8|9|10).*/i],
                  describe: function () {
                    return { type: i.PLATFORMS_MAP.tablet, vendor: 'Nexus' };
                  },
                },
                {
                  test: [/ipad/i],
                  describe: function () {
                    return {
                      type: i.PLATFORMS_MAP.tablet,
                      vendor: 'Apple',
                      model: 'iPad',
                    };
                  },
                },
                {
                  test: [/Macintosh(.*?) FxiOS(.*?)\//],
                  describe: function () {
                    return {
                      type: i.PLATFORMS_MAP.tablet,
                      vendor: 'Apple',
                      model: 'iPad',
                    };
                  },
                },
                {
                  test: [/kftt build/i],
                  describe: function () {
                    return {
                      type: i.PLATFORMS_MAP.tablet,
                      vendor: 'Amazon',
                      model: 'Kindle Fire HD 7',
                    };
                  },
                },
                {
                  test: [/silk/i],
                  describe: function () {
                    return { type: i.PLATFORMS_MAP.tablet, vendor: 'Amazon' };
                  },
                },
                {
                  test: [/tablet(?! pc)/i],
                  describe: function () {
                    return { type: i.PLATFORMS_MAP.tablet };
                  },
                },
                {
                  test: function (e) {
                    var t = e.test(/ipod|iphone/i),
                      n = e.test(/like (ipod|iphone)/i);
                    return t && !n;
                  },
                  describe: function (e) {
                    var t = o.default.getFirstMatch(/(ipod|iphone)/i, e);
                    return {
                      type: i.PLATFORMS_MAP.mobile,
                      vendor: 'Apple',
                      model: t,
                    };
                  },
                },
                {
                  test: [/nexus\s*[0-6].*/i, /galaxy nexus/i],
                  describe: function () {
                    return { type: i.PLATFORMS_MAP.mobile, vendor: 'Nexus' };
                  },
                },
                {
                  test: [/[^-]mobi/i],
                  describe: function () {
                    return { type: i.PLATFORMS_MAP.mobile };
                  },
                },
                {
                  test: function (e) {
                    return 'blackberry' === e.getBrowserName(!0);
                  },
                  describe: function () {
                    return {
                      type: i.PLATFORMS_MAP.mobile,
                      vendor: 'BlackBerry',
                    };
                  },
                },
                {
                  test: function (e) {
                    return 'bada' === e.getBrowserName(!0);
                  },
                  describe: function () {
                    return { type: i.PLATFORMS_MAP.mobile };
                  },
                },
                {
                  test: function (e) {
                    return 'windows phone' === e.getBrowserName();
                  },
                  describe: function () {
                    return {
                      type: i.PLATFORMS_MAP.mobile,
                      vendor: 'Microsoft',
                    };
                  },
                },
                {
                  test: function (e) {
                    var t = Number(String(e.getOSVersion()).split('.')[0]);
                    return 'android' === e.getOSName(!0) && t >= 3;
                  },
                  describe: function () {
                    return { type: i.PLATFORMS_MAP.tablet };
                  },
                },
                {
                  test: function (e) {
                    return 'android' === e.getOSName(!0);
                  },
                  describe: function () {
                    return { type: i.PLATFORMS_MAP.mobile };
                  },
                },
                {
                  test: function (e) {
                    return 'macos' === e.getOSName(!0);
                  },
                  describe: function () {
                    return { type: i.PLATFORMS_MAP.desktop, vendor: 'Apple' };
                  },
                },
                {
                  test: function (e) {
                    return 'windows' === e.getOSName(!0);
                  },
                  describe: function () {
                    return { type: i.PLATFORMS_MAP.desktop };
                  },
                },
                {
                  test: function (e) {
                    return 'linux' === e.getOSName(!0);
                  },
                  describe: function () {
                    return { type: i.PLATFORMS_MAP.desktop };
                  },
                },
                {
                  test: function (e) {
                    return 'playstation 4' === e.getOSName(!0);
                  },
                  describe: function () {
                    return { type: i.PLATFORMS_MAP.tv };
                  },
                },
                {
                  test: function (e) {
                    return 'roku' === e.getOSName(!0);
                  },
                  describe: function () {
                    return { type: i.PLATFORMS_MAP.tv };
                  },
                },
              ];
            (t.default = s), (e.exports = t.default);
          },
          95: function (e, t, n) {
            'use strict';
            (t.__esModule = !0), (t.default = void 0);
            var r,
              o = (r = n(17)) && r.__esModule ? r : { default: r },
              i = n(18),
              s = [
                {
                  test: function (e) {
                    return 'microsoft edge' === e.getBrowserName(!0);
                  },
                  describe: function (e) {
                    if (/\sedg\//i.test(e)) return { name: i.ENGINE_MAP.Blink };
                    var t = o.default.getFirstMatch(
                      /edge\/(\d+(\.?_?\d+)+)/i,
                      e
                    );
                    return { name: i.ENGINE_MAP.EdgeHTML, version: t };
                  },
                },
                {
                  test: [/trident/i],
                  describe: function (e) {
                    var t = { name: i.ENGINE_MAP.Trident },
                      n = o.default.getFirstMatch(
                        /trident\/(\d+(\.?_?\d+)+)/i,
                        e
                      );
                    return n && (t.version = n), t;
                  },
                },
                {
                  test: function (e) {
                    return e.test(/presto/i);
                  },
                  describe: function (e) {
                    var t = { name: i.ENGINE_MAP.Presto },
                      n = o.default.getFirstMatch(
                        /presto\/(\d+(\.?_?\d+)+)/i,
                        e
                      );
                    return n && (t.version = n), t;
                  },
                },
                {
                  test: function (e) {
                    var t = e.test(/gecko/i),
                      n = e.test(/like gecko/i);
                    return t && !n;
                  },
                  describe: function (e) {
                    var t = { name: i.ENGINE_MAP.Gecko },
                      n = o.default.getFirstMatch(
                        /gecko\/(\d+(\.?_?\d+)+)/i,
                        e
                      );
                    return n && (t.version = n), t;
                  },
                },
                {
                  test: [/(apple)?webkit\/537\.36/i],
                  describe: function () {
                    return { name: i.ENGINE_MAP.Blink };
                  },
                },
                {
                  test: [/(apple)?webkit/i],
                  describe: function (e) {
                    var t = { name: i.ENGINE_MAP.WebKit },
                      n = o.default.getFirstMatch(
                        /webkit\/(\d+(\.?_?\d+)+)/i,
                        e
                      );
                    return n && (t.version = n), t;
                  },
                },
              ];
            (t.default = s), (e.exports = t.default);
          },
        });
      },
      8834: (e, t, n) => {
        'use strict';
        var r = n(5766),
          o = n(2333),
          i = n(7906);
        function s() {
          return u.TYPED_ARRAY_SUPPORT ? 2147483647 : 1073741823;
        }
        function a(e, t) {
          if (s() < t) throw new RangeError('Invalid typed array length');
          return (
            u.TYPED_ARRAY_SUPPORT
              ? ((e = new Uint8Array(t)).__proto__ = u.prototype)
              : (null === e && (e = new u(t)), (e.length = t)),
            e
          );
        }
        function u(e, t, n) {
          if (!(u.TYPED_ARRAY_SUPPORT || this instanceof u))
            return new u(e, t, n);
          if ('number' == typeof e) {
            if ('string' == typeof t)
              throw new Error(
                'If encoding is specified then the first argument must be a string'
              );
            return f(this, e);
          }
          return c(this, e, t, n);
        }
        function c(e, t, n, r) {
          if ('number' == typeof t)
            throw new TypeError('"value" argument must not be a number');
          return 'undefined' != typeof ArrayBuffer && t instanceof ArrayBuffer
            ? (function (e, t, n, r) {
                if ((t.byteLength, n < 0 || t.byteLength < n))
                  throw new RangeError("'offset' is out of bounds");
                if (t.byteLength < n + (r || 0))
                  throw new RangeError("'length' is out of bounds");
                return (
                  (t =
                    void 0 === n && void 0 === r
                      ? new Uint8Array(t)
                      : void 0 === r
                      ? new Uint8Array(t, n)
                      : new Uint8Array(t, n, r)),
                  u.TYPED_ARRAY_SUPPORT
                    ? ((e = t).__proto__ = u.prototype)
                    : (e = h(e, t)),
                  e
                );
              })(e, t, n, r)
            : 'string' == typeof t
            ? (function (e, t, n) {
                if (
                  (('string' == typeof n && '' !== n) || (n = 'utf8'),
                  !u.isEncoding(n))
                )
                  throw new TypeError(
                    '"encoding" must be a valid string encoding'
                  );
                var r = 0 | p(t, n),
                  o = (e = a(e, r)).write(t, n);
                return o !== r && (e = e.slice(0, o)), e;
              })(e, t, n)
            : (function (e, t) {
                if (u.isBuffer(t)) {
                  var n = 0 | d(t.length);
                  return 0 === (e = a(e, n)).length || t.copy(e, 0, 0, n), e;
                }
                if (t) {
                  if (
                    ('undefined' != typeof ArrayBuffer &&
                      t.buffer instanceof ArrayBuffer) ||
                    'length' in t
                  )
                    return 'number' != typeof t.length || (r = t.length) != r
                      ? a(e, 0)
                      : h(e, t);
                  if ('Buffer' === t.type && i(t.data)) return h(e, t.data);
                }
                var r;
                throw new TypeError(
                  'First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.'
                );
              })(e, t);
        }
        function l(e) {
          if ('number' != typeof e)
            throw new TypeError('"size" argument must be a number');
          if (e < 0)
            throw new RangeError('"size" argument must not be negative');
        }
        function f(e, t) {
          if ((l(t), (e = a(e, t < 0 ? 0 : 0 | d(t))), !u.TYPED_ARRAY_SUPPORT))
            for (var n = 0; n < t; ++n) e[n] = 0;
          return e;
        }
        function h(e, t) {
          var n = t.length < 0 ? 0 : 0 | d(t.length);
          e = a(e, n);
          for (var r = 0; r < n; r += 1) e[r] = 255 & t[r];
          return e;
        }
        function d(e) {
          if (e >= s())
            throw new RangeError(
              'Attempt to allocate Buffer larger than maximum size: 0x' +
                s().toString(16) +
                ' bytes'
            );
          return 0 | e;
        }
        function p(e, t) {
          if (u.isBuffer(e)) return e.length;
          if (
            'undefined' != typeof ArrayBuffer &&
            'function' == typeof ArrayBuffer.isView &&
            (ArrayBuffer.isView(e) || e instanceof ArrayBuffer)
          )
            return e.byteLength;
          'string' != typeof e && (e = '' + e);
          var n = e.length;
          if (0 === n) return 0;
          for (var r = !1; ; )
            switch (t) {
              case 'ascii':
              case 'latin1':
              case 'binary':
                return n;
              case 'utf8':
              case 'utf-8':
              case void 0:
                return B(e).length;
              case 'ucs2':
              case 'ucs-2':
              case 'utf16le':
              case 'utf-16le':
                return 2 * n;
              case 'hex':
                return n >>> 1;
              case 'base64':
                return V(e).length;
              default:
                if (r) return B(e).length;
                (t = ('' + t).toLowerCase()), (r = !0);
            }
        }
        function g(e, t, n) {
          var r = !1;
          if (((void 0 === t || t < 0) && (t = 0), t > this.length)) return '';
          if (((void 0 === n || n > this.length) && (n = this.length), n <= 0))
            return '';
          if ((n >>>= 0) <= (t >>>= 0)) return '';
          for (e || (e = 'utf8'); ; )
            switch (e) {
              case 'hex':
                return x(this, t, n);
              case 'utf8':
              case 'utf-8':
                return I(this, t, n);
              case 'ascii':
                return O(this, t, n);
              case 'latin1':
              case 'binary':
                return T(this, t, n);
              case 'base64':
                return C(this, t, n);
              case 'ucs2':
              case 'ucs-2':
              case 'utf16le':
              case 'utf-16le':
                return U(this, t, n);
              default:
                if (r) throw new TypeError('Unknown encoding: ' + e);
                (e = (e + '').toLowerCase()), (r = !0);
            }
        }
        function v(e, t, n) {
          var r = e[t];
          (e[t] = e[n]), (e[n] = r);
        }
        function y(e, t, n, r, o) {
          if (0 === e.length) return -1;
          if (
            ('string' == typeof n
              ? ((r = n), (n = 0))
              : n > 2147483647
              ? (n = 2147483647)
              : n < -2147483648 && (n = -2147483648),
            (n = +n),
            isNaN(n) && (n = o ? 0 : e.length - 1),
            n < 0 && (n = e.length + n),
            n >= e.length)
          ) {
            if (o) return -1;
            n = e.length - 1;
          } else if (n < 0) {
            if (!o) return -1;
            n = 0;
          }
          if (('string' == typeof t && (t = u.from(t, r)), u.isBuffer(t)))
            return 0 === t.length ? -1 : m(e, t, n, r, o);
          if ('number' == typeof t)
            return (
              (t &= 255),
              u.TYPED_ARRAY_SUPPORT &&
              'function' == typeof Uint8Array.prototype.indexOf
                ? o
                  ? Uint8Array.prototype.indexOf.call(e, t, n)
                  : Uint8Array.prototype.lastIndexOf.call(e, t, n)
                : m(e, [t], n, r, o)
            );
          throw new TypeError('val must be string, number or Buffer');
        }
        function m(e, t, n, r, o) {
          var i,
            s = 1,
            a = e.length,
            u = t.length;
          if (
            void 0 !== r &&
            ('ucs2' === (r = String(r).toLowerCase()) ||
              'ucs-2' === r ||
              'utf16le' === r ||
              'utf-16le' === r)
          ) {
            if (e.length < 2 || t.length < 2) return -1;
            (s = 2), (a /= 2), (u /= 2), (n /= 2);
          }
          function c(e, t) {
            return 1 === s ? e[t] : e.readUInt16BE(t * s);
          }
          if (o) {
            var l = -1;
            for (i = n; i < a; i++)
              if (c(e, i) === c(t, -1 === l ? 0 : i - l)) {
                if ((-1 === l && (l = i), i - l + 1 === u)) return l * s;
              } else -1 !== l && (i -= i - l), (l = -1);
          } else
            for (n + u > a && (n = a - u), i = n; i >= 0; i--) {
              for (var f = !0, h = 0; h < u; h++)
                if (c(e, i + h) !== c(t, h)) {
                  f = !1;
                  break;
                }
              if (f) return i;
            }
          return -1;
        }
        function b(e, t, n, r) {
          n = Number(n) || 0;
          var o = e.length - n;
          r ? (r = Number(r)) > o && (r = o) : (r = o);
          var i = t.length;
          if (i % 2 != 0) throw new TypeError('Invalid hex string');
          r > i / 2 && (r = i / 2);
          for (var s = 0; s < r; ++s) {
            var a = parseInt(t.substr(2 * s, 2), 16);
            if (isNaN(a)) return s;
            e[n + s] = a;
          }
          return s;
        }
        function w(e, t, n, r) {
          return q(B(t, e.length - n), e, n, r);
        }
        function S(e, t, n, r) {
          return q(
            (function (e) {
              for (var t = [], n = 0; n < e.length; ++n)
                t.push(255 & e.charCodeAt(n));
              return t;
            })(t),
            e,
            n,
            r
          );
        }
        function _(e, t, n, r) {
          return S(e, t, n, r);
        }
        function A(e, t, n, r) {
          return q(V(t), e, n, r);
        }
        function E(e, t, n, r) {
          return q(
            (function (e, t) {
              for (
                var n, r, o, i = [], s = 0;
                s < e.length && !((t -= 2) < 0);
                ++s
              )
                (r = (n = e.charCodeAt(s)) >> 8),
                  (o = n % 256),
                  i.push(o),
                  i.push(r);
              return i;
            })(t, e.length - n),
            e,
            n,
            r
          );
        }
        function C(e, t, n) {
          return 0 === t && n === e.length
            ? r.fromByteArray(e)
            : r.fromByteArray(e.slice(t, n));
        }
        function I(e, t, n) {
          n = Math.min(e.length, n);
          for (var r = [], o = t; o < n; ) {
            var i,
              s,
              a,
              u,
              c = e[o],
              l = null,
              f = c > 239 ? 4 : c > 223 ? 3 : c > 191 ? 2 : 1;
            if (o + f <= n)
              switch (f) {
                case 1:
                  c < 128 && (l = c);
                  break;
                case 2:
                  128 == (192 & (i = e[o + 1])) &&
                    (u = ((31 & c) << 6) | (63 & i)) > 127 &&
                    (l = u);
                  break;
                case 3:
                  (i = e[o + 1]),
                    (s = e[o + 2]),
                    128 == (192 & i) &&
                      128 == (192 & s) &&
                      (u = ((15 & c) << 12) | ((63 & i) << 6) | (63 & s)) >
                        2047 &&
                      (u < 55296 || u > 57343) &&
                      (l = u);
                  break;
                case 4:
                  (i = e[o + 1]),
                    (s = e[o + 2]),
                    (a = e[o + 3]),
                    128 == (192 & i) &&
                      128 == (192 & s) &&
                      128 == (192 & a) &&
                      (u =
                        ((15 & c) << 18) |
                        ((63 & i) << 12) |
                        ((63 & s) << 6) |
                        (63 & a)) > 65535 &&
                      u < 1114112 &&
                      (l = u);
              }
            null === l
              ? ((l = 65533), (f = 1))
              : l > 65535 &&
                ((l -= 65536),
                r.push(((l >>> 10) & 1023) | 55296),
                (l = 56320 | (1023 & l))),
              r.push(l),
              (o += f);
          }
          return (function (e) {
            var t = e.length;
            if (t <= P) return String.fromCharCode.apply(String, e);
            for (var n = '', r = 0; r < t; )
              n += String.fromCharCode.apply(String, e.slice(r, (r += P)));
            return n;
          })(r);
        }
        (t.lW = u),
          (t.h2 = 50),
          (u.TYPED_ARRAY_SUPPORT =
            void 0 !== n.g.TYPED_ARRAY_SUPPORT
              ? n.g.TYPED_ARRAY_SUPPORT
              : (function () {
                  try {
                    var e = new Uint8Array(1);
                    return (
                      (e.__proto__ = {
                        __proto__: Uint8Array.prototype,
                        foo: function () {
                          return 42;
                        },
                      }),
                      42 === e.foo() &&
                        'function' == typeof e.subarray &&
                        0 === e.subarray(1, 1).byteLength
                    );
                  } catch (e) {
                    return !1;
                  }
                })()),
          s(),
          (u.poolSize = 8192),
          (u._augment = function (e) {
            return (e.__proto__ = u.prototype), e;
          }),
          (u.from = function (e, t, n) {
            return c(null, e, t, n);
          }),
          u.TYPED_ARRAY_SUPPORT &&
            ((u.prototype.__proto__ = Uint8Array.prototype),
            (u.__proto__ = Uint8Array),
            'undefined' != typeof Symbol &&
              Symbol.species &&
              u[Symbol.species] === u &&
              Object.defineProperty(u, Symbol.species, {
                value: null,
                configurable: !0,
              })),
          (u.alloc = function (e, t, n) {
            return (function (e, t, n, r) {
              return (
                l(t),
                t <= 0
                  ? a(e, t)
                  : void 0 !== n
                  ? 'string' == typeof r
                    ? a(e, t).fill(n, r)
                    : a(e, t).fill(n)
                  : a(e, t)
              );
            })(null, e, t, n);
          }),
          (u.allocUnsafe = function (e) {
            return f(null, e);
          }),
          (u.allocUnsafeSlow = function (e) {
            return f(null, e);
          }),
          (u.isBuffer = function (e) {
            return !(null == e || !e._isBuffer);
          }),
          (u.compare = function (e, t) {
            if (!u.isBuffer(e) || !u.isBuffer(t))
              throw new TypeError('Arguments must be Buffers');
            if (e === t) return 0;
            for (
              var n = e.length, r = t.length, o = 0, i = Math.min(n, r);
              o < i;
              ++o
            )
              if (e[o] !== t[o]) {
                (n = e[o]), (r = t[o]);
                break;
              }
            return n < r ? -1 : r < n ? 1 : 0;
          }),
          (u.isEncoding = function (e) {
            switch (String(e).toLowerCase()) {
              case 'hex':
              case 'utf8':
              case 'utf-8':
              case 'ascii':
              case 'latin1':
              case 'binary':
              case 'base64':
              case 'ucs2':
              case 'ucs-2':
              case 'utf16le':
              case 'utf-16le':
                return !0;
              default:
                return !1;
            }
          }),
          (u.concat = function (e, t) {
            if (!i(e))
              throw new TypeError(
                '"list" argument must be an Array of Buffers'
              );
            if (0 === e.length) return u.alloc(0);
            var n;
            if (void 0 === t)
              for (t = 0, n = 0; n < e.length; ++n) t += e[n].length;
            var r = u.allocUnsafe(t),
              o = 0;
            for (n = 0; n < e.length; ++n) {
              var s = e[n];
              if (!u.isBuffer(s))
                throw new TypeError(
                  '"list" argument must be an Array of Buffers'
                );
              s.copy(r, o), (o += s.length);
            }
            return r;
          }),
          (u.byteLength = p),
          (u.prototype._isBuffer = !0),
          (u.prototype.swap16 = function () {
            var e = this.length;
            if (e % 2 != 0)
              throw new RangeError('Buffer size must be a multiple of 16-bits');
            for (var t = 0; t < e; t += 2) v(this, t, t + 1);
            return this;
          }),
          (u.prototype.swap32 = function () {
            var e = this.length;
            if (e % 4 != 0)
              throw new RangeError('Buffer size must be a multiple of 32-bits');
            for (var t = 0; t < e; t += 4)
              v(this, t, t + 3), v(this, t + 1, t + 2);
            return this;
          }),
          (u.prototype.swap64 = function () {
            var e = this.length;
            if (e % 8 != 0)
              throw new RangeError('Buffer size must be a multiple of 64-bits');
            for (var t = 0; t < e; t += 8)
              v(this, t, t + 7),
                v(this, t + 1, t + 6),
                v(this, t + 2, t + 5),
                v(this, t + 3, t + 4);
            return this;
          }),
          (u.prototype.toString = function () {
            var e = 0 | this.length;
            return 0 === e
              ? ''
              : 0 === arguments.length
              ? I(this, 0, e)
              : g.apply(this, arguments);
          }),
          (u.prototype.equals = function (e) {
            if (!u.isBuffer(e))
              throw new TypeError('Argument must be a Buffer');
            return this === e || 0 === u.compare(this, e);
          }),
          (u.prototype.inspect = function () {
            var e = '',
              n = t.h2;
            return (
              this.length > 0 &&
                ((e = this.toString('hex', 0, n).match(/.{2}/g).join(' ')),
                this.length > n && (e += ' ... ')),
              '<Buffer ' + e + '>'
            );
          }),
          (u.prototype.compare = function (e, t, n, r, o) {
            if (!u.isBuffer(e))
              throw new TypeError('Argument must be a Buffer');
            if (
              (void 0 === t && (t = 0),
              void 0 === n && (n = e ? e.length : 0),
              void 0 === r && (r = 0),
              void 0 === o && (o = this.length),
              t < 0 || n > e.length || r < 0 || o > this.length)
            )
              throw new RangeError('out of range index');
            if (r >= o && t >= n) return 0;
            if (r >= o) return -1;
            if (t >= n) return 1;
            if (this === e) return 0;
            for (
              var i = (o >>>= 0) - (r >>>= 0),
                s = (n >>>= 0) - (t >>>= 0),
                a = Math.min(i, s),
                c = this.slice(r, o),
                l = e.slice(t, n),
                f = 0;
              f < a;
              ++f
            )
              if (c[f] !== l[f]) {
                (i = c[f]), (s = l[f]);
                break;
              }
            return i < s ? -1 : s < i ? 1 : 0;
          }),
          (u.prototype.includes = function (e, t, n) {
            return -1 !== this.indexOf(e, t, n);
          }),
          (u.prototype.indexOf = function (e, t, n) {
            return y(this, e, t, n, !0);
          }),
          (u.prototype.lastIndexOf = function (e, t, n) {
            return y(this, e, t, n, !1);
          }),
          (u.prototype.write = function (e, t, n, r) {
            if (void 0 === t) (r = 'utf8'), (n = this.length), (t = 0);
            else if (void 0 === n && 'string' == typeof t)
              (r = t), (n = this.length), (t = 0);
            else {
              if (!isFinite(t))
                throw new Error(
                  'Buffer.write(string, encoding, offset[, length]) is no longer supported'
                );
              (t |= 0),
                isFinite(n)
                  ? ((n |= 0), void 0 === r && (r = 'utf8'))
                  : ((r = n), (n = void 0));
            }
            var o = this.length - t;
            if (
              ((void 0 === n || n > o) && (n = o),
              (e.length > 0 && (n < 0 || t < 0)) || t > this.length)
            )
              throw new RangeError('Attempt to write outside buffer bounds');
            r || (r = 'utf8');
            for (var i = !1; ; )
              switch (r) {
                case 'hex':
                  return b(this, e, t, n);
                case 'utf8':
                case 'utf-8':
                  return w(this, e, t, n);
                case 'ascii':
                  return S(this, e, t, n);
                case 'latin1':
                case 'binary':
                  return _(this, e, t, n);
                case 'base64':
                  return A(this, e, t, n);
                case 'ucs2':
                case 'ucs-2':
                case 'utf16le':
                case 'utf-16le':
                  return E(this, e, t, n);
                default:
                  if (i) throw new TypeError('Unknown encoding: ' + r);
                  (r = ('' + r).toLowerCase()), (i = !0);
              }
          }),
          (u.prototype.toJSON = function () {
            return {
              type: 'Buffer',
              data: Array.prototype.slice.call(this._arr || this, 0),
            };
          });
        var P = 4096;
        function O(e, t, n) {
          var r = '';
          n = Math.min(e.length, n);
          for (var o = t; o < n; ++o) r += String.fromCharCode(127 & e[o]);
          return r;
        }
        function T(e, t, n) {
          var r = '';
          n = Math.min(e.length, n);
          for (var o = t; o < n; ++o) r += String.fromCharCode(e[o]);
          return r;
        }
        function x(e, t, n) {
          var r,
            o = e.length;
          (!t || t < 0) && (t = 0), (!n || n < 0 || n > o) && (n = o);
          for (var i = '', s = t; s < n; ++s)
            i += (r = e[s]) < 16 ? '0' + r.toString(16) : r.toString(16);
          return i;
        }
        function U(e, t, n) {
          for (var r = e.slice(t, n), o = '', i = 0; i < r.length; i += 2)
            o += String.fromCharCode(r[i] + 256 * r[i + 1]);
          return o;
        }
        function k(e, t, n) {
          if (e % 1 != 0 || e < 0) throw new RangeError('offset is not uint');
          if (e + t > n)
            throw new RangeError('Trying to access beyond buffer length');
        }
        function M(e, t, n, r, o, i) {
          if (!u.isBuffer(e))
            throw new TypeError('"buffer" argument must be a Buffer instance');
          if (t > o || t < i)
            throw new RangeError('"value" argument is out of bounds');
          if (n + r > e.length) throw new RangeError('Index out of range');
        }
        function R(e, t, n, r) {
          t < 0 && (t = 65535 + t + 1);
          for (var o = 0, i = Math.min(e.length - n, 2); o < i; ++o)
            e[n + o] =
              (t & (255 << (8 * (r ? o : 1 - o)))) >>> (8 * (r ? o : 1 - o));
        }
        function N(e, t, n, r) {
          t < 0 && (t = 4294967295 + t + 1);
          for (var o = 0, i = Math.min(e.length - n, 4); o < i; ++o)
            e[n + o] = (t >>> (8 * (r ? o : 3 - o))) & 255;
        }
        function D(e, t, n, r, o, i) {
          if (n + r > e.length) throw new RangeError('Index out of range');
          if (n < 0) throw new RangeError('Index out of range');
        }
        function j(e, t, n, r, i) {
          return i || D(e, 0, n, 4), o.write(e, t, n, r, 23, 4), n + 4;
        }
        function F(e, t, n, r, i) {
          return i || D(e, 0, n, 8), o.write(e, t, n, r, 52, 8), n + 8;
        }
        (u.prototype.slice = function (e, t) {
          var n,
            r = this.length;
          if (
            ((e = ~~e) < 0 ? (e += r) < 0 && (e = 0) : e > r && (e = r),
            (t = void 0 === t ? r : ~~t) < 0
              ? (t += r) < 0 && (t = 0)
              : t > r && (t = r),
            t < e && (t = e),
            u.TYPED_ARRAY_SUPPORT)
          )
            (n = this.subarray(e, t)).__proto__ = u.prototype;
          else {
            var o = t - e;
            n = new u(o, void 0);
            for (var i = 0; i < o; ++i) n[i] = this[i + e];
          }
          return n;
        }),
          (u.prototype.readUIntLE = function (e, t, n) {
            (e |= 0), (t |= 0), n || k(e, t, this.length);
            for (var r = this[e], o = 1, i = 0; ++i < t && (o *= 256); )
              r += this[e + i] * o;
            return r;
          }),
          (u.prototype.readUIntBE = function (e, t, n) {
            (e |= 0), (t |= 0), n || k(e, t, this.length);
            for (var r = this[e + --t], o = 1; t > 0 && (o *= 256); )
              r += this[e + --t] * o;
            return r;
          }),
          (u.prototype.readUInt8 = function (e, t) {
            return t || k(e, 1, this.length), this[e];
          }),
          (u.prototype.readUInt16LE = function (e, t) {
            return t || k(e, 2, this.length), this[e] | (this[e + 1] << 8);
          }),
          (u.prototype.readUInt16BE = function (e, t) {
            return t || k(e, 2, this.length), (this[e] << 8) | this[e + 1];
          }),
          (u.prototype.readUInt32LE = function (e, t) {
            return (
              t || k(e, 4, this.length),
              (this[e] | (this[e + 1] << 8) | (this[e + 2] << 16)) +
                16777216 * this[e + 3]
            );
          }),
          (u.prototype.readUInt32BE = function (e, t) {
            return (
              t || k(e, 4, this.length),
              16777216 * this[e] +
                ((this[e + 1] << 16) | (this[e + 2] << 8) | this[e + 3])
            );
          }),
          (u.prototype.readIntLE = function (e, t, n) {
            (e |= 0), (t |= 0), n || k(e, t, this.length);
            for (var r = this[e], o = 1, i = 0; ++i < t && (o *= 256); )
              r += this[e + i] * o;
            return r >= (o *= 128) && (r -= Math.pow(2, 8 * t)), r;
          }),
          (u.prototype.readIntBE = function (e, t, n) {
            (e |= 0), (t |= 0), n || k(e, t, this.length);
            for (var r = t, o = 1, i = this[e + --r]; r > 0 && (o *= 256); )
              i += this[e + --r] * o;
            return i >= (o *= 128) && (i -= Math.pow(2, 8 * t)), i;
          }),
          (u.prototype.readInt8 = function (e, t) {
            return (
              t || k(e, 1, this.length),
              128 & this[e] ? -1 * (255 - this[e] + 1) : this[e]
            );
          }),
          (u.prototype.readInt16LE = function (e, t) {
            t || k(e, 2, this.length);
            var n = this[e] | (this[e + 1] << 8);
            return 32768 & n ? 4294901760 | n : n;
          }),
          (u.prototype.readInt16BE = function (e, t) {
            t || k(e, 2, this.length);
            var n = this[e + 1] | (this[e] << 8);
            return 32768 & n ? 4294901760 | n : n;
          }),
          (u.prototype.readInt32LE = function (e, t) {
            return (
              t || k(e, 4, this.length),
              this[e] |
                (this[e + 1] << 8) |
                (this[e + 2] << 16) |
                (this[e + 3] << 24)
            );
          }),
          (u.prototype.readInt32BE = function (e, t) {
            return (
              t || k(e, 4, this.length),
              (this[e] << 24) |
                (this[e + 1] << 16) |
                (this[e + 2] << 8) |
                this[e + 3]
            );
          }),
          (u.prototype.readFloatLE = function (e, t) {
            return t || k(e, 4, this.length), o.read(this, e, !0, 23, 4);
          }),
          (u.prototype.readFloatBE = function (e, t) {
            return t || k(e, 4, this.length), o.read(this, e, !1, 23, 4);
          }),
          (u.prototype.readDoubleLE = function (e, t) {
            return t || k(e, 8, this.length), o.read(this, e, !0, 52, 8);
          }),
          (u.prototype.readDoubleBE = function (e, t) {
            return t || k(e, 8, this.length), o.read(this, e, !1, 52, 8);
          }),
          (u.prototype.writeUIntLE = function (e, t, n, r) {
            (e = +e),
              (t |= 0),
              (n |= 0),
              r || M(this, e, t, n, Math.pow(2, 8 * n) - 1, 0);
            var o = 1,
              i = 0;
            for (this[t] = 255 & e; ++i < n && (o *= 256); )
              this[t + i] = (e / o) & 255;
            return t + n;
          }),
          (u.prototype.writeUIntBE = function (e, t, n, r) {
            (e = +e),
              (t |= 0),
              (n |= 0),
              r || M(this, e, t, n, Math.pow(2, 8 * n) - 1, 0);
            var o = n - 1,
              i = 1;
            for (this[t + o] = 255 & e; --o >= 0 && (i *= 256); )
              this[t + o] = (e / i) & 255;
            return t + n;
          }),
          (u.prototype.writeUInt8 = function (e, t, n) {
            return (
              (e = +e),
              (t |= 0),
              n || M(this, e, t, 1, 255, 0),
              u.TYPED_ARRAY_SUPPORT || (e = Math.floor(e)),
              (this[t] = 255 & e),
              t + 1
            );
          }),
          (u.prototype.writeUInt16LE = function (e, t, n) {
            return (
              (e = +e),
              (t |= 0),
              n || M(this, e, t, 2, 65535, 0),
              u.TYPED_ARRAY_SUPPORT
                ? ((this[t] = 255 & e), (this[t + 1] = e >>> 8))
                : R(this, e, t, !0),
              t + 2
            );
          }),
          (u.prototype.writeUInt16BE = function (e, t, n) {
            return (
              (e = +e),
              (t |= 0),
              n || M(this, e, t, 2, 65535, 0),
              u.TYPED_ARRAY_SUPPORT
                ? ((this[t] = e >>> 8), (this[t + 1] = 255 & e))
                : R(this, e, t, !1),
              t + 2
            );
          }),
          (u.prototype.writeUInt32LE = function (e, t, n) {
            return (
              (e = +e),
              (t |= 0),
              n || M(this, e, t, 4, 4294967295, 0),
              u.TYPED_ARRAY_SUPPORT
                ? ((this[t + 3] = e >>> 24),
                  (this[t + 2] = e >>> 16),
                  (this[t + 1] = e >>> 8),
                  (this[t] = 255 & e))
                : N(this, e, t, !0),
              t + 4
            );
          }),
          (u.prototype.writeUInt32BE = function (e, t, n) {
            return (
              (e = +e),
              (t |= 0),
              n || M(this, e, t, 4, 4294967295, 0),
              u.TYPED_ARRAY_SUPPORT
                ? ((this[t] = e >>> 24),
                  (this[t + 1] = e >>> 16),
                  (this[t + 2] = e >>> 8),
                  (this[t + 3] = 255 & e))
                : N(this, e, t, !1),
              t + 4
            );
          }),
          (u.prototype.writeIntLE = function (e, t, n, r) {
            if (((e = +e), (t |= 0), !r)) {
              var o = Math.pow(2, 8 * n - 1);
              M(this, e, t, n, o - 1, -o);
            }
            var i = 0,
              s = 1,
              a = 0;
            for (this[t] = 255 & e; ++i < n && (s *= 256); )
              e < 0 && 0 === a && 0 !== this[t + i - 1] && (a = 1),
                (this[t + i] = (((e / s) >> 0) - a) & 255);
            return t + n;
          }),
          (u.prototype.writeIntBE = function (e, t, n, r) {
            if (((e = +e), (t |= 0), !r)) {
              var o = Math.pow(2, 8 * n - 1);
              M(this, e, t, n, o - 1, -o);
            }
            var i = n - 1,
              s = 1,
              a = 0;
            for (this[t + i] = 255 & e; --i >= 0 && (s *= 256); )
              e < 0 && 0 === a && 0 !== this[t + i + 1] && (a = 1),
                (this[t + i] = (((e / s) >> 0) - a) & 255);
            return t + n;
          }),
          (u.prototype.writeInt8 = function (e, t, n) {
            return (
              (e = +e),
              (t |= 0),
              n || M(this, e, t, 1, 127, -128),
              u.TYPED_ARRAY_SUPPORT || (e = Math.floor(e)),
              e < 0 && (e = 255 + e + 1),
              (this[t] = 255 & e),
              t + 1
            );
          }),
          (u.prototype.writeInt16LE = function (e, t, n) {
            return (
              (e = +e),
              (t |= 0),
              n || M(this, e, t, 2, 32767, -32768),
              u.TYPED_ARRAY_SUPPORT
                ? ((this[t] = 255 & e), (this[t + 1] = e >>> 8))
                : R(this, e, t, !0),
              t + 2
            );
          }),
          (u.prototype.writeInt16BE = function (e, t, n) {
            return (
              (e = +e),
              (t |= 0),
              n || M(this, e, t, 2, 32767, -32768),
              u.TYPED_ARRAY_SUPPORT
                ? ((this[t] = e >>> 8), (this[t + 1] = 255 & e))
                : R(this, e, t, !1),
              t + 2
            );
          }),
          (u.prototype.writeInt32LE = function (e, t, n) {
            return (
              (e = +e),
              (t |= 0),
              n || M(this, e, t, 4, 2147483647, -2147483648),
              u.TYPED_ARRAY_SUPPORT
                ? ((this[t] = 255 & e),
                  (this[t + 1] = e >>> 8),
                  (this[t + 2] = e >>> 16),
                  (this[t + 3] = e >>> 24))
                : N(this, e, t, !0),
              t + 4
            );
          }),
          (u.prototype.writeInt32BE = function (e, t, n) {
            return (
              (e = +e),
              (t |= 0),
              n || M(this, e, t, 4, 2147483647, -2147483648),
              e < 0 && (e = 4294967295 + e + 1),
              u.TYPED_ARRAY_SUPPORT
                ? ((this[t] = e >>> 24),
                  (this[t + 1] = e >>> 16),
                  (this[t + 2] = e >>> 8),
                  (this[t + 3] = 255 & e))
                : N(this, e, t, !1),
              t + 4
            );
          }),
          (u.prototype.writeFloatLE = function (e, t, n) {
            return j(this, e, t, !0, n);
          }),
          (u.prototype.writeFloatBE = function (e, t, n) {
            return j(this, e, t, !1, n);
          }),
          (u.prototype.writeDoubleLE = function (e, t, n) {
            return F(this, e, t, !0, n);
          }),
          (u.prototype.writeDoubleBE = function (e, t, n) {
            return F(this, e, t, !1, n);
          }),
          (u.prototype.copy = function (e, t, n, r) {
            if (
              (n || (n = 0),
              r || 0 === r || (r = this.length),
              t >= e.length && (t = e.length),
              t || (t = 0),
              r > 0 && r < n && (r = n),
              r === n)
            )
              return 0;
            if (0 === e.length || 0 === this.length) return 0;
            if (t < 0) throw new RangeError('targetStart out of bounds');
            if (n < 0 || n >= this.length)
              throw new RangeError('sourceStart out of bounds');
            if (r < 0) throw new RangeError('sourceEnd out of bounds');
            r > this.length && (r = this.length),
              e.length - t < r - n && (r = e.length - t + n);
            var o,
              i = r - n;
            if (this === e && n < t && t < r)
              for (o = i - 1; o >= 0; --o) e[o + t] = this[o + n];
            else if (i < 1e3 || !u.TYPED_ARRAY_SUPPORT)
              for (o = 0; o < i; ++o) e[o + t] = this[o + n];
            else Uint8Array.prototype.set.call(e, this.subarray(n, n + i), t);
            return i;
          }),
          (u.prototype.fill = function (e, t, n, r) {
            if ('string' == typeof e) {
              if (
                ('string' == typeof t
                  ? ((r = t), (t = 0), (n = this.length))
                  : 'string' == typeof n && ((r = n), (n = this.length)),
                1 === e.length)
              ) {
                var o = e.charCodeAt(0);
                o < 256 && (e = o);
              }
              if (void 0 !== r && 'string' != typeof r)
                throw new TypeError('encoding must be a string');
              if ('string' == typeof r && !u.isEncoding(r))
                throw new TypeError('Unknown encoding: ' + r);
            } else 'number' == typeof e && (e &= 255);
            if (t < 0 || this.length < t || this.length < n)
              throw new RangeError('Out of range index');
            if (n <= t) return this;
            var i;
            if (
              ((t >>>= 0),
              (n = void 0 === n ? this.length : n >>> 0),
              e || (e = 0),
              'number' == typeof e)
            )
              for (i = t; i < n; ++i) this[i] = e;
            else {
              var s = u.isBuffer(e) ? e : B(new u(e, r).toString()),
                a = s.length;
              for (i = 0; i < n - t; ++i) this[i + t] = s[i % a];
            }
            return this;
          });
        var L = /[^+\/0-9A-Za-z-_]/g;
        function B(e, t) {
          var n;
          t = t || 1 / 0;
          for (var r = e.length, o = null, i = [], s = 0; s < r; ++s) {
            if ((n = e.charCodeAt(s)) > 55295 && n < 57344) {
              if (!o) {
                if (n > 56319) {
                  (t -= 3) > -1 && i.push(239, 191, 189);
                  continue;
                }
                if (s + 1 === r) {
                  (t -= 3) > -1 && i.push(239, 191, 189);
                  continue;
                }
                o = n;
                continue;
              }
              if (n < 56320) {
                (t -= 3) > -1 && i.push(239, 191, 189), (o = n);
                continue;
              }
              n = 65536 + (((o - 55296) << 10) | (n - 56320));
            } else o && (t -= 3) > -1 && i.push(239, 191, 189);
            if (((o = null), n < 128)) {
              if ((t -= 1) < 0) break;
              i.push(n);
            } else if (n < 2048) {
              if ((t -= 2) < 0) break;
              i.push((n >> 6) | 192, (63 & n) | 128);
            } else if (n < 65536) {
              if ((t -= 3) < 0) break;
              i.push((n >> 12) | 224, ((n >> 6) & 63) | 128, (63 & n) | 128);
            } else {
              if (!(n < 1114112)) throw new Error('Invalid code point');
              if ((t -= 4) < 0) break;
              i.push(
                (n >> 18) | 240,
                ((n >> 12) & 63) | 128,
                ((n >> 6) & 63) | 128,
                (63 & n) | 128
              );
            }
          }
          return i;
        }
        function V(e) {
          return r.toByteArray(
            (function (e) {
              if (
                (e = (function (e) {
                  return e.trim ? e.trim() : e.replace(/^\s+|\s+$/g, '');
                })(e).replace(L, '')).length < 2
              )
                return '';
              for (; e.length % 4 != 0; ) e += '=';
              return e;
            })(e)
          );
        }
        function q(e, t, n, r) {
          for (var o = 0; o < r && !(o + n >= t.length || o >= e.length); ++o)
            t[o + n] = e[o];
          return o;
        }
      },
      3421: (e, t) => {
        'use strict';
        (t.Q = function (e, t) {
          if ('string' != typeof e)
            throw new TypeError('argument str must be a string');
          for (
            var r = {}, o = t || {}, s = e.split(';'), a = o.decode || n, u = 0;
            u < s.length;
            u++
          ) {
            var c = s[u],
              l = c.indexOf('=');
            if (!(l < 0)) {
              var f = c.substring(0, l).trim();
              if (null == r[f]) {
                var h = c.substring(l + 1, c.length).trim();
                '"' === h[0] && (h = h.slice(1, -1)), (r[f] = i(h, a));
              }
            }
          }
          return r;
        }),
          (t.q = function (e, t, n) {
            var i = n || {},
              s = i.encode || r;
            if ('function' != typeof s)
              throw new TypeError('option encode is invalid');
            if (!o.test(e)) throw new TypeError('argument name is invalid');
            var a = s(t);
            if (a && !o.test(a)) throw new TypeError('argument val is invalid');
            var u = e + '=' + a;
            if (null != i.maxAge) {
              var c = i.maxAge - 0;
              if (isNaN(c) || !isFinite(c))
                throw new TypeError('option maxAge is invalid');
              u += '; Max-Age=' + Math.floor(c);
            }
            if (i.domain) {
              if (!o.test(i.domain))
                throw new TypeError('option domain is invalid');
              u += '; Domain=' + i.domain;
            }
            if (i.path) {
              if (!o.test(i.path))
                throw new TypeError('option path is invalid');
              u += '; Path=' + i.path;
            }
            if (i.expires) {
              if ('function' != typeof i.expires.toUTCString)
                throw new TypeError('option expires is invalid');
              u += '; Expires=' + i.expires.toUTCString();
            }
            if (
              (i.httpOnly && (u += '; HttpOnly'),
              i.secure && (u += '; Secure'),
              i.sameSite)
            )
              switch (
                'string' == typeof i.sameSite
                  ? i.sameSite.toLowerCase()
                  : i.sameSite
              ) {
                case !0:
                  u += '; SameSite=Strict';
                  break;
                case 'lax':
                  u += '; SameSite=Lax';
                  break;
                case 'strict':
                  u += '; SameSite=Strict';
                  break;
                case 'none':
                  u += '; SameSite=None';
                  break;
                default:
                  throw new TypeError('option sameSite is invalid');
              }
            return u;
          });
        var n = decodeURIComponent,
          r = encodeURIComponent,
          o = /^[\u0009\u0020-\u007e\u0080-\u00ff]+$/;
        function i(e, t) {
          try {
            return t(e);
          } catch (t) {
            return e;
          }
        }
      },
      7359: function (e, t, n) {
        var r;
        e.exports =
          ((r =
            r ||
            (function (e, t) {
              var r;
              if (
                ('undefined' != typeof window &&
                  window.crypto &&
                  (r = window.crypto),
                'undefined' != typeof self && self.crypto && (r = self.crypto),
                'undefined' != typeof globalThis &&
                  globalThis.crypto &&
                  (r = globalThis.crypto),
                !r &&
                  'undefined' != typeof window &&
                  window.msCrypto &&
                  (r = window.msCrypto),
                !r && void 0 !== n.g && n.g.crypto && (r = n.g.crypto),
                !r)
              )
                try {
                  r = n(633);
                } catch (e) {}
              var o = function () {
                  if (r) {
                    if ('function' == typeof r.getRandomValues)
                      try {
                        return r.getRandomValues(new Uint32Array(1))[0];
                      } catch (e) {}
                    if ('function' == typeof r.randomBytes)
                      try {
                        return r.randomBytes(4).readInt32LE();
                      } catch (e) {}
                  }
                  throw new Error(
                    'Native crypto module could not be used to get secure random number.'
                  );
                },
                i =
                  Object.create ||
                  (function () {
                    function e() {}
                    return function (t) {
                      var n;
                      return (
                        (e.prototype = t),
                        (n = new e()),
                        (e.prototype = null),
                        n
                      );
                    };
                  })(),
                s = {},
                a = (s.lib = {}),
                u = (a.Base = {
                  extend: function (e) {
                    var t = i(this);
                    return (
                      e && t.mixIn(e),
                      (t.hasOwnProperty('init') && this.init !== t.init) ||
                        (t.init = function () {
                          t.$super.init.apply(this, arguments);
                        }),
                      (t.init.prototype = t),
                      (t.$super = this),
                      t
                    );
                  },
                  create: function () {
                    var e = this.extend();
                    return e.init.apply(e, arguments), e;
                  },
                  init: function () {},
                  mixIn: function (e) {
                    for (var t in e) e.hasOwnProperty(t) && (this[t] = e[t]);
                    e.hasOwnProperty('toString') &&
                      (this.toString = e.toString);
                  },
                  clone: function () {
                    return this.init.prototype.extend(this);
                  },
                }),
                c = (a.WordArray = u.extend({
                  init: function (e, t) {
                    (e = this.words = e || []),
                      (this.sigBytes = null != t ? t : 4 * e.length);
                  },
                  toString: function (e) {
                    return (e || f).stringify(this);
                  },
                  concat: function (e) {
                    var t = this.words,
                      n = e.words,
                      r = this.sigBytes,
                      o = e.sigBytes;
                    if ((this.clamp(), r % 4))
                      for (var i = 0; i < o; i++) {
                        var s = (n[i >>> 2] >>> (24 - (i % 4) * 8)) & 255;
                        t[(r + i) >>> 2] |= s << (24 - ((r + i) % 4) * 8);
                      }
                    else
                      for (var a = 0; a < o; a += 4)
                        t[(r + a) >>> 2] = n[a >>> 2];
                    return (this.sigBytes += o), this;
                  },
                  clamp: function () {
                    var t = this.words,
                      n = this.sigBytes;
                    (t[n >>> 2] &= 4294967295 << (32 - (n % 4) * 8)),
                      (t.length = e.ceil(n / 4));
                  },
                  clone: function () {
                    var e = u.clone.call(this);
                    return (e.words = this.words.slice(0)), e;
                  },
                  random: function (e) {
                    for (var t = [], n = 0; n < e; n += 4) t.push(o());
                    return new c.init(t, e);
                  },
                })),
                l = (s.enc = {}),
                f = (l.Hex = {
                  stringify: function (e) {
                    for (
                      var t = e.words, n = e.sigBytes, r = [], o = 0;
                      o < n;
                      o++
                    ) {
                      var i = (t[o >>> 2] >>> (24 - (o % 4) * 8)) & 255;
                      r.push((i >>> 4).toString(16)),
                        r.push((15 & i).toString(16));
                    }
                    return r.join('');
                  },
                  parse: function (e) {
                    for (var t = e.length, n = [], r = 0; r < t; r += 2)
                      n[r >>> 3] |=
                        parseInt(e.substr(r, 2), 16) << (24 - (r % 8) * 4);
                    return new c.init(n, t / 2);
                  },
                }),
                h = (l.Latin1 = {
                  stringify: function (e) {
                    for (
                      var t = e.words, n = e.sigBytes, r = [], o = 0;
                      o < n;
                      o++
                    ) {
                      var i = (t[o >>> 2] >>> (24 - (o % 4) * 8)) & 255;
                      r.push(String.fromCharCode(i));
                    }
                    return r.join('');
                  },
                  parse: function (e) {
                    for (var t = e.length, n = [], r = 0; r < t; r++)
                      n[r >>> 2] |=
                        (255 & e.charCodeAt(r)) << (24 - (r % 4) * 8);
                    return new c.init(n, t);
                  },
                }),
                d = (l.Utf8 = {
                  stringify: function (e) {
                    try {
                      return decodeURIComponent(escape(h.stringify(e)));
                    } catch (e) {
                      throw new Error('Malformed UTF-8 data');
                    }
                  },
                  parse: function (e) {
                    return h.parse(unescape(encodeURIComponent(e)));
                  },
                }),
                p = (a.BufferedBlockAlgorithm = u.extend({
                  reset: function () {
                    (this._data = new c.init()), (this._nDataBytes = 0);
                  },
                  _append: function (e) {
                    'string' == typeof e && (e = d.parse(e)),
                      this._data.concat(e),
                      (this._nDataBytes += e.sigBytes);
                  },
                  _process: function (t) {
                    var n,
                      r = this._data,
                      o = r.words,
                      i = r.sigBytes,
                      s = this.blockSize,
                      a = i / (4 * s),
                      u =
                        (a = t
                          ? e.ceil(a)
                          : e.max((0 | a) - this._minBufferSize, 0)) * s,
                      l = e.min(4 * u, i);
                    if (u) {
                      for (var f = 0; f < u; f += s) this._doProcessBlock(o, f);
                      (n = o.splice(0, u)), (r.sigBytes -= l);
                    }
                    return new c.init(n, l);
                  },
                  clone: function () {
                    var e = u.clone.call(this);
                    return (e._data = this._data.clone()), e;
                  },
                  _minBufferSize: 0,
                })),
                g =
                  ((a.Hasher = p.extend({
                    cfg: u.extend(),
                    init: function (e) {
                      (this.cfg = this.cfg.extend(e)), this.reset();
                    },
                    reset: function () {
                      p.reset.call(this), this._doReset();
                    },
                    update: function (e) {
                      return this._append(e), this._process(), this;
                    },
                    finalize: function (e) {
                      return e && this._append(e), this._doFinalize();
                    },
                    blockSize: 16,
                    _createHelper: function (e) {
                      return function (t, n) {
                        return new e.init(n).finalize(t);
                      };
                    },
                    _createHmacHelper: function (e) {
                      return function (t, n) {
                        return new g.HMAC.init(e, n).finalize(t);
                      };
                    },
                  })),
                  (s.algo = {}));
              return s;
            })(Math)),
          r);
      },
      8139: function (e, t, n) {
        var r, o, i;
        e.exports =
          ((r = n(7359)),
          (i = (o = r).lib.WordArray),
          (o.enc.Base64 = {
            stringify: function (e) {
              var t = e.words,
                n = e.sigBytes,
                r = this._map;
              e.clamp();
              for (var o = [], i = 0; i < n; i += 3)
                for (
                  var s =
                      (((t[i >>> 2] >>> (24 - (i % 4) * 8)) & 255) << 16) |
                      (((t[(i + 1) >>> 2] >>> (24 - ((i + 1) % 4) * 8)) &
                        255) <<
                        8) |
                      ((t[(i + 2) >>> 2] >>> (24 - ((i + 2) % 4) * 8)) & 255),
                    a = 0;
                  a < 4 && i + 0.75 * a < n;
                  a++
                )
                  o.push(r.charAt((s >>> (6 * (3 - a))) & 63));
              var u = r.charAt(64);
              if (u) for (; o.length % 4; ) o.push(u);
              return o.join('');
            },
            parse: function (e) {
              var t = e.length,
                n = this._map,
                r = this._reverseMap;
              if (!r) {
                r = this._reverseMap = [];
                for (var o = 0; o < n.length; o++) r[n.charCodeAt(o)] = o;
              }
              var s = n.charAt(64);
              if (s) {
                var a = e.indexOf(s);
                -1 !== a && (t = a);
              }
              return (function (e, t, n) {
                for (var r = [], o = 0, s = 0; s < t; s++)
                  if (s % 4) {
                    var a =
                      (n[e.charCodeAt(s - 1)] << ((s % 4) * 2)) |
                      (n[e.charCodeAt(s)] >>> (6 - (s % 4) * 2));
                    (r[o >>> 2] |= a << (24 - (o % 4) * 8)), o++;
                  }
                return i.create(r, o);
              })(e, t, r);
            },
            _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=',
          }),
          r.enc.Base64);
      },
      6061: function (e, t, n) {
        var r;
        e.exports = ((r = n(7359)), n(1093), n(6423), r.HmacSHA256);
      },
      6423: function (e, t, n) {
        var r, o, i;
        e.exports =
          ((o = (r = n(7359)).lib.Base),
          (i = r.enc.Utf8),
          void (r.algo.HMAC = o.extend({
            init: function (e, t) {
              (e = this._hasher = new e.init()),
                'string' == typeof t && (t = i.parse(t));
              var n = e.blockSize,
                r = 4 * n;
              t.sigBytes > r && (t = e.finalize(t)), t.clamp();
              for (
                var o = (this._oKey = t.clone()),
                  s = (this._iKey = t.clone()),
                  a = o.words,
                  u = s.words,
                  c = 0;
                c < n;
                c++
              )
                (a[c] ^= 1549556828), (u[c] ^= 909522486);
              (o.sigBytes = s.sigBytes = r), this.reset();
            },
            reset: function () {
              var e = this._hasher;
              e.reset(), e.update(this._iKey);
            },
            update: function (e) {
              return this._hasher.update(e), this;
            },
            finalize: function (e) {
              var t = this._hasher,
                n = t.finalize(e);
              return t.reset(), t.finalize(this._oKey.clone().concat(n));
            },
          })));
      },
      1816: function (e, t, n) {
        var r;
        e.exports =
          ((r = n(7359)),
          (function () {
            if ('function' == typeof ArrayBuffer) {
              var e = r.lib.WordArray,
                t = e.init,
                n = (e.init = function (e) {
                  if (
                    (e instanceof ArrayBuffer && (e = new Uint8Array(e)),
                    (e instanceof Int8Array ||
                      ('undefined' != typeof Uint8ClampedArray &&
                        e instanceof Uint8ClampedArray) ||
                      e instanceof Int16Array ||
                      e instanceof Uint16Array ||
                      e instanceof Int32Array ||
                      e instanceof Uint32Array ||
                      e instanceof Float32Array ||
                      e instanceof Float64Array) &&
                      (e = new Uint8Array(
                        e.buffer,
                        e.byteOffset,
                        e.byteLength
                      )),
                    e instanceof Uint8Array)
                  ) {
                    for (var n = e.byteLength, r = [], o = 0; o < n; o++)
                      r[o >>> 2] |= e[o] << (24 - (o % 4) * 8);
                    t.call(this, r, n);
                  } else t.apply(this, arguments);
                });
              n.prototype = e;
            }
          })(),
          r.lib.WordArray);
      },
      1093: function (e, t, n) {
        var r;
        e.exports =
          ((r = n(7359)),
          (function (e) {
            var t = r,
              n = t.lib,
              o = n.WordArray,
              i = n.Hasher,
              s = t.algo,
              a = [],
              u = [];
            !(function () {
              function t(t) {
                for (var n = e.sqrt(t), r = 2; r <= n; r++)
                  if (!(t % r)) return !1;
                return !0;
              }
              function n(e) {
                return (4294967296 * (e - (0 | e))) | 0;
              }
              for (var r = 2, o = 0; o < 64; )
                t(r) &&
                  (o < 8 && (a[o] = n(e.pow(r, 0.5))),
                  (u[o] = n(e.pow(r, 1 / 3))),
                  o++),
                  r++;
            })();
            var c = [],
              l = (s.SHA256 = i.extend({
                _doReset: function () {
                  this._hash = new o.init(a.slice(0));
                },
                _doProcessBlock: function (e, t) {
                  for (
                    var n = this._hash.words,
                      r = n[0],
                      o = n[1],
                      i = n[2],
                      s = n[3],
                      a = n[4],
                      l = n[5],
                      f = n[6],
                      h = n[7],
                      d = 0;
                    d < 64;
                    d++
                  ) {
                    if (d < 16) c[d] = 0 | e[t + d];
                    else {
                      var p = c[d - 15],
                        g =
                          ((p << 25) | (p >>> 7)) ^
                          ((p << 14) | (p >>> 18)) ^
                          (p >>> 3),
                        v = c[d - 2],
                        y =
                          ((v << 15) | (v >>> 17)) ^
                          ((v << 13) | (v >>> 19)) ^
                          (v >>> 10);
                      c[d] = g + c[d - 7] + y + c[d - 16];
                    }
                    var m = (r & o) ^ (r & i) ^ (o & i),
                      b =
                        ((r << 30) | (r >>> 2)) ^
                        ((r << 19) | (r >>> 13)) ^
                        ((r << 10) | (r >>> 22)),
                      w =
                        h +
                        (((a << 26) | (a >>> 6)) ^
                          ((a << 21) | (a >>> 11)) ^
                          ((a << 7) | (a >>> 25))) +
                        ((a & l) ^ (~a & f)) +
                        u[d] +
                        c[d];
                    (h = f),
                      (f = l),
                      (l = a),
                      (a = (s + w) | 0),
                      (s = i),
                      (i = o),
                      (o = r),
                      (r = (w + (b + m)) | 0);
                  }
                  (n[0] = (n[0] + r) | 0),
                    (n[1] = (n[1] + o) | 0),
                    (n[2] = (n[2] + i) | 0),
                    (n[3] = (n[3] + s) | 0),
                    (n[4] = (n[4] + a) | 0),
                    (n[5] = (n[5] + l) | 0),
                    (n[6] = (n[6] + f) | 0),
                    (n[7] = (n[7] + h) | 0);
                },
                _doFinalize: function () {
                  var t = this._data,
                    n = t.words,
                    r = 8 * this._nDataBytes,
                    o = 8 * t.sigBytes;
                  return (
                    (n[o >>> 5] |= 128 << (24 - (o % 32))),
                    (n[14 + (((o + 64) >>> 9) << 4)] = e.floor(r / 4294967296)),
                    (n[15 + (((o + 64) >>> 9) << 4)] = r),
                    (t.sigBytes = 4 * n.length),
                    this._process(),
                    this._hash
                  );
                },
                clone: function () {
                  var e = i.clone.call(this);
                  return (e._hash = this._hash.clone()), e;
                },
              }));
            (t.SHA256 = i._createHelper(l)),
              (t.HmacSHA256 = i._createHmacHelper(l));
          })(Math),
          r.SHA256);
      },
      8130: (e, t, n) => {
        'use strict';
        const r = n(4056).buildOptions,
          o = {
            attributeNamePrefix: '@_',
            attrNodeName: !1,
            textNodeName: '#text',
            ignoreAttributes: !0,
            cdataTagName: !1,
            cdataPositionChar: '\\c',
            format: !1,
            indentBy: '  ',
            supressEmptyNode: !1,
            tagValueProcessor: function (e) {
              return e;
            },
            attrValueProcessor: function (e) {
              return e;
            },
          },
          i = [
            'attributeNamePrefix',
            'attrNodeName',
            'textNodeName',
            'ignoreAttributes',
            'cdataTagName',
            'cdataPositionChar',
            'format',
            'indentBy',
            'supressEmptyNode',
            'tagValueProcessor',
            'attrValueProcessor',
            'rootNodeName',
          ];
        function s(e) {
          (this.options = r(e, o, i)),
            this.options.ignoreAttributes || this.options.attrNodeName
              ? (this.isAttribute = function () {
                  return !1;
                })
              : ((this.attrPrefixLen = this.options.attributeNamePrefix.length),
                (this.isAttribute = g)),
            this.options.cdataTagName
              ? (this.isCDATA = v)
              : (this.isCDATA = function () {
                  return !1;
                }),
            (this.replaceCDATAstr = u),
            (this.replaceCDATAarr = c),
            (this.processTextOrObjNode = a),
            this.options.format
              ? ((this.indentate = p),
                (this.tagEndChar = '>\n'),
                (this.newLine = '\n'))
              : ((this.indentate = function () {
                  return '';
                }),
                (this.tagEndChar = '>'),
                (this.newLine = '')),
            this.options.supressEmptyNode
              ? ((this.buildTextNode = d), (this.buildObjNode = f))
              : ((this.buildTextNode = h), (this.buildObjNode = l)),
            (this.buildTextValNode = h),
            (this.buildObjectNode = l);
        }
        function a(e, t, n) {
          const r = this.j2x(e, n + 1);
          return void 0 !== e[this.options.textNodeName] &&
            1 === Object.keys(e).length
            ? this.buildTextNode(r.val, t, r.attrStr, n)
            : this.buildObjNode(r.val, t, r.attrStr, n);
        }
        function u(e, t) {
          return (
            (e = this.options.tagValueProcessor('' + e)),
            '' === this.options.cdataPositionChar || '' === e
              ? e + '<![CDATA[' + t + ']]' + this.tagEndChar
              : e.replace(
                  this.options.cdataPositionChar,
                  '<![CDATA[' + t + ']]' + this.tagEndChar
                )
          );
        }
        function c(e, t) {
          if (
            ((e = this.options.tagValueProcessor('' + e)),
            '' === this.options.cdataPositionChar || '' === e)
          )
            return (
              e + '<![CDATA[' + t.join(']]><![CDATA[') + ']]' + this.tagEndChar
            );
          for (let n in t)
            e = e.replace(
              this.options.cdataPositionChar,
              '<![CDATA[' + t[n] + ']]>'
            );
          return e + this.newLine;
        }
        function l(e, t, n, r) {
          return n && -1 === e.indexOf('<')
            ? this.indentate(r) +
                '<' +
                t +
                n +
                '>' +
                e +
                '</' +
                t +
                this.tagEndChar
            : this.indentate(r) +
                '<' +
                t +
                n +
                this.tagEndChar +
                e +
                this.indentate(r) +
                '</' +
                t +
                this.tagEndChar;
        }
        function f(e, t, n, r) {
          return '' !== e
            ? this.buildObjectNode(e, t, n, r)
            : this.indentate(r) + '<' + t + n + '/' + this.tagEndChar;
        }
        function h(e, t, n, r) {
          return (
            this.indentate(r) +
            '<' +
            t +
            n +
            '>' +
            this.options.tagValueProcessor(e) +
            '</' +
            t +
            this.tagEndChar
          );
        }
        function d(e, t, n, r) {
          return '' !== e
            ? this.buildTextValNode(e, t, n, r)
            : this.indentate(r) + '<' + t + n + '/' + this.tagEndChar;
        }
        function p(e) {
          return this.options.indentBy.repeat(e);
        }
        function g(e) {
          return (
            !!e.startsWith(this.options.attributeNamePrefix) &&
            e.substr(this.attrPrefixLen)
          );
        }
        function v(e) {
          return e === this.options.cdataTagName;
        }
        (s.prototype.parse = function (e) {
          return (
            Array.isArray(e) &&
              this.options.rootNodeName &&
              this.options.rootNodeName.length > 1 &&
              (e = { [this.options.rootNodeName]: e }),
            this.j2x(e, 0).val
          );
        }),
          (s.prototype.j2x = function (e, t) {
            let n = '',
              r = '';
            for (let o in e)
              if (void 0 === e[o]);
              else if (null === e[o])
                r += this.indentate(t) + '<' + o + '/' + this.tagEndChar;
              else if (e[o] instanceof Date)
                r += this.buildTextNode(e[o], o, '', t);
              else if ('object' != typeof e[o]) {
                const i = this.isAttribute(o);
                i
                  ? (n +=
                      ' ' +
                      i +
                      '="' +
                      this.options.attrValueProcessor('' + e[o]) +
                      '"')
                  : this.isCDATA(o)
                  ? e[this.options.textNodeName]
                    ? (r += this.replaceCDATAstr(
                        e[this.options.textNodeName],
                        e[o]
                      ))
                    : (r += this.replaceCDATAstr('', e[o]))
                  : o === this.options.textNodeName
                  ? e[this.options.cdataTagName] ||
                    (r += this.options.tagValueProcessor('' + e[o]))
                  : (r += this.buildTextNode(e[o], o, '', t));
              } else if (Array.isArray(e[o]))
                if (this.isCDATA(o))
                  (r += this.indentate(t)),
                    e[this.options.textNodeName]
                      ? (r += this.replaceCDATAarr(
                          e[this.options.textNodeName],
                          e[o]
                        ))
                      : (r += this.replaceCDATAarr('', e[o]));
                else {
                  const n = e[o].length;
                  for (let i = 0; i < n; i++) {
                    const n = e[o][i];
                    void 0 === n ||
                      (r +=
                        null === n
                          ? this.indentate(t) + '<' + o + '/' + this.tagEndChar
                          : 'object' == typeof n
                          ? this.processTextOrObjNode(n, o, t)
                          : this.buildTextNode(n, o, '', t));
                  }
                }
              else if (
                this.options.attrNodeName &&
                o === this.options.attrNodeName
              ) {
                const t = Object.keys(e[o]),
                  r = t.length;
                for (let i = 0; i < r; i++)
                  n +=
                    ' ' +
                    t[i] +
                    '="' +
                    this.options.attrValueProcessor('' + e[o][t[i]]) +
                    '"';
              } else r += this.processTextOrObjNode(e[o], o, t);
            return { attrStr: n, val: r };
          }),
          (e.exports = s);
      },
      3387: (e, t, n) => {
        'use strict';
        const r = function (e) {
            return String.fromCharCode(e);
          },
          o = {
            nilChar: r(176),
            missingChar: r(201),
            nilPremitive: r(175),
            missingPremitive: r(200),
            emptyChar: r(178),
            emptyValue: r(177),
            boundryChar: r(179),
            objStart: r(198),
            arrStart: r(204),
            arrayEnd: r(185),
          },
          i = [
            o.nilChar,
            o.nilPremitive,
            o.missingChar,
            o.missingPremitive,
            o.boundryChar,
            o.emptyChar,
            o.emptyValue,
            o.arrayEnd,
            o.objStart,
            o.arrStart,
          ],
          s = function (e, t, n) {
            if ('string' == typeof t)
              return e && e[0] && void 0 !== e[0].val
                ? a(e[0].val, t)
                : a(e, t);
            {
              const i =
                void 0 === (r = e)
                  ? o.missingChar
                  : null === r
                  ? o.nilChar
                  : !(
                      r.child &&
                      0 === Object.keys(r.child).length &&
                      (!r.attrsMap || 0 === Object.keys(r.attrsMap).length)
                    ) || o.emptyChar;
              if (!0 === i) {
                let r = '';
                if (Array.isArray(t)) {
                  r += o.arrStart;
                  const i = t[0],
                    c = e.length;
                  if ('string' == typeof i)
                    for (let t = 0; t < c; t++) {
                      const n = a(e[t].val, i);
                      r = u(r, n);
                    }
                  else
                    for (let t = 0; t < c; t++) {
                      const o = s(e[t], i, n);
                      r = u(r, o);
                    }
                  r += o.arrayEnd;
                } else {
                  r += o.objStart;
                  const i = Object.keys(t);
                  Array.isArray(e) && (e = e[0]);
                  for (let o in i) {
                    const a = i[o];
                    let c;
                    (c =
                      !n.ignoreAttributes && e.attrsMap && e.attrsMap[a]
                        ? s(e.attrsMap[a], t[a], n)
                        : a === n.textNodeName
                        ? s(e.val, t[a], n)
                        : s(e.child[a], t[a], n)),
                      (r = u(r, c));
                  }
                }
                return r;
              }
              return i;
            }
            var r;
          },
          a = function (e) {
            switch (e) {
              case void 0:
                return o.missingPremitive;
              case null:
                return o.nilPremitive;
              case '':
                return o.emptyValue;
              default:
                return e;
            }
          },
          u = function (e, t) {
            return c(t[0]) || c(e[e.length - 1]) || (e += o.boundryChar), e + t;
          },
          c = function (e) {
            return -1 !== i.indexOf(e);
          },
          l = n(7763),
          f = n(4056).buildOptions;
        t.convert2nimn = function (e, t, n) {
          return (n = f(n, l.defaultOptions, l.props)), s(e, t, n);
        };
      },
      8646: (e, t, n) => {
        'use strict';
        const r = n(4056),
          o = function (e, t, n) {
            const i = {};
            if (
              !t.alwaysCreateTextNode &&
              (!e.child || r.isEmptyObject(e.child)) &&
              (!e.attrsMap || r.isEmptyObject(e.attrsMap))
            )
              return r.isExist(e.val) ? e.val : '';
            if (
              r.isExist(e.val) &&
              ('string' != typeof e.val ||
                ('' !== e.val && e.val !== t.cdataPositionChar))
            ) {
              const o = r.isTagNameInArrayMode(e.tagname, t.arrayMode, n);
              i[t.textNodeName] = o ? [e.val] : e.val;
            }
            r.merge(i, e.attrsMap, t.arrayMode);
            const s = Object.keys(e.child);
            for (let a = 0; a < s.length; a++) {
              const u = s[a];
              if (e.child[u] && e.child[u].length > 1) {
                i[u] = [];
                for (let n in e.child[u])
                  e.child[u].hasOwnProperty(n) &&
                    i[u].push(o(e.child[u][n], t, u));
              } else {
                const s = o(e.child[u][0], t, u),
                  a =
                    (!0 === t.arrayMode && 'object' == typeof s) ||
                    r.isTagNameInArrayMode(u, t.arrayMode, n);
                i[u] = a ? [s] : s;
              }
            }
            return i;
          };
        t.convertToJson = o;
      },
      3255: (e, t, n) => {
        'use strict';
        const r = n(4056),
          o = n(4056).buildOptions,
          i = n(7763),
          s = function (e, t, n) {
            let o = '{';
            const i = Object.keys(e.child);
            for (let n = 0; n < i.length; n++) {
              const r = i[n];
              if (e.child[r] && e.child[r].length > 1) {
                o += '"' + r + '" : [ ';
                for (let n in e.child[r]) o += s(e.child[r][n], t) + ' , ';
                o = o.substr(0, o.length - 1) + ' ] ';
              } else o += '"' + r + '" : ' + s(e.child[r][0], t) + ' ,';
            }
            return (
              r.merge(o, e.attrsMap),
              r.isEmptyObject(o)
                ? r.isExist(e.val)
                  ? e.val
                  : ''
                : (r.isExist(e.val) &&
                    ('string' != typeof e.val ||
                      ('' !== e.val && e.val !== t.cdataPositionChar)) &&
                    (o +=
                      '"' +
                      t.textNodeName +
                      '" : ' +
                      (!0 !== (a = e.val) && !1 !== a && isNaN(a)
                        ? '"' + a + '"'
                        : a)),
                  ',' === o[o.length - 1] && (o = o.substr(0, o.length - 2)),
                  o + '}')
            );
            var a;
          };
        t.convertToJsonString = function (e, t) {
          return (
            ((t = o(t, i.defaultOptions, i.props)).indentBy = t.indentBy || ''),
            s(e, t, 0)
          );
        };
      },
      5739: (e, t, n) => {
        'use strict';
        const r = n(8646),
          o = n(7763),
          i = n(7763),
          s = n(4056).buildOptions,
          a = n(3325);
        (t.parse = function (e, t = {}, n) {
          if (n) {
            !0 === n && (n = {});
            const t = a.validate(e, n);
            if (!0 !== t) throw Error(t.err.msg);
          }
          t.parseTrueNumberOnly &&
            !1 !== t.parseNodeValue &&
            !t.numParseOptions &&
            (t.numParseOptions = { leadingZeros: !1 });
          let u = s(t, i.defaultOptions, i.props);
          const c = o.getTraversalObj(e, u);
          return r.convertToJson(c, u);
        }),
          (t.convertTonimn = n(3387).convert2nimn),
          (t.getTraversalObj = o.getTraversalObj),
          (t.convertToJson = r.convertToJson),
          (t.convertToJsonString = n(3255).convertToJsonString),
          (t.validate = a.validate),
          (t.j2xParser = n(8130)),
          (t.parseToNimn = function (e, n, r) {
            return t.convertTonimn(t.getTraversalObj(e, r), n, r);
          });
      },
      4056: (e, t) => {
        'use strict';
        const n =
            '[:A-Za-z_\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Za-z_\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.\\d\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*',
          r = new RegExp('^' + n + '$');
        (t.isExist = function (e) {
          return void 0 !== e;
        }),
          (t.isEmptyObject = function (e) {
            return 0 === Object.keys(e).length;
          }),
          (t.merge = function (e, t, n) {
            if (t) {
              const r = Object.keys(t),
                o = r.length;
              for (let i = 0; i < o; i++)
                e[r[i]] = 'strict' === n ? [t[r[i]]] : t[r[i]];
            }
          }),
          (t.getValue = function (e) {
            return t.isExist(e) ? e : '';
          }),
          (t.buildOptions = function (e, t, n) {
            let r = {};
            if (!e) return t;
            for (let o = 0; o < n.length; o++)
              void 0 !== e[n[o]] ? (r[n[o]] = e[n[o]]) : (r[n[o]] = t[n[o]]);
            return r;
          }),
          (t.isTagNameInArrayMode = function (e, t, n) {
            return (
              !1 !== t &&
              (t instanceof RegExp
                ? t.test(e)
                : 'function' == typeof t
                ? !!t(e, n)
                : 'strict' === t)
            );
          }),
          (t.isName = function (e) {
            return !(null == r.exec(e));
          }),
          (t.getAllMatches = function (e, t) {
            const n = [];
            let r = t.exec(e);
            for (; r; ) {
              const o = [];
              o.startIndex = t.lastIndex - r[0].length;
              const i = r.length;
              for (let e = 0; e < i; e++) o.push(r[e]);
              n.push(o), (r = t.exec(e));
            }
            return n;
          }),
          (t.nameRegexp = n);
      },
      3325: (e, t, n) => {
        'use strict';
        const r = n(4056),
          o = { allowBooleanAttributes: !1 },
          i = ['allowBooleanAttributes'];
        function s(e, t) {
          const n = t;
          for (; t < e.length; t++)
            if ('?' != e[t] && ' ' != e[t]);
            else {
              const r = e.substr(n, t - n);
              if (t > 5 && 'xml' === r)
                return h(
                  'InvalidXml',
                  'XML declaration allowed only at the start of the document.',
                  p(e, t)
                );
              if ('?' == e[t] && '>' == e[t + 1]) {
                t++;
                break;
              }
            }
          return t;
        }
        function a(e, t) {
          if (e.length > t + 5 && '-' === e[t + 1] && '-' === e[t + 2]) {
            for (t += 3; t < e.length; t++)
              if ('-' === e[t] && '-' === e[t + 1] && '>' === e[t + 2]) {
                t += 2;
                break;
              }
          } else if (
            e.length > t + 8 &&
            'D' === e[t + 1] &&
            'O' === e[t + 2] &&
            'C' === e[t + 3] &&
            'T' === e[t + 4] &&
            'Y' === e[t + 5] &&
            'P' === e[t + 6] &&
            'E' === e[t + 7]
          ) {
            let n = 1;
            for (t += 8; t < e.length; t++)
              if ('<' === e[t]) n++;
              else if ('>' === e[t] && (n--, 0 === n)) break;
          } else if (
            e.length > t + 9 &&
            '[' === e[t + 1] &&
            'C' === e[t + 2] &&
            'D' === e[t + 3] &&
            'A' === e[t + 4] &&
            'T' === e[t + 5] &&
            'A' === e[t + 6] &&
            '[' === e[t + 7]
          )
            for (t += 8; t < e.length; t++)
              if (']' === e[t] && ']' === e[t + 1] && '>' === e[t + 2]) {
                t += 2;
                break;
              }
          return t;
        }
        function u(e, t) {
          let n = '',
            r = '',
            o = !1;
          for (; t < e.length; t++) {
            if ('"' === e[t] || "'" === e[t])
              '' === r ? (r = e[t]) : r !== e[t] || (r = '');
            else if ('>' === e[t] && '' === r) {
              o = !0;
              break;
            }
            n += e[t];
          }
          return '' === r && { value: n, index: t, tagClosed: o };
        }
        t.validate = function (e, t) {
          t = r.buildOptions(t, o, i);
          const n = [];
          let c = !1,
            d = !1;
          '\ufeff' === e[0] && (e = e.substr(1));
          for (let o = 0; o < e.length; o++)
            if ('<' === e[o] && '?' === e[o + 1]) {
              if (((o += 2), (o = s(e, o)), o.err)) return o;
            } else {
              if ('<' !== e[o]) {
                if (
                  ' ' === e[o] ||
                  '\t' === e[o] ||
                  '\n' === e[o] ||
                  '\r' === e[o]
                )
                  continue;
                return h(
                  'InvalidChar',
                  "char '" + e[o] + "' is not expected.",
                  p(e, o)
                );
              }
              {
                let i = o;
                if ((o++, '!' === e[o])) {
                  o = a(e, o);
                  continue;
                }
                {
                  let v = !1;
                  '/' === e[o] && ((v = !0), o++);
                  let y = '';
                  for (
                    ;
                    o < e.length &&
                    '>' !== e[o] &&
                    ' ' !== e[o] &&
                    '\t' !== e[o] &&
                    '\n' !== e[o] &&
                    '\r' !== e[o];
                    o++
                  )
                    y += e[o];
                  if (
                    ((y = y.trim()),
                    '/' === y[y.length - 1] &&
                      ((y = y.substring(0, y.length - 1)), o--),
                    (g = y),
                    !r.isName(g))
                  ) {
                    let t;
                    return (
                      (t =
                        0 === y.trim().length
                          ? "Invalid space after '<'."
                          : "Tag '" + y + "' is an invalid name."),
                      h('InvalidTag', t, p(e, o))
                    );
                  }
                  const m = u(e, o);
                  if (!1 === m)
                    return h(
                      'InvalidAttr',
                      "Attributes for '" + y + "' have open quote.",
                      p(e, o)
                    );
                  let b = m.value;
                  if (((o = m.index), '/' === b[b.length - 1])) {
                    const n = o - b.length;
                    b = b.substring(0, b.length - 1);
                    const r = l(b, t);
                    if (!0 !== r)
                      return h(r.err.code, r.err.msg, p(e, n + r.err.line));
                    c = !0;
                  } else if (v) {
                    if (!m.tagClosed)
                      return h(
                        'InvalidTag',
                        "Closing tag '" + y + "' doesn't have proper closing.",
                        p(e, o)
                      );
                    if (b.trim().length > 0)
                      return h(
                        'InvalidTag',
                        "Closing tag '" +
                          y +
                          "' can't have attributes or invalid starting.",
                        p(e, i)
                      );
                    {
                      const t = n.pop();
                      if (y !== t.tagName) {
                        let n = p(e, t.tagStartPos);
                        return h(
                          'InvalidTag',
                          "Expected closing tag '" +
                            t.tagName +
                            "' (opened in line " +
                            n.line +
                            ', col ' +
                            n.col +
                            ") instead of closing tag '" +
                            y +
                            "'.",
                          p(e, i)
                        );
                      }
                      0 == n.length && (d = !0);
                    }
                  } else {
                    const r = l(b, t);
                    if (!0 !== r)
                      return h(
                        r.err.code,
                        r.err.msg,
                        p(e, o - b.length + r.err.line)
                      );
                    if (!0 === d)
                      return h(
                        'InvalidXml',
                        'Multiple possible root nodes found.',
                        p(e, o)
                      );
                    n.push({ tagName: y, tagStartPos: i }), (c = !0);
                  }
                  for (o++; o < e.length; o++)
                    if ('<' === e[o]) {
                      if ('!' === e[o + 1]) {
                        o++, (o = a(e, o));
                        continue;
                      }
                      if ('?' !== e[o + 1]) break;
                      if (((o = s(e, ++o)), o.err)) return o;
                    } else if ('&' === e[o]) {
                      const t = f(e, o);
                      if (-1 == t)
                        return h(
                          'InvalidChar',
                          "char '&' is not expected.",
                          p(e, o)
                        );
                      o = t;
                    }
                  '<' === e[o] && o--;
                }
              }
            }
          var g;
          return c
            ? 1 == n.length
              ? h(
                  'InvalidTag',
                  "Unclosed tag '" + n[0].tagName + "'.",
                  p(e, n[0].tagStartPos)
                )
              : !(n.length > 0) ||
                h(
                  'InvalidXml',
                  "Invalid '" +
                    JSON.stringify(
                      n.map((e) => e.tagName),
                      null,
                      4
                    ).replace(/\r?\n/g, '') +
                    "' found.",
                  { line: 1, col: 1 }
                )
            : h('InvalidXml', 'Start tag expected.', 1);
        };
        const c = new RegExp(
          '(\\s*)([^\\s=]+)(\\s*=)?(\\s*([\'"])(([\\s\\S])*?)\\5)?',
          'g'
        );
        function l(e, t) {
          const n = r.getAllMatches(e, c),
            o = {};
          for (let e = 0; e < n.length; e++) {
            if (0 === n[e][1].length)
              return h(
                'InvalidAttr',
                "Attribute '" + n[e][2] + "' has no space in starting.",
                g(n[e])
              );
            if (void 0 === n[e][3] && !t.allowBooleanAttributes)
              return h(
                'InvalidAttr',
                "boolean attribute '" + n[e][2] + "' is not allowed.",
                g(n[e])
              );
            const r = n[e][2];
            if (!d(r))
              return h(
                'InvalidAttr',
                "Attribute '" + r + "' is an invalid name.",
                g(n[e])
              );
            if (o.hasOwnProperty(r))
              return h(
                'InvalidAttr',
                "Attribute '" + r + "' is repeated.",
                g(n[e])
              );
            o[r] = 1;
          }
          return !0;
        }
        function f(e, t) {
          if (';' === e[++t]) return -1;
          if ('#' === e[t])
            return (function (e, t) {
              let n = /\d/;
              for (
                'x' === e[t] && (t++, (n = /[\da-fA-F]/));
                t < e.length;
                t++
              ) {
                if (';' === e[t]) return t;
                if (!e[t].match(n)) break;
              }
              return -1;
            })(e, ++t);
          let n = 0;
          for (; t < e.length; t++, n++)
            if (!(e[t].match(/\w/) && n < 20)) {
              if (';' === e[t]) break;
              return -1;
            }
          return t;
        }
        function h(e, t, n) {
          return { err: { code: e, msg: t, line: n.line || n, col: n.col } };
        }
        function d(e) {
          return r.isName(e);
        }
        function p(e, t) {
          const n = e.substring(0, t).split(/\r?\n/);
          return { line: n.length, col: n[n.length - 1].length + 1 };
        }
        function g(e) {
          return e.startIndex + e[1].length;
        }
      },
      719: (e) => {
        'use strict';
        e.exports = function (e, t, n) {
          (this.tagname = e),
            (this.parent = t),
            (this.child = {}),
            (this.attrsMap = {}),
            (this.val = n),
            (this.addChild = function (e) {
              Array.isArray(this.child[e.tagname])
                ? this.child[e.tagname].push(e)
                : (this.child[e.tagname] = [e]);
            });
        };
      },
      7763: (e, t, n) => {
        'use strict';
        const r = n(4056),
          o = n(4056).buildOptions,
          i = n(719),
          s = n(5580);
        '<((!\\[CDATA\\[([\\s\\S]*?)(]]>))|((NAME:)?(NAME))([^>]*)>|((\\/)(NAME)\\s*>))([^<]*)'.replace(
          /NAME/g,
          r.nameRegexp
        ),
          !Number.parseInt &&
            window.parseInt &&
            (Number.parseInt = window.parseInt),
          !Number.parseFloat &&
            window.parseFloat &&
            (Number.parseFloat = window.parseFloat);
        const a = {
          attributeNamePrefix: '@_',
          attrNodeName: !1,
          textNodeName: '#text',
          ignoreAttributes: !0,
          ignoreNameSpace: !1,
          allowBooleanAttributes: !1,
          parseNodeValue: !0,
          parseAttributeValue: !1,
          arrayMode: !1,
          trimValues: !0,
          cdataTagName: !1,
          cdataPositionChar: '\\c',
          numParseOptions: { hex: !0, leadingZeros: !0 },
          tagValueProcessor: function (e, t) {
            return e;
          },
          attrValueProcessor: function (e, t) {
            return e;
          },
          stopNodes: [],
          alwaysCreateTextNode: !1,
        };
        t.defaultOptions = a;
        const u = [
          'attributeNamePrefix',
          'attrNodeName',
          'textNodeName',
          'ignoreAttributes',
          'ignoreNameSpace',
          'allowBooleanAttributes',
          'parseNodeValue',
          'parseAttributeValue',
          'arrayMode',
          'trimValues',
          'cdataTagName',
          'cdataPositionChar',
          'tagValueProcessor',
          'attrValueProcessor',
          'parseTrueNumberOnly',
          'numParseOptions',
          'stopNodes',
          'alwaysCreateTextNode',
        ];
        function c(e, t, n) {
          return (
            t &&
              (n.trimValues && (t = t.trim()),
              (t = f(
                (t = n.tagValueProcessor(t, e)),
                n.parseNodeValue,
                n.numParseOptions
              ))),
            t
          );
        }
        function l(e, t) {
          if (t.ignoreNameSpace) {
            const t = e.split(':'),
              n = '/' === e.charAt(0) ? '/' : '';
            if ('xmlns' === t[0]) return '';
            2 === t.length && (e = n + t[1]);
          }
          return e;
        }
        function f(e, t, n) {
          if (t && 'string' == typeof e) {
            const t = e.trim();
            return 'true' === t || ('false' !== t && s(e, n));
          }
          return r.isExist(e) ? e : '';
        }
        t.props = u;
        const h = new RegExp('([^\\s=]+)\\s*(=\\s*([\'"])(.*?)\\3)?', 'g');
        function d(e, t) {
          if (!t.ignoreAttributes && 'string' == typeof e) {
            e = e.replace(/\r?\n/g, ' ');
            const n = r.getAllMatches(e, h),
              o = n.length,
              i = {};
            for (let e = 0; e < o; e++) {
              const r = l(n[e][1], t);
              r.length &&
                (void 0 !== n[e][4]
                  ? (t.trimValues && (n[e][4] = n[e][4].trim()),
                    (n[e][4] = t.attrValueProcessor(n[e][4], r)),
                    (i[t.attributeNamePrefix + r] = f(
                      n[e][4],
                      t.parseAttributeValue,
                      t.numParseOptions
                    )))
                  : t.allowBooleanAttributes &&
                    (i[t.attributeNamePrefix + r] = !0));
            }
            if (!Object.keys(i).length) return;
            if (t.attrNodeName) {
              const e = {};
              return (e[t.attrNodeName] = i), e;
            }
            return i;
          }
        }
        function p(e, t) {
          let n,
            r = '';
          for (let o = t; o < e.length; o++) {
            let t = e[o];
            if (n) t === n && (n = '');
            else if ('"' === t || "'" === t) n = t;
            else {
              if ('>' === t) return { data: r, index: o };
              '\t' === t && (t = ' ');
            }
            r += t;
          }
        }
        function g(e, t, n, r) {
          const o = e.indexOf(t, n);
          if (-1 === o) throw new Error(r);
          return o + t.length - 1;
        }
        t.getTraversalObj = function (e, t) {
          (e = e.replace(/\r\n?/g, '\n')), (t = o(t, a, u));
          const n = new i('!xml');
          let s = n,
            l = '';
          for (let n = 0; n < e.length; n++)
            if ('<' === e[n])
              if ('/' === e[n + 1]) {
                const o = g(e, '>', n, 'Closing Tag is not closed.');
                let i = e.substring(n + 2, o).trim();
                if (t.ignoreNameSpace) {
                  const e = i.indexOf(':');
                  -1 !== e && (i = i.substr(e + 1));
                }
                s &&
                  (s.val
                    ? (s.val = r.getValue(s.val) + '' + c(i, l, t))
                    : (s.val = c(i, l, t))),
                  t.stopNodes.length &&
                    t.stopNodes.includes(s.tagname) &&
                    ((s.child = []),
                    null == s.attrsMap && (s.attrsMap = {}),
                    (s.val = e.substr(s.startIndex + 1, n - s.startIndex - 1))),
                  (s = s.parent),
                  (l = ''),
                  (n = o);
              } else if ('?' === e[n + 1])
                n = g(e, '?>', n, 'Pi Tag is not closed.');
              else if ('!--' === e.substr(n + 1, 3))
                n = g(e, '--\x3e', n, 'Comment is not closed.');
              else if ('!D' === e.substr(n + 1, 2)) {
                const t = g(e, '>', n, 'DOCTYPE is not closed.');
                n =
                  e.substring(n, t).indexOf('[') >= 0
                    ? e.indexOf(']>', n) + 1
                    : t;
              } else if ('![' === e.substr(n + 1, 2)) {
                const o = g(e, ']]>', n, 'CDATA is not closed.') - 2,
                  a = e.substring(n + 9, o);
                if (
                  (l &&
                    ((s.val = r.getValue(s.val) + '' + c(s.tagname, l, t)),
                    (l = '')),
                  t.cdataTagName)
                ) {
                  const e = new i(t.cdataTagName, s, a);
                  s.addChild(e),
                    (s.val = r.getValue(s.val) + t.cdataPositionChar),
                    a && (e.val = a);
                } else s.val = (s.val || '') + (a || '');
                n = o + 2;
              } else {
                const o = p(e, n + 1);
                let a = o.data;
                const u = o.index,
                  f = a.indexOf(' ');
                let h = a,
                  g = !0;
                if (
                  (-1 !== f &&
                    ((h = a.substr(0, f).replace(/\s\s*$/, '')),
                    (a = a.substr(f + 1))),
                  t.ignoreNameSpace)
                ) {
                  const e = h.indexOf(':');
                  -1 !== e &&
                    ((h = h.substr(e + 1)), (g = h !== o.data.substr(e + 1)));
                }
                if (
                  (s &&
                    l &&
                    '!xml' !== s.tagname &&
                    (s.val = r.getValue(s.val) + '' + c(s.tagname, l, t)),
                  a.length > 0 && a.lastIndexOf('/') === a.length - 1)
                ) {
                  '/' === h[h.length - 1]
                    ? ((h = h.substr(0, h.length - 1)), (a = h))
                    : (a = a.substr(0, a.length - 1));
                  const e = new i(h, s, '');
                  h !== a && (e.attrsMap = d(a, t)), s.addChild(e);
                } else {
                  const e = new i(h, s);
                  t.stopNodes.length &&
                    t.stopNodes.includes(e.tagname) &&
                    (e.startIndex = u),
                    h !== a && g && (e.attrsMap = d(a, t)),
                    s.addChild(e),
                    (s = e);
                }
                (l = ''), (n = u);
              }
            else l += e[n];
          return n;
        };
      },
      2333: (e, t) => {
        (t.read = function (e, t, n, r, o) {
          var i,
            s,
            a = 8 * o - r - 1,
            u = (1 << a) - 1,
            c = u >> 1,
            l = -7,
            f = n ? o - 1 : 0,
            h = n ? -1 : 1,
            d = e[t + f];
          for (
            f += h, i = d & ((1 << -l) - 1), d >>= -l, l += a;
            l > 0;
            i = 256 * i + e[t + f], f += h, l -= 8
          );
          for (
            s = i & ((1 << -l) - 1), i >>= -l, l += r;
            l > 0;
            s = 256 * s + e[t + f], f += h, l -= 8
          );
          if (0 === i) i = 1 - c;
          else {
            if (i === u) return s ? NaN : (1 / 0) * (d ? -1 : 1);
            (s += Math.pow(2, r)), (i -= c);
          }
          return (d ? -1 : 1) * s * Math.pow(2, i - r);
        }),
          (t.write = function (e, t, n, r, o, i) {
            var s,
              a,
              u,
              c = 8 * i - o - 1,
              l = (1 << c) - 1,
              f = l >> 1,
              h = 23 === o ? Math.pow(2, -24) - Math.pow(2, -77) : 0,
              d = r ? 0 : i - 1,
              p = r ? 1 : -1,
              g = t < 0 || (0 === t && 1 / t < 0) ? 1 : 0;
            for (
              t = Math.abs(t),
                isNaN(t) || t === 1 / 0
                  ? ((a = isNaN(t) ? 1 : 0), (s = l))
                  : ((s = Math.floor(Math.log(t) / Math.LN2)),
                    t * (u = Math.pow(2, -s)) < 1 && (s--, (u *= 2)),
                    (t += s + f >= 1 ? h / u : h * Math.pow(2, 1 - f)) * u >=
                      2 && (s++, (u /= 2)),
                    s + f >= l
                      ? ((a = 0), (s = l))
                      : s + f >= 1
                      ? ((a = (t * u - 1) * Math.pow(2, o)), (s += f))
                      : ((a = t * Math.pow(2, f - 1) * Math.pow(2, o)),
                        (s = 0)));
              o >= 8;
              e[n + d] = 255 & a, d += p, a /= 256, o -= 8
            );
            for (
              s = (s << o) | a, c += o;
              c > 0;
              e[n + d] = 255 & s, d += p, s /= 256, c -= 8
            );
            e[n + d - p] |= 128 * g;
          });
      },
      7906: (e) => {
        var t = {}.toString;
        e.exports =
          Array.isArray ||
          function (e) {
            return '[object Array]' == t.call(e);
          };
      },
      2405: (e, t, n) => {
        e.exports = self.fetch || (self.fetch = n(4677).default || n(4677));
      },
      2034: (e, t, n) => {
        var r, o, i;
        (i = function () {
          function e() {
            for (var e = 0, t = {}; e < arguments.length; e++) {
              var n = arguments[e];
              for (var r in n) t[r] = n[r];
            }
            return t;
          }
          function t(e) {
            return e.replace(/(%[0-9A-Z]{2})+/g, decodeURIComponent);
          }
          return (function n(r) {
            function o() {}
            function i(t, n, i) {
              if ('undefined' != typeof document) {
                'number' ==
                  typeof (i = e({ path: '/' }, o.defaults, i)).expires &&
                  (i.expires = new Date(1 * new Date() + 864e5 * i.expires)),
                  (i.expires = i.expires ? i.expires.toUTCString() : '');
                try {
                  var s = JSON.stringify(n);
                  /^[\{\[]/.test(s) && (n = s);
                } catch (e) {}
                (n = r.write
                  ? r.write(n, t)
                  : encodeURIComponent(String(n)).replace(
                      /%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g,
                      decodeURIComponent
                    )),
                  (t = encodeURIComponent(String(t))
                    .replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent)
                    .replace(/[\(\)]/g, escape));
                var a = '';
                for (var u in i)
                  i[u] &&
                    ((a += '; ' + u),
                    !0 !== i[u] && (a += '=' + i[u].split(';')[0]));
                return (document.cookie = t + '=' + n + a);
              }
            }
            function s(e, n) {
              if ('undefined' != typeof document) {
                for (
                  var o = {},
                    i = document.cookie ? document.cookie.split('; ') : [],
                    s = 0;
                  s < i.length;
                  s++
                ) {
                  var a = i[s].split('='),
                    u = a.slice(1).join('=');
                  n || '"' !== u.charAt(0) || (u = u.slice(1, -1));
                  try {
                    var c = t(a[0]);
                    if (((u = (r.read || r)(u, c) || t(u)), n))
                      try {
                        u = JSON.parse(u);
                      } catch (e) {}
                    if (((o[c] = u), e === c)) break;
                  } catch (e) {}
                }
                return e ? o[e] : o;
              }
            }
            return (
              (o.set = i),
              (o.get = function (e) {
                return s(e, !1);
              }),
              (o.getJSON = function (e) {
                return s(e, !0);
              }),
              (o.remove = function (t, n) {
                i(t, '', e(n, { expires: -1 }));
              }),
              (o.defaults = {}),
              (o.withConverter = n),
              o
            );
          })(function () {});
        }),
          void 0 ===
            (o = 'function' == typeof (r = i) ? r.call(t, n, t, e) : r) ||
            (e.exports = o),
          (e.exports = i());
      },
      2808: (e) => {
        'use strict';
        function t(e, t) {
          return Object.prototype.hasOwnProperty.call(e, t);
        }
        e.exports = function (e, n, r, o) {
          (n = n || '&'), (r = r || '=');
          var i = {};
          if ('string' != typeof e || 0 === e.length) return i;
          var s = /\+/g;
          e = e.split(n);
          var a = 1e3;
          o && 'number' == typeof o.maxKeys && (a = o.maxKeys);
          var u = e.length;
          a > 0 && u > a && (u = a);
          for (var c = 0; c < u; ++c) {
            var l,
              f,
              h,
              d,
              p = e[c].replace(s, '%20'),
              g = p.indexOf(r);
            g >= 0
              ? ((l = p.substr(0, g)), (f = p.substr(g + 1)))
              : ((l = p), (f = '')),
              (h = decodeURIComponent(l)),
              (d = decodeURIComponent(f)),
              t(i, h)
                ? Array.isArray(i[h])
                  ? i[h].push(d)
                  : (i[h] = [i[h], d])
                : (i[h] = d);
          }
          return i;
        };
      },
      1368: (e) => {
        'use strict';
        var t = function (e) {
          switch (typeof e) {
            case 'string':
              return e;
            case 'boolean':
              return e ? 'true' : 'false';
            case 'number':
              return isFinite(e) ? e : '';
            default:
              return '';
          }
        };
        e.exports = function (e, n, r, o) {
          return (
            (n = n || '&'),
            (r = r || '='),
            null === e && (e = void 0),
            'object' == typeof e
              ? Object.keys(e)
                  .map(function (o) {
                    var i = encodeURIComponent(t(o)) + r;
                    return Array.isArray(e[o])
                      ? e[o]
                          .map(function (e) {
                            return i + encodeURIComponent(t(e));
                          })
                          .join(n)
                      : i + encodeURIComponent(t(e[o]));
                  })
                  .join(n)
              : o
              ? encodeURIComponent(t(o)) + r + encodeURIComponent(t(e))
              : ''
          );
        };
      },
      6642: (e, t, n) => {
        'use strict';
        (t.decode = t.parse = n(2808)), (t.encode = t.stringify = n(1368));
      },
      5580: (e) => {
        const t = /^[-+]?0x[a-fA-F0-9]+$/,
          n =
            /^([\-\+])?(0*)(\.[0-9]+([eE]\-?[0-9]+)?|[0-9]+(\.[0-9]+([eE]\-?[0-9]+)?)?)$/;
        !Number.parseInt &&
          window.parseInt &&
          (Number.parseInt = window.parseInt),
          !Number.parseFloat &&
            window.parseFloat &&
            (Number.parseFloat = window.parseFloat);
        const r = {
          hex: !0,
          leadingZeros: !0,
          decimalPoint: '.',
          eNotation: !0,
        };
        e.exports = function (e, o = {}) {
          if (((o = Object.assign({}, r, o)), !e || 'string' != typeof e))
            return e;
          let i = e.trim();
          if (void 0 !== o.skipLike && o.skipLike.test(i)) return e;
          if (o.hex && t.test(i)) return Number.parseInt(i, 16);
          {
            const t = n.exec(i);
            if (t) {
              const n = t[1],
                r = t[2];
              let a =
                (s = t[3]) && -1 !== s.indexOf('.')
                  ? ('.' === (s = s.replace(/0+$/, ''))
                      ? (s = '0')
                      : '.' === s[0]
                      ? (s = '0' + s)
                      : '.' === s[s.length - 1] &&
                        (s = s.substr(0, s.length - 1)),
                    s)
                  : s;
              const u = t[4] || t[6];
              if (!o.leadingZeros && r.length > 0 && n && '.' !== i[2])
                return e;
              if (!o.leadingZeros && r.length > 0 && !n && '.' !== i[1])
                return e;
              {
                const t = Number(i),
                  s = '' + t;
                return -1 !== s.search(/[eE]/) || u
                  ? o.eNotation
                    ? t
                    : e
                  : -1 !== i.indexOf('.')
                  ? ('0' === s && '' === a) || s === a || (n && s === '-' + a)
                    ? t
                    : e
                  : r
                  ? a === s || n + a === s
                    ? t
                    : e
                  : i === s || i === n + s
                  ? t
                  : e;
              }
            }
            return e;
          }
          var s;
        };
      },
      4677: (e, t, n) => {
        'use strict';
        function r(e, t) {
          return (
            (t = t || {}),
            new Promise(function (n, r) {
              var o = new XMLHttpRequest(),
                i = [],
                s = [],
                a = {},
                u = function () {
                  return {
                    ok: 2 == ((o.status / 100) | 0),
                    statusText: o.statusText,
                    status: o.status,
                    url: o.responseURL,
                    text: function () {
                      return Promise.resolve(o.responseText);
                    },
                    json: function () {
                      return Promise.resolve(o.responseText).then(JSON.parse);
                    },
                    blob: function () {
                      return Promise.resolve(new Blob([o.response]));
                    },
                    clone: u,
                    headers: {
                      keys: function () {
                        return i;
                      },
                      entries: function () {
                        return s;
                      },
                      get: function (e) {
                        return a[e.toLowerCase()];
                      },
                      has: function (e) {
                        return e.toLowerCase() in a;
                      },
                    },
                  };
                };
              for (var c in (o.open(t.method || 'get', e, !0),
              (o.onload = function () {
                o
                  .getAllResponseHeaders()
                  .replace(/^(.*?):[^\S\n]*([\s\S]*?)$/gm, function (e, t, n) {
                    i.push((t = t.toLowerCase())),
                      s.push([t, n]),
                      (a[t] = a[t] ? a[t] + ',' + n : n);
                  }),
                  n(u());
              }),
              (o.onerror = r),
              (o.withCredentials = 'include' == t.credentials),
              t.headers))
                o.setRequestHeader(c, t.headers[c]);
              o.send(t.body || null);
            })
          );
        }
        n.r(t), n.d(t, { default: () => r });
      },
      9639: function (e, t, n) {
        var r;
        (e = n.nmd(e)),
          (function (o) {
            t && t.nodeType, e && e.nodeType;
            var i = 'object' == typeof n.g && n.g;
            i.global !== i && i.window !== i && i.self;
            var s,
              a = 2147483647,
              u = 36,
              c = /^xn--/,
              l = /[^\x20-\x7E]/,
              f = /[\x2E\u3002\uFF0E\uFF61]/g,
              h = {
                overflow: 'Overflow: input needs wider integers to process',
                'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
                'invalid-input': 'Invalid input',
              },
              d = Math.floor,
              p = String.fromCharCode;
            function g(e) {
              throw RangeError(h[e]);
            }
            function v(e, t) {
              for (var n = e.length, r = []; n--; ) r[n] = t(e[n]);
              return r;
            }
            function y(e, t) {
              var n = e.split('@'),
                r = '';
              return (
                n.length > 1 && ((r = n[0] + '@'), (e = n[1])),
                r + v((e = e.replace(f, '.')).split('.'), t).join('.')
              );
            }
            function m(e) {
              for (var t, n, r = [], o = 0, i = e.length; o < i; )
                (t = e.charCodeAt(o++)) >= 55296 && t <= 56319 && o < i
                  ? 56320 == (64512 & (n = e.charCodeAt(o++)))
                    ? r.push(((1023 & t) << 10) + (1023 & n) + 65536)
                    : (r.push(t), o--)
                  : r.push(t);
              return r;
            }
            function b(e) {
              return v(e, function (e) {
                var t = '';
                return (
                  e > 65535 &&
                    ((t += p((((e -= 65536) >>> 10) & 1023) | 55296)),
                    (e = 56320 | (1023 & e))),
                  t + p(e)
                );
              }).join('');
            }
            function w(e, t) {
              return e + 22 + 75 * (e < 26) - ((0 != t) << 5);
            }
            function S(e, t, n) {
              var r = 0;
              for (e = n ? d(e / 700) : e >> 1, e += d(e / t); e > 455; r += u)
                e = d(e / 35);
              return d(r + (36 * e) / (e + 38));
            }
            function _(e) {
              var t,
                n,
                r,
                o,
                i,
                s,
                c,
                l,
                f,
                h,
                p,
                v = [],
                y = e.length,
                m = 0,
                w = 128,
                _ = 72;
              for ((n = e.lastIndexOf('-')) < 0 && (n = 0), r = 0; r < n; ++r)
                e.charCodeAt(r) >= 128 && g('not-basic'),
                  v.push(e.charCodeAt(r));
              for (o = n > 0 ? n + 1 : 0; o < y; ) {
                for (
                  i = m, s = 1, c = u;
                  o >= y && g('invalid-input'),
                    ((l =
                      (p = e.charCodeAt(o++)) - 48 < 10
                        ? p - 22
                        : p - 65 < 26
                        ? p - 65
                        : p - 97 < 26
                        ? p - 97
                        : u) >= u ||
                      l > d((a - m) / s)) &&
                      g('overflow'),
                    (m += l * s),
                    !(l < (f = c <= _ ? 1 : c >= _ + 26 ? 26 : c - _));
                  c += u
                )
                  s > d(a / (h = u - f)) && g('overflow'), (s *= h);
                (_ = S(m - i, (t = v.length + 1), 0 == i)),
                  d(m / t) > a - w && g('overflow'),
                  (w += d(m / t)),
                  (m %= t),
                  v.splice(m++, 0, w);
              }
              return b(v);
            }
            function A(e) {
              var t,
                n,
                r,
                o,
                i,
                s,
                c,
                l,
                f,
                h,
                v,
                y,
                b,
                _,
                A,
                E = [];
              for (
                y = (e = m(e)).length, t = 128, n = 0, i = 72, s = 0;
                s < y;
                ++s
              )
                (v = e[s]) < 128 && E.push(p(v));
              for (r = o = E.length, o && E.push('-'); r < y; ) {
                for (c = a, s = 0; s < y; ++s)
                  (v = e[s]) >= t && v < c && (c = v);
                for (
                  c - t > d((a - n) / (b = r + 1)) && g('overflow'),
                    n += (c - t) * b,
                    t = c,
                    s = 0;
                  s < y;
                  ++s
                )
                  if (((v = e[s]) < t && ++n > a && g('overflow'), v == t)) {
                    for (
                      l = n, f = u;
                      !(l < (h = f <= i ? 1 : f >= i + 26 ? 26 : f - i));
                      f += u
                    )
                      (A = l - h),
                        (_ = u - h),
                        E.push(p(w(h + (A % _), 0))),
                        (l = d(A / _));
                    E.push(p(w(l, 0))), (i = S(n, b, r == o)), (n = 0), ++r;
                  }
                ++n, ++t;
              }
              return E.join('');
            }
            (s = {
              version: '1.3.2',
              ucs2: { decode: m, encode: b },
              decode: _,
              encode: A,
              toASCII: function (e) {
                return y(e, function (e) {
                  return l.test(e) ? 'xn--' + A(e) : e;
                });
              },
              toUnicode: function (e) {
                return y(e, function (e) {
                  return c.test(e) ? _(e.slice(4).toLowerCase()) : e;
                });
              },
            }),
              void 0 ===
                (r = function () {
                  return s;
                }.call(t, n, t, e)) || (e.exports = r);
          })();
      },
      883: (e, t, n) => {
        'use strict';
        var r = n(9639),
          o = n(5225);
        function i() {
          (this.protocol = null),
            (this.slashes = null),
            (this.auth = null),
            (this.host = null),
            (this.port = null),
            (this.hostname = null),
            (this.hash = null),
            (this.search = null),
            (this.query = null),
            (this.pathname = null),
            (this.path = null),
            (this.href = null);
        }
        t.Qc = b;
        var s = /^([a-z0-9.+-]+:)/i,
          a = /:[0-9]*$/,
          u = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,
          c = ['{', '}', '|', '\\', '^', '`'].concat([
            '<',
            '>',
            '"',
            '`',
            ' ',
            '\r',
            '\n',
            '\t',
          ]),
          l = ["'"].concat(c),
          f = ['%', '/', '?', ';', '#'].concat(l),
          h = ['/', '?', '#'],
          d = /^[+a-z0-9A-Z_-]{0,63}$/,
          p = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
          g = { javascript: !0, 'javascript:': !0 },
          v = { javascript: !0, 'javascript:': !0 },
          y = {
            http: !0,
            https: !0,
            ftp: !0,
            gopher: !0,
            file: !0,
            'http:': !0,
            'https:': !0,
            'ftp:': !0,
            'gopher:': !0,
            'file:': !0,
          },
          m = n(6642);
        function b(e, t, n) {
          if (e && o.isObject(e) && e instanceof i) return e;
          var r = new i();
          return r.parse(e, t, n), r;
        }
        (i.prototype.parse = function (e, t, n) {
          if (!o.isString(e))
            throw new TypeError(
              "Parameter 'url' must be a string, not " + typeof e
            );
          var i = e.indexOf('?'),
            a = -1 !== i && i < e.indexOf('#') ? '?' : '#',
            c = e.split(a);
          c[0] = c[0].replace(/\\/g, '/');
          var b = (e = c.join(a));
          if (((b = b.trim()), !n && 1 === e.split('#').length)) {
            var w = u.exec(b);
            if (w)
              return (
                (this.path = b),
                (this.href = b),
                (this.pathname = w[1]),
                w[2]
                  ? ((this.search = w[2]),
                    (this.query = t
                      ? m.parse(this.search.substr(1))
                      : this.search.substr(1)))
                  : t && ((this.search = ''), (this.query = {})),
                this
              );
          }
          var S = s.exec(b);
          if (S) {
            var _ = (S = S[0]).toLowerCase();
            (this.protocol = _), (b = b.substr(S.length));
          }
          if (n || S || b.match(/^\/\/[^@\/]+@[^@\/]+/)) {
            var A = '//' === b.substr(0, 2);
            !A || (S && v[S]) || ((b = b.substr(2)), (this.slashes = !0));
          }
          if (!v[S] && (A || (S && !y[S]))) {
            for (var E, C, I = -1, P = 0; P < h.length; P++)
              -1 !== (O = b.indexOf(h[P])) && (-1 === I || O < I) && (I = O);
            for (
              -1 !==
                (C = -1 === I ? b.lastIndexOf('@') : b.lastIndexOf('@', I)) &&
                ((E = b.slice(0, C)),
                (b = b.slice(C + 1)),
                (this.auth = decodeURIComponent(E))),
                I = -1,
                P = 0;
              P < f.length;
              P++
            ) {
              var O;
              -1 !== (O = b.indexOf(f[P])) && (-1 === I || O < I) && (I = O);
            }
            -1 === I && (I = b.length),
              (this.host = b.slice(0, I)),
              (b = b.slice(I)),
              this.parseHost(),
              (this.hostname = this.hostname || '');
            var T =
              '[' === this.hostname[0] &&
              ']' === this.hostname[this.hostname.length - 1];
            if (!T)
              for (
                var x = this.hostname.split(/\./), U = ((P = 0), x.length);
                P < U;
                P++
              ) {
                var k = x[P];
                if (k && !k.match(d)) {
                  for (var M = '', R = 0, N = k.length; R < N; R++)
                    k.charCodeAt(R) > 127 ? (M += 'x') : (M += k[R]);
                  if (!M.match(d)) {
                    var D = x.slice(0, P),
                      j = x.slice(P + 1),
                      F = k.match(p);
                    F && (D.push(F[1]), j.unshift(F[2])),
                      j.length && (b = '/' + j.join('.') + b),
                      (this.hostname = D.join('.'));
                    break;
                  }
                }
              }
            this.hostname.length > 255
              ? (this.hostname = '')
              : (this.hostname = this.hostname.toLowerCase()),
              T || (this.hostname = r.toASCII(this.hostname));
            var L = this.port ? ':' + this.port : '',
              B = this.hostname || '';
            (this.host = B + L),
              (this.href += this.host),
              T &&
                ((this.hostname = this.hostname.substr(
                  1,
                  this.hostname.length - 2
                )),
                '/' !== b[0] && (b = '/' + b));
          }
          if (!g[_])
            for (P = 0, U = l.length; P < U; P++) {
              var V = l[P];
              if (-1 !== b.indexOf(V)) {
                var q = encodeURIComponent(V);
                q === V && (q = escape(V)), (b = b.split(V).join(q));
              }
            }
          var z = b.indexOf('#');
          -1 !== z && ((this.hash = b.substr(z)), (b = b.slice(0, z)));
          var K = b.indexOf('?');
          if (
            (-1 !== K
              ? ((this.search = b.substr(K)),
                (this.query = b.substr(K + 1)),
                t && (this.query = m.parse(this.query)),
                (b = b.slice(0, K)))
              : t && ((this.search = ''), (this.query = {})),
            b && (this.pathname = b),
            y[_] && this.hostname && !this.pathname && (this.pathname = '/'),
            this.pathname || this.search)
          ) {
            L = this.pathname || '';
            var H = this.search || '';
            this.path = L + H;
          }
          return (this.href = this.format()), this;
        }),
          (i.prototype.format = function () {
            var e = this.auth || '';
            e &&
              ((e = (e = encodeURIComponent(e)).replace(/%3A/i, ':')),
              (e += '@'));
            var t = this.protocol || '',
              n = this.pathname || '',
              r = this.hash || '',
              i = !1,
              s = '';
            this.host
              ? (i = e + this.host)
              : this.hostname &&
                ((i =
                  e +
                  (-1 === this.hostname.indexOf(':')
                    ? this.hostname
                    : '[' + this.hostname + ']')),
                this.port && (i += ':' + this.port)),
              this.query &&
                o.isObject(this.query) &&
                Object.keys(this.query).length &&
                (s = m.stringify(this.query));
            var a = this.search || (s && '?' + s) || '';
            return (
              t && ':' !== t.substr(-1) && (t += ':'),
              this.slashes || ((!t || y[t]) && !1 !== i)
                ? ((i = '//' + (i || '')),
                  n && '/' !== n.charAt(0) && (n = '/' + n))
                : i || (i = ''),
              r && '#' !== r.charAt(0) && (r = '#' + r),
              a && '?' !== a.charAt(0) && (a = '?' + a),
              t +
                i +
                (n = n.replace(/[?#]/g, function (e) {
                  return encodeURIComponent(e);
                })) +
                (a = a.replace('#', '%23')) +
                r
            );
          }),
          (i.prototype.resolve = function (e) {
            return this.resolveObject(b(e, !1, !0)).format();
          }),
          (i.prototype.resolveObject = function (e) {
            if (o.isString(e)) {
              var t = new i();
              t.parse(e, !1, !0), (e = t);
            }
            for (
              var n = new i(), r = Object.keys(this), s = 0;
              s < r.length;
              s++
            ) {
              var a = r[s];
              n[a] = this[a];
            }
            if (((n.hash = e.hash), '' === e.href))
              return (n.href = n.format()), n;
            if (e.slashes && !e.protocol) {
              for (var u = Object.keys(e), c = 0; c < u.length; c++) {
                var l = u[c];
                'protocol' !== l && (n[l] = e[l]);
              }
              return (
                y[n.protocol] &&
                  n.hostname &&
                  !n.pathname &&
                  (n.path = n.pathname = '/'),
                (n.href = n.format()),
                n
              );
            }
            if (e.protocol && e.protocol !== n.protocol) {
              if (!y[e.protocol]) {
                for (var f = Object.keys(e), h = 0; h < f.length; h++) {
                  var d = f[h];
                  n[d] = e[d];
                }
                return (n.href = n.format()), n;
              }
              if (((n.protocol = e.protocol), e.host || v[e.protocol]))
                n.pathname = e.pathname;
              else {
                for (
                  var p = (e.pathname || '').split('/');
                  p.length && !(e.host = p.shift());

                );
                e.host || (e.host = ''),
                  e.hostname || (e.hostname = ''),
                  '' !== p[0] && p.unshift(''),
                  p.length < 2 && p.unshift(''),
                  (n.pathname = p.join('/'));
              }
              if (
                ((n.search = e.search),
                (n.query = e.query),
                (n.host = e.host || ''),
                (n.auth = e.auth),
                (n.hostname = e.hostname || e.host),
                (n.port = e.port),
                n.pathname || n.search)
              ) {
                var g = n.pathname || '',
                  m = n.search || '';
                n.path = g + m;
              }
              return (
                (n.slashes = n.slashes || e.slashes), (n.href = n.format()), n
              );
            }
            var b = n.pathname && '/' === n.pathname.charAt(0),
              w = e.host || (e.pathname && '/' === e.pathname.charAt(0)),
              S = w || b || (n.host && e.pathname),
              _ = S,
              A = (n.pathname && n.pathname.split('/')) || [],
              E =
                ((p = (e.pathname && e.pathname.split('/')) || []),
                n.protocol && !y[n.protocol]);
            if (
              (E &&
                ((n.hostname = ''),
                (n.port = null),
                n.host && ('' === A[0] ? (A[0] = n.host) : A.unshift(n.host)),
                (n.host = ''),
                e.protocol &&
                  ((e.hostname = null),
                  (e.port = null),
                  e.host && ('' === p[0] ? (p[0] = e.host) : p.unshift(e.host)),
                  (e.host = null)),
                (S = S && ('' === p[0] || '' === A[0]))),
              w)
            )
              (n.host = e.host || '' === e.host ? e.host : n.host),
                (n.hostname =
                  e.hostname || '' === e.hostname ? e.hostname : n.hostname),
                (n.search = e.search),
                (n.query = e.query),
                (A = p);
            else if (p.length)
              A || (A = []),
                A.pop(),
                (A = A.concat(p)),
                (n.search = e.search),
                (n.query = e.query);
            else if (!o.isNullOrUndefined(e.search))
              return (
                E &&
                  ((n.hostname = n.host = A.shift()),
                  (T =
                    !!(n.host && n.host.indexOf('@') > 0) &&
                    n.host.split('@')) &&
                    ((n.auth = T.shift()), (n.host = n.hostname = T.shift()))),
                (n.search = e.search),
                (n.query = e.query),
                (o.isNull(n.pathname) && o.isNull(n.search)) ||
                  (n.path =
                    (n.pathname ? n.pathname : '') +
                    (n.search ? n.search : '')),
                (n.href = n.format()),
                n
              );
            if (!A.length)
              return (
                (n.pathname = null),
                n.search ? (n.path = '/' + n.search) : (n.path = null),
                (n.href = n.format()),
                n
              );
            for (
              var C = A.slice(-1)[0],
                I =
                  ((n.host || e.host || A.length > 1) &&
                    ('.' === C || '..' === C)) ||
                  '' === C,
                P = 0,
                O = A.length;
              O >= 0;
              O--
            )
              '.' === (C = A[O])
                ? A.splice(O, 1)
                : '..' === C
                ? (A.splice(O, 1), P++)
                : P && (A.splice(O, 1), P--);
            if (!S && !_) for (; P--; P) A.unshift('..');
            !S ||
              '' === A[0] ||
              (A[0] && '/' === A[0].charAt(0)) ||
              A.unshift(''),
              I && '/' !== A.join('/').substr(-1) && A.push('');
            var T,
              x = '' === A[0] || (A[0] && '/' === A[0].charAt(0));
            return (
              E &&
                ((n.hostname = n.host = x ? '' : A.length ? A.shift() : ''),
                (T =
                  !!(n.host && n.host.indexOf('@') > 0) && n.host.split('@')) &&
                  ((n.auth = T.shift()), (n.host = n.hostname = T.shift()))),
              (S = S || (n.host && A.length)) && !x && A.unshift(''),
              A.length
                ? (n.pathname = A.join('/'))
                : ((n.pathname = null), (n.path = null)),
              (o.isNull(n.pathname) && o.isNull(n.search)) ||
                (n.path =
                  (n.pathname ? n.pathname : '') + (n.search ? n.search : '')),
              (n.auth = e.auth || n.auth),
              (n.slashes = n.slashes || e.slashes),
              (n.href = n.format()),
              n
            );
          }),
          (i.prototype.parseHost = function () {
            var e = this.host,
              t = a.exec(e);
            t &&
              (':' !== (t = t[0]) && (this.port = t.substr(1)),
              (e = e.substr(0, e.length - t.length))),
              e && (this.hostname = e);
          });
      },
      5225: (e) => {
        'use strict';
        e.exports = {
          isString: function (e) {
            return 'string' == typeof e;
          },
          isObject: function (e) {
            return 'object' == typeof e && null !== e;
          },
          isNull: function (e) {
            return null === e;
          },
          isNullOrUndefined: function (e) {
            return null == e;
          },
        };
      },
      7993: () => {
        self.window = { crypto };
      },
      6538: () => {},
      633: () => {},
    },
    t = {};
  function n(r) {
    var o = t[r];
    if (void 0 !== o) return o.exports;
    var i = (t[r] = { id: r, loaded: !1, exports: {} });
    return e[r].call(i.exports, i, i.exports, n), (i.loaded = !0), i.exports;
  }
  (n.n = (e) => {
    var t = e && e.__esModule ? () => e.default : () => e;
    return n.d(t, { a: t }), t;
  }),
    (n.d = (e, t) => {
      for (var r in t)
        n.o(t, r) &&
          !n.o(e, r) &&
          Object.defineProperty(e, r, { enumerable: !0, get: t[r] });
    }),
    (n.g = (function () {
      if ('object' == typeof globalThis) return globalThis;
      try {
        return this || new Function('return this')();
      } catch (e) {
        if ('object' == typeof window) return window;
      }
    })()),
    (n.o = (e, t) => Object.prototype.hasOwnProperty.call(e, t)),
    (n.r = (e) => {
      'undefined' != typeof Symbol &&
        Symbol.toStringTag &&
        Object.defineProperty(e, Symbol.toStringTag, { value: 'Module' }),
        Object.defineProperty(e, '__esModule', { value: !0 });
    }),
    (n.nmd = (e) => ((e.paths = []), e.children || (e.children = []), e)),
    (() => {
      'use strict';
      var e, t, r;
      function o(e) {
        return (
          e &&
          !!['provider'].find(function (t) {
            return e.hasOwnProperty(t);
          })
        );
      }
      function i(e) {
        return void 0 !== e.redirectSignIn;
      }
      !(function (e) {
        (e.Cognito = 'COGNITO'),
          (e.Google = 'Google'),
          (e.Facebook = 'Facebook'),
          (e.Amazon = 'LoginWithAmazon'),
          (e.Apple = 'SignInWithApple');
      })(e || (e = {})),
        (function (e) {
          (e.NoConfig = 'noConfig'),
            (e.MissingAuthConfig = 'missingAuthConfig'),
            (e.EmptyUsername = 'emptyUsername'),
            (e.InvalidUsername = 'invalidUsername'),
            (e.EmptyPassword = 'emptyPassword'),
            (e.EmptyCode = 'emptyCode'),
            (e.SignUpError = 'signUpError'),
            (e.NoMFA = 'noMFA'),
            (e.InvalidMFA = 'invalidMFA'),
            (e.EmptyChallengeResponse = 'emptyChallengeResponse'),
            (e.NoUserSession = 'noUserSession'),
            (e.Default = 'default'),
            (e.DeviceConfig = 'deviceConfig'),
            (e.NetworkError = 'networkError');
        })(t || (t = {})),
        (function (e) {
          (e.API_KEY = 'API_KEY'),
            (e.AWS_IAM = 'AWS_IAM'),
            (e.OPENID_CONNECT = 'OPENID_CONNECT'),
            (e.AMAZON_COGNITO_USER_POOLS = 'AMAZON_COGNITO_USER_POOLS'),
            (e.AWS_LAMBDA = 'AWS_LAMBDA');
        })(r || (r = {}));
      var s,
        a = function (e) {
          var t = 'function' == typeof Symbol && Symbol.iterator,
            n = t && e[t],
            r = 0;
          if (n) return n.call(e);
          if (e && 'number' == typeof e.length)
            return {
              next: function () {
                return (
                  e && r >= e.length && (e = void 0),
                  { value: e && e[r++], done: !e }
                );
              },
            };
          throw new TypeError(
            t ? 'Object is not iterable.' : 'Symbol.iterator is not defined.'
          );
        },
        u = function (e, t) {
          var n = 'function' == typeof Symbol && e[Symbol.iterator];
          if (!n) return e;
          var r,
            o,
            i = n.call(e),
            s = [];
          try {
            for (; (void 0 === t || t-- > 0) && !(r = i.next()).done; )
              s.push(r.value);
          } catch (e) {
            o = { error: e };
          } finally {
            try {
              r && !r.done && (n = i.return) && n.call(i);
            } finally {
              if (o) throw o.error;
            }
          }
          return s;
        },
        c = function () {
          for (var e = [], t = 0; t < arguments.length; t++)
            e = e.concat(u(arguments[t]));
          return e;
        },
        l = { VERBOSE: 1, DEBUG: 2, INFO: 3, WARN: 4, ERROR: 5 };
      !(function (e) {
        (e.DEBUG = 'DEBUG'),
          (e.ERROR = 'ERROR'),
          (e.INFO = 'INFO'),
          (e.WARN = 'WARN'),
          (e.VERBOSE = 'VERBOSE');
      })(s || (s = {}));
      var f = (function () {
          function e(e, t) {
            void 0 === t && (t = s.WARN),
              (this.name = e),
              (this.level = t),
              (this._pluggables = []);
          }
          return (
            (e.prototype._padding = function (e) {
              return e < 10 ? '0' + e : '' + e;
            }),
            (e.prototype._ts = function () {
              var e = new Date();
              return (
                [
                  this._padding(e.getMinutes()),
                  this._padding(e.getSeconds()),
                ].join(':') +
                '.' +
                e.getMilliseconds()
              );
            }),
            (e.prototype.configure = function (e) {
              return e ? ((this._config = e), this._config) : this._config;
            }),
            (e.prototype._log = function (t) {
              for (var n, r, o = [], i = 1; i < arguments.length; i++)
                o[i - 1] = arguments[i];
              var u = this.level;
              e.LOG_LEVEL && (u = e.LOG_LEVEL),
                'undefined' != typeof window &&
                  window.LOG_LEVEL &&
                  (u = window.LOG_LEVEL);
              var c = l[u],
                f = l[t];
              if (f >= c) {
                var h = console.log.bind(console);
                t === s.ERROR &&
                  console.error &&
                  (h = console.error.bind(console)),
                  t === s.WARN &&
                    console.warn &&
                    (h = console.warn.bind(console));
                var d = '[' + t + '] ' + this._ts() + ' ' + this.name,
                  p = '';
                if (1 === o.length && 'string' == typeof o[0])
                  h((p = d + ' - ' + o[0]));
                else if (1 === o.length) (p = d + ' ' + o[0]), h(d, o[0]);
                else if ('string' == typeof o[0]) {
                  var g = o.slice(1);
                  1 === g.length && (g = g[0]),
                    (p = d + ' - ' + o[0] + ' ' + g),
                    h(d + ' - ' + o[0], g);
                } else (p = d + ' ' + o), h(d, o);
                try {
                  for (
                    var v = a(this._pluggables), y = v.next();
                    !y.done;
                    y = v.next()
                  ) {
                    var m = y.value,
                      b = { message: p, timestamp: Date.now() };
                    m.pushLogs([b]);
                  }
                } catch (e) {
                  n = { error: e };
                } finally {
                  try {
                    y && !y.done && (r = v.return) && r.call(v);
                  } finally {
                    if (n) throw n.error;
                  }
                }
              }
            }),
            (e.prototype.log = function () {
              for (var e = [], t = 0; t < arguments.length; t++)
                e[t] = arguments[t];
              this._log.apply(this, c([s.INFO], e));
            }),
            (e.prototype.info = function () {
              for (var e = [], t = 0; t < arguments.length; t++)
                e[t] = arguments[t];
              this._log.apply(this, c([s.INFO], e));
            }),
            (e.prototype.warn = function () {
              for (var e = [], t = 0; t < arguments.length; t++)
                e[t] = arguments[t];
              this._log.apply(this, c([s.WARN], e));
            }),
            (e.prototype.error = function () {
              for (var e = [], t = 0; t < arguments.length; t++)
                e[t] = arguments[t];
              this._log.apply(this, c([s.ERROR], e));
            }),
            (e.prototype.debug = function () {
              for (var e = [], t = 0; t < arguments.length; t++)
                e[t] = arguments[t];
              this._log.apply(this, c([s.DEBUG], e));
            }),
            (e.prototype.verbose = function () {
              for (var e = [], t = 0; t < arguments.length; t++)
                e[t] = arguments[t];
              this._log.apply(this, c([s.VERBOSE], e));
            }),
            (e.prototype.addPluggable = function (e) {
              e &&
                'Logging' === e.getCategoryName() &&
                (this._pluggables.push(e), e.configure(this._config));
            }),
            (e.prototype.listPluggables = function () {
              return this._pluggables;
            }),
            (e.LOG_LEVEL = null),
            e
          );
        })(),
        h = function () {
          return (
            (h =
              Object.assign ||
              function (e) {
                for (var t, n = 1, r = arguments.length; n < r; n++)
                  for (var o in (t = arguments[n]))
                    Object.prototype.hasOwnProperty.call(t, o) && (e[o] = t[o]);
                return e;
              }),
            h.apply(this, arguments)
          );
        },
        d = function (e, t) {
          var n = 'function' == typeof Symbol && e[Symbol.iterator];
          if (!n) return e;
          var r,
            o,
            i = n.call(e),
            s = [];
          try {
            for (; (void 0 === t || t-- > 0) && !(r = i.next()).done; )
              s.push(r.value);
          } catch (e) {
            o = { error: e };
          } finally {
            try {
              r && !r.done && (n = i.return) && n.call(i);
            } finally {
              if (o) throw o.error;
            }
          }
          return s;
        },
        p = function () {
          for (var e = [], t = 0; t < arguments.length; t++)
            e = e.concat(d(arguments[t]));
          return e;
        },
        g = new f('Hub'),
        v =
          'undefined' != typeof Symbol && 'function' == typeof Symbol.for
            ? Symbol.for('amplify_default')
            : '@@amplify_default',
        y = (function () {
          function e(e) {
            (this.listeners = []),
              (this.patterns = []),
              (this.protectedChannels = [
                'core',
                'auth',
                'api',
                'analytics',
                'interactions',
                'pubsub',
                'storage',
                'ui',
                'xr',
              ]),
              (this.name = e);
          }
          return (
            (e.prototype.remove = function (e, t) {
              if (e instanceof RegExp) {
                var n = this.patterns.find(function (t) {
                  return t.pattern.source === e.source;
                });
                if (!n) return void g.warn('No listeners for ' + e);
                this.patterns = p(
                  this.patterns.filter(function (e) {
                    return e !== n;
                  })
                );
              } else {
                var r = this.listeners[e];
                if (!r) return void g.warn('No listeners for ' + e);
                this.listeners[e] = p(
                  r.filter(function (e) {
                    return e.callback !== t;
                  })
                );
              }
            }),
            (e.prototype.dispatch = function (e, t, n, r) {
              void 0 === n && (n = ''),
                this.protectedChannels.indexOf(e) > -1 &&
                  (r === v ||
                    g.warn(
                      'WARNING: ' +
                        e +
                        ' is protected and dispatching on it can have unintended consequences'
                    ));
              var o = {
                channel: e,
                payload: h({}, t),
                source: n,
                patternInfo: [],
              };
              try {
                this._toListeners(o);
              } catch (e) {
                g.error(e);
              }
            }),
            (e.prototype.listen = function (e, t, n) {
              var r,
                o = this;
              if (
                (void 0 === n && (n = 'noname'),
                (function (e) {
                  return void 0 !== e.onHubCapsule;
                })(t))
              )
                g.warn(
                  'WARNING onHubCapsule is Deprecated. Please pass in a callback.'
                ),
                  (r = t.onHubCapsule.bind(t));
              else {
                if ('function' != typeof t)
                  throw new Error('No callback supplied to Hub');
                r = t;
              }
              if (e instanceof RegExp)
                this.patterns.push({ pattern: e, callback: r });
              else {
                var i = this.listeners[e];
                i || ((i = []), (this.listeners[e] = i)),
                  i.push({ name: n, callback: r });
              }
              return function () {
                o.remove(e, r);
              };
            }),
            (e.prototype._toListeners = function (e) {
              var t = e.channel,
                n = e.payload,
                r = this.listeners[t];
              if (
                (r &&
                  r.forEach(function (r) {
                    g.debug('Dispatching to ' + t + ' with ', n);
                    try {
                      r.callback(e);
                    } catch (e) {
                      g.error(e);
                    }
                  }),
                this.patterns.length > 0)
              ) {
                if (!n.message)
                  return void g.warn(
                    'Cannot perform pattern matching without a message key'
                  );
                var o = n.message;
                this.patterns.forEach(function (t) {
                  var n = o.match(t.pattern);
                  if (n) {
                    var r = d(n).slice(1),
                      i = h(h({}, e), { patternInfo: r });
                    try {
                      t.callback(i);
                    } catch (e) {
                      g.error(e);
                    }
                  }
                });
              }
            }),
            e
          );
        })(),
        m = new y('__default__'),
        b = {},
        w = (function () {
          function e() {}
          return (
            (e.setItem = function (e, t) {
              return (b[e] = t), b[e];
            }),
            (e.getItem = function (e) {
              return Object.prototype.hasOwnProperty.call(b, e) ? b[e] : void 0;
            }),
            (e.removeItem = function (e) {
              return delete b[e];
            }),
            (e.clear = function () {
              return (b = {});
            }),
            e
          );
        })(),
        S = (function () {
          function e() {
            try {
              (this.storageWindow = window.localStorage),
                this.storageWindow.setItem('aws.amplify.test-ls', 1),
                this.storageWindow.removeItem('aws.amplify.test-ls');
            } catch (e) {
              this.storageWindow = w;
            }
          }
          return (
            (e.prototype.getStorage = function () {
              return this.storageWindow;
            }),
            e
          );
        })(),
        _ = [
          { type: 'text/plain', ext: 'txt' },
          { type: 'text/html', ext: 'html' },
          { type: 'text/javascript', ext: 'js' },
          { type: 'text/css', ext: 'css' },
          { type: 'text/csv', ext: 'csv' },
          { type: 'text/yaml', ext: 'yml' },
          { type: 'text/yaml', ext: 'yaml' },
          { type: 'text/calendar', ext: 'ics' },
          { type: 'text/calendar', ext: 'ical' },
          { type: 'image/apng', ext: 'apng' },
          { type: 'image/bmp', ext: 'bmp' },
          { type: 'image/gif', ext: 'gif' },
          { type: 'image/x-icon', ext: 'ico' },
          { type: 'image/x-icon', ext: 'cur' },
          { type: 'image/jpeg', ext: 'jpg' },
          { type: 'image/jpeg', ext: 'jpeg' },
          { type: 'image/jpeg', ext: 'jfif' },
          { type: 'image/jpeg', ext: 'pjp' },
          { type: 'image/jpeg', ext: 'pjpeg' },
          { type: 'image/png', ext: 'png' },
          { type: 'image/svg+xml', ext: 'svg' },
          { type: 'image/tiff', ext: 'tif' },
          { type: 'image/tiff', ext: 'tiff' },
          { type: 'image/webp', ext: 'webp' },
          { type: 'application/json', ext: 'json' },
          { type: 'application/xml', ext: 'xml' },
          { type: 'application/x-sh', ext: 'sh' },
          { type: 'application/zip', ext: 'zip' },
          { type: 'application/x-rar-compressed', ext: 'rar' },
          { type: 'application/x-tar', ext: 'tar' },
          { type: 'application/x-bzip', ext: 'bz' },
          { type: 'application/x-bzip2', ext: 'bz2' },
          { type: 'application/pdf', ext: 'pdf' },
          { type: 'application/java-archive', ext: 'jar' },
          { type: 'application/msword', ext: 'doc' },
          { type: 'application/vnd.ms-excel', ext: 'xls' },
          { type: 'application/vnd.ms-excel', ext: 'xlsx' },
          { type: 'message/rfc822', ext: 'eml' },
        ],
        A = function (e) {
          return void 0 === e && (e = {}), 0 === Object.keys(e).length;
        },
        E = function (e, t, n) {
          if (!e || !e.sort) return !1;
          var r = n && 'desc' === n ? -1 : 1;
          return (
            e.sort(function (e, n) {
              var o = e[t],
                i = n[t];
              return void 0 === i
                ? void 0 === o
                  ? 0
                  : 1 * r
                : void 0 === o || o < i
                ? -1 * r
                : o > i
                ? 1 * r
                : 0;
            }),
            !0
          );
        },
        C = function (e, t) {
          var n = Object.assign({}, e);
          return (
            t &&
              ('string' == typeof t
                ? delete n[t]
                : t.forEach(function (e) {
                    delete n[e];
                  })),
            n
          );
        },
        I = function (e, t) {
          void 0 === t && (t = 'application/octet-stream');
          var n = e.toLowerCase(),
            r = _.filter(function (e) {
              return n.endsWith('.' + e.ext);
            });
          return r.length > 0 ? r[0].type : t;
        },
        P = function (e) {
          var t = e.toLowerCase();
          return (
            !!t.startsWith('text/') ||
            'application/json' === t ||
            'application/xml' === t ||
            'application/sh' === t
          );
        },
        O = function () {
          for (
            var e = '',
              t =
                '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ',
              n = 32;
            n > 0;
            n -= 1
          )
            e += t[Math.floor(Math.random() * t.length)];
          return e;
        },
        T = function (e) {
          if (e.isResolved) return e;
          var t = !0,
            n = !1,
            r = !1,
            o = e.then(
              function (e) {
                return (r = !0), (t = !1), e;
              },
              function (e) {
                throw ((n = !0), (t = !1), e);
              }
            );
          return (
            (o.isFullfilled = function () {
              return r;
            }),
            (o.isPending = function () {
              return t;
            }),
            (o.isRejected = function () {
              return n;
            }),
            o
          );
        },
        x = function () {
          if ('undefined' == typeof self) return !1;
          var e = self;
          return (
            void 0 !== e.WorkerGlobalScope &&
            self instanceof e.WorkerGlobalScope
          );
        },
        U = function () {
          return {
            isBrowser:
              'undefined' != typeof window && void 0 !== window.document,
            isNode:
              'undefined' != typeof process &&
              null != process.versions &&
              null != process.versions.node,
          };
        },
        k = function (e, t, n) {
          if ((void 0 === t && (t = []), void 0 === n && (n = []), !R(e)))
            return e;
          var r = {};
          for (var o in e)
            e.hasOwnProperty(o) &&
              (r[t.includes(o) ? o : o[0].toLowerCase() + o.slice(1)] =
                n.includes(o) ? e[o] : k(e[o], t, n));
          return r;
        },
        M = function (e, t, n) {
          if ((void 0 === t && (t = []), void 0 === n && (n = []), !R(e)))
            return e;
          var r = {};
          for (var o in e)
            e.hasOwnProperty(o) &&
              (r[t.includes(o) ? o : o[0].toUpperCase() + o.slice(1)] =
                n.includes(o) ? e[o] : M(e[o], t, n));
          return r;
        },
        R = function (e) {
          return !(
            !(e instanceof Object) ||
            e instanceof Array ||
            e instanceof Function ||
            e instanceof Number ||
            e instanceof String ||
            e instanceof Boolean
          );
        };
      !(function () {
        function e() {}
        (e.isEmpty = A),
          (e.sortByField = E),
          (e.objectLessAttributes = C),
          (e.filenameToContentType = I),
          (e.isTextFile = P),
          (e.generateRandomString = O),
          (e.makeQuerablePromise = T),
          (e.isWebWorker = x),
          (e.browserOrNode = U),
          (e.transferKeyToLowerCase = k),
          (e.transferKeyToUpperCase = M),
          (e.isStrictObject = R);
      })();
      var N,
        D =
          ((N = function (e, t) {
            return (
              (N =
                Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array &&
                  function (e, t) {
                    e.__proto__ = t;
                  }) ||
                function (e, t) {
                  for (var n in t) t.hasOwnProperty(n) && (e[n] = t[n]);
                }),
              N(e, t)
            );
          }),
          function (e, t) {
            function n() {
              this.constructor = e;
            }
            N(e, t),
              (e.prototype =
                null === t
                  ? Object.create(t)
                  : ((n.prototype = t.prototype), new n()));
          }),
        j = function (e, t) {
          var n = 'function' == typeof Symbol && e[Symbol.iterator];
          if (!n) return e;
          var r,
            o,
            i = n.call(e),
            s = [];
          try {
            for (; (void 0 === t || t-- > 0) && !(r = i.next()).done; )
              s.push(r.value);
          } catch (e) {
            o = { error: e };
          } finally {
            try {
              r && !r.done && (n = i.return) && n.call(i);
            } finally {
              if (o) throw o.error;
            }
          }
          return s;
        },
        F = function () {
          for (var e = [], t = 0; t < arguments.length; t++)
            e = e.concat(j(arguments[t]));
          return e;
        },
        L = new f('Util'),
        B = (function (e) {
          function t(t) {
            var n = e.call(this, t) || this;
            return (n.nonRetryable = !0), n;
          }
          return D(t, e), t;
        })(Error);
      function V(e, t, n, r) {
        return (
          void 0 === r && (r = 1),
          (o = this),
          (i = void 0),
          (a = function () {
            var o, i;
            return (function (e, t) {
              var n,
                r,
                o,
                i,
                s = {
                  label: 0,
                  sent: function () {
                    if (1 & o[0]) throw o[1];
                    return o[1];
                  },
                  trys: [],
                  ops: [],
                };
              return (
                (i = { next: a(0), throw: a(1), return: a(2) }),
                'function' == typeof Symbol &&
                  (i[Symbol.iterator] = function () {
                    return this;
                  }),
                i
              );
              function a(i) {
                return function (a) {
                  return (function (i) {
                    if (n)
                      throw new TypeError('Generator is already executing.');
                    for (; s; )
                      try {
                        if (
                          ((n = 1),
                          r &&
                            (o =
                              2 & i[0]
                                ? r.return
                                : i[0]
                                ? r.throw || ((o = r.return) && o.call(r), 0)
                                : r.next) &&
                            !(o = o.call(r, i[1])).done)
                        )
                          return o;
                        switch (
                          ((r = 0), o && (i = [2 & i[0], o.value]), i[0])
                        ) {
                          case 0:
                          case 1:
                            o = i;
                            break;
                          case 4:
                            return s.label++, { value: i[1], done: !1 };
                          case 5:
                            s.label++, (r = i[1]), (i = [0]);
                            continue;
                          case 7:
                            (i = s.ops.pop()), s.trys.pop();
                            continue;
                          default:
                            if (
                              !(
                                (o =
                                  (o = s.trys).length > 0 && o[o.length - 1]) ||
                                (6 !== i[0] && 2 !== i[0])
                              )
                            ) {
                              s = 0;
                              continue;
                            }
                            if (
                              3 === i[0] &&
                              (!o || (i[1] > o[0] && i[1] < o[3]))
                            ) {
                              s.label = i[1];
                              break;
                            }
                            if (6 === i[0] && s.label < o[1]) {
                              (s.label = o[1]), (o = i);
                              break;
                            }
                            if (o && s.label < o[2]) {
                              (s.label = o[2]), s.ops.push(i);
                              break;
                            }
                            o[2] && s.ops.pop(), s.trys.pop();
                            continue;
                        }
                        i = t.call(e, s);
                      } catch (e) {
                        (i = [6, e]), (r = 0);
                      } finally {
                        n = o = 0;
                      }
                    if (5 & i[0]) throw i[1];
                    return { value: i[0] ? i[1] : void 0, done: !0 };
                  })([i, a]);
                };
              }
            })(this, function (s) {
              switch (s.label) {
                case 0:
                  if ('function' != typeof e)
                    throw Error('functionToRetry must be a function');
                  L.debug(
                    e.name +
                      ' attempt #' +
                      r +
                      ' with this vars: ' +
                      JSON.stringify(t)
                  ),
                    (s.label = 1);
                case 1:
                  return s.trys.push([1, 3, , 8]), [4, e.apply(void 0, F(t))];
                case 2:
                  return [2, s.sent()];
                case 3:
                  if (
                    ((o = s.sent()),
                    L.debug('error on ' + e.name, o),
                    (a = o) && a.nonRetryable)
                  )
                    throw (L.debug(e.name + ' non retryable error', o), o);
                  return (
                    (i = n(r, t, o)),
                    L.debug(e.name + ' retrying in ' + i + ' ms'),
                    !1 === i
                      ? [3, 6]
                      : [
                          4,
                          new Promise(function (e) {
                            return setTimeout(e, i);
                          }),
                        ]
                  );
                case 4:
                  return s.sent(), [4, V(e, t, n, r + 1)];
                case 5:
                  return [2, s.sent()];
                case 6:
                  throw o;
                case 7:
                  return [3, 8];
                case 8:
                  return [2];
              }
              var a;
            });
          }),
          new ((s = void 0) || (s = Promise))(function (e, t) {
            function n(e) {
              try {
                u(a.next(e));
              } catch (e) {
                t(e);
              }
            }
            function r(e) {
              try {
                u(a.throw(e));
              } catch (e) {
                t(e);
              }
            }
            function u(t) {
              var o;
              t.done
                ? e(t.value)
                : ((o = t.value),
                  o instanceof s
                    ? o
                    : new s(function (e) {
                        e(o);
                      })).then(n, r);
            }
            u((a = a.apply(o, i || [])).next());
          })
        );
        var o, i, s, a;
      }
      var q = 3e5,
        z = new f('CognitoCredentials'),
        K = new Promise(function (e, t) {
          return U().isBrowser
            ? window.gapi && window.gapi.auth2 && window.gapi.auth2
              ? (z.debug('google api already loaded'), e())
              : void setTimeout(function () {
                  return e();
                }, 2e3)
            : (z.debug('not in the browser, directly resolved'), e());
        }),
        H = (function () {
          function e() {
            (this.initialized = !1),
              (this.refreshGoogleToken = this.refreshGoogleToken.bind(this)),
              (this._refreshGoogleTokenImpl =
                this._refreshGoogleTokenImpl.bind(this));
          }
          return (
            (e.prototype.refreshGoogleToken = function () {
              return (
                (e = this),
                (t = void 0),
                (r = function () {
                  return (function (e, t) {
                    var n,
                      r,
                      o,
                      i,
                      s = {
                        label: 0,
                        sent: function () {
                          if (1 & o[0]) throw o[1];
                          return o[1];
                        },
                        trys: [],
                        ops: [],
                      };
                    return (
                      (i = { next: a(0), throw: a(1), return: a(2) }),
                      'function' == typeof Symbol &&
                        (i[Symbol.iterator] = function () {
                          return this;
                        }),
                      i
                    );
                    function a(i) {
                      return function (a) {
                        return (function (i) {
                          if (n)
                            throw new TypeError(
                              'Generator is already executing.'
                            );
                          for (; s; )
                            try {
                              if (
                                ((n = 1),
                                r &&
                                  (o =
                                    2 & i[0]
                                      ? r.return
                                      : i[0]
                                      ? r.throw ||
                                        ((o = r.return) && o.call(r), 0)
                                      : r.next) &&
                                  !(o = o.call(r, i[1])).done)
                              )
                                return o;
                              switch (
                                ((r = 0), o && (i = [2 & i[0], o.value]), i[0])
                              ) {
                                case 0:
                                case 1:
                                  o = i;
                                  break;
                                case 4:
                                  return s.label++, { value: i[1], done: !1 };
                                case 5:
                                  s.label++, (r = i[1]), (i = [0]);
                                  continue;
                                case 7:
                                  (i = s.ops.pop()), s.trys.pop();
                                  continue;
                                default:
                                  if (
                                    !(
                                      (o =
                                        (o = s.trys).length > 0 &&
                                        o[o.length - 1]) ||
                                      (6 !== i[0] && 2 !== i[0])
                                    )
                                  ) {
                                    s = 0;
                                    continue;
                                  }
                                  if (
                                    3 === i[0] &&
                                    (!o || (i[1] > o[0] && i[1] < o[3]))
                                  ) {
                                    s.label = i[1];
                                    break;
                                  }
                                  if (6 === i[0] && s.label < o[1]) {
                                    (s.label = o[1]), (o = i);
                                    break;
                                  }
                                  if (o && s.label < o[2]) {
                                    (s.label = o[2]), s.ops.push(i);
                                    break;
                                  }
                                  o[2] && s.ops.pop(), s.trys.pop();
                                  continue;
                              }
                              i = t.call(e, s);
                            } catch (e) {
                              (i = [6, e]), (r = 0);
                            } finally {
                              n = o = 0;
                            }
                          if (5 & i[0]) throw i[1];
                          return { value: i[0] ? i[1] : void 0, done: !0 };
                        })([i, a]);
                      };
                    }
                  })(this, function (e) {
                    switch (e.label) {
                      case 0:
                        return this.initialized
                          ? [3, 2]
                          : (z.debug('need to wait for the Google SDK loaded'),
                            [4, K]);
                      case 1:
                        e.sent(),
                          (this.initialized = !0),
                          z.debug('finish waiting'),
                          (e.label = 2);
                      case 2:
                        return [2, this._refreshGoogleTokenImpl()];
                    }
                  });
                }),
                new ((n = void 0) || (n = Promise))(function (o, i) {
                  function s(e) {
                    try {
                      u(r.next(e));
                    } catch (e) {
                      i(e);
                    }
                  }
                  function a(e) {
                    try {
                      u(r.throw(e));
                    } catch (e) {
                      i(e);
                    }
                  }
                  function u(e) {
                    var t;
                    e.done
                      ? o(e.value)
                      : ((t = e.value),
                        t instanceof n
                          ? t
                          : new n(function (e) {
                              e(t);
                            })).then(s, a);
                  }
                  u((r = r.apply(e, t || [])).next());
                })
              );
              var e, t, n, r;
            }),
            (e.prototype._refreshGoogleTokenImpl = function () {
              var e = null;
              return (
                U().isBrowser &&
                  (e =
                    window.gapi && window.gapi.auth2
                      ? window.gapi.auth2
                      : null),
                e
                  ? new Promise(function (t, n) {
                      e.getAuthInstance()
                        .then(function (e) {
                          e ||
                            (z.debug('google Auth undefined'),
                            n(new B('google Auth undefined')));
                          var r = e.currentUser.get();
                          r.isSignedIn()
                            ? (z.debug('refreshing the google access token'),
                              r
                                .reloadAuthResponse()
                                .then(function (e) {
                                  var n = e.id_token,
                                    r = e.expires_at;
                                  t({ token: n, expires_at: r });
                                })
                                .catch(function (e) {
                                  e && 'network_error' === e.error
                                    ? n(
                                        'Network error reloading google auth response'
                                      )
                                    : n(
                                        new B(
                                          'Failed to reload google auth response'
                                        )
                                      );
                                }))
                            : n(new B('User is not signed in with Google'));
                        })
                        .catch(function (e) {
                          z.debug('Failed to refresh google token', e),
                            n(new B('Failed to refresh google token'));
                        });
                    })
                  : (z.debug('no gapi auth2 available'),
                    Promise.reject('no gapi auth2 available'))
              );
            }),
            e
          );
        })(),
        W = new f('CognitoCredentials'),
        G = new Promise(function (e, t) {
          return U().isBrowser
            ? window.FB
              ? (W.debug('FB SDK already loaded'), e())
              : void setTimeout(function () {
                  return e();
                }, 2e3)
            : (W.debug('not in the browser, directly resolved'), e());
        }),
        Y = (function () {
          function e() {
            (this.initialized = !1),
              (this.refreshFacebookToken =
                this.refreshFacebookToken.bind(this)),
              (this._refreshFacebookTokenImpl =
                this._refreshFacebookTokenImpl.bind(this));
          }
          return (
            (e.prototype.refreshFacebookToken = function () {
              return (
                (e = this),
                (t = void 0),
                (r = function () {
                  return (function (e, t) {
                    var n,
                      r,
                      o,
                      i,
                      s = {
                        label: 0,
                        sent: function () {
                          if (1 & o[0]) throw o[1];
                          return o[1];
                        },
                        trys: [],
                        ops: [],
                      };
                    return (
                      (i = { next: a(0), throw: a(1), return: a(2) }),
                      'function' == typeof Symbol &&
                        (i[Symbol.iterator] = function () {
                          return this;
                        }),
                      i
                    );
                    function a(i) {
                      return function (a) {
                        return (function (i) {
                          if (n)
                            throw new TypeError(
                              'Generator is already executing.'
                            );
                          for (; s; )
                            try {
                              if (
                                ((n = 1),
                                r &&
                                  (o =
                                    2 & i[0]
                                      ? r.return
                                      : i[0]
                                      ? r.throw ||
                                        ((o = r.return) && o.call(r), 0)
                                      : r.next) &&
                                  !(o = o.call(r, i[1])).done)
                              )
                                return o;
                              switch (
                                ((r = 0), o && (i = [2 & i[0], o.value]), i[0])
                              ) {
                                case 0:
                                case 1:
                                  o = i;
                                  break;
                                case 4:
                                  return s.label++, { value: i[1], done: !1 };
                                case 5:
                                  s.label++, (r = i[1]), (i = [0]);
                                  continue;
                                case 7:
                                  (i = s.ops.pop()), s.trys.pop();
                                  continue;
                                default:
                                  if (
                                    !(
                                      (o =
                                        (o = s.trys).length > 0 &&
                                        o[o.length - 1]) ||
                                      (6 !== i[0] && 2 !== i[0])
                                    )
                                  ) {
                                    s = 0;
                                    continue;
                                  }
                                  if (
                                    3 === i[0] &&
                                    (!o || (i[1] > o[0] && i[1] < o[3]))
                                  ) {
                                    s.label = i[1];
                                    break;
                                  }
                                  if (6 === i[0] && s.label < o[1]) {
                                    (s.label = o[1]), (o = i);
                                    break;
                                  }
                                  if (o && s.label < o[2]) {
                                    (s.label = o[2]), s.ops.push(i);
                                    break;
                                  }
                                  o[2] && s.ops.pop(), s.trys.pop();
                                  continue;
                              }
                              i = t.call(e, s);
                            } catch (e) {
                              (i = [6, e]), (r = 0);
                            } finally {
                              n = o = 0;
                            }
                          if (5 & i[0]) throw i[1];
                          return { value: i[0] ? i[1] : void 0, done: !0 };
                        })([i, a]);
                      };
                    }
                  })(this, function (e) {
                    switch (e.label) {
                      case 0:
                        return this.initialized
                          ? [3, 2]
                          : (W.debug(
                              'need to wait for the Facebook SDK loaded'
                            ),
                            [4, G]);
                      case 1:
                        e.sent(),
                          (this.initialized = !0),
                          W.debug('finish waiting'),
                          (e.label = 2);
                      case 2:
                        return [2, this._refreshFacebookTokenImpl()];
                    }
                  });
                }),
                new ((n = void 0) || (n = Promise))(function (o, i) {
                  function s(e) {
                    try {
                      u(r.next(e));
                    } catch (e) {
                      i(e);
                    }
                  }
                  function a(e) {
                    try {
                      u(r.throw(e));
                    } catch (e) {
                      i(e);
                    }
                  }
                  function u(e) {
                    var t;
                    e.done
                      ? o(e.value)
                      : ((t = e.value),
                        t instanceof n
                          ? t
                          : new n(function (e) {
                              e(t);
                            })).then(s, a);
                  }
                  u((r = r.apply(e, t || [])).next());
                })
              );
              var e, t, n, r;
            }),
            (e.prototype._refreshFacebookTokenImpl = function () {
              var e = null;
              if ((U().isBrowser && (e = window.FB), !e)) {
                var t = 'no fb sdk available';
                return W.debug(t), Promise.reject(new B(t));
              }
              return new Promise(function (t, n) {
                e.getLoginStatus(
                  function (e) {
                    if (e && e.authResponse) {
                      var r = e.authResponse,
                        o = r.accessToken,
                        i = 1e3 * r.expiresIn + new Date().getTime();
                      o ||
                        ((s = 'the jwtToken is undefined'),
                        W.debug(s),
                        n(new B(s))),
                        t({ token: o, expires_at: i });
                    } else {
                      var s =
                        'no response from facebook when refreshing the jwt token';
                      W.debug(s), n(new B(s));
                    }
                  },
                  { scope: 'public_profile,email' }
                );
              });
            }),
            e
          );
        })(),
        $ = new H(),
        J = new Y(),
        Z = 'aws-amplify/4.5.8',
        Q = {
          userAgent: Z + ' js',
          product: '',
          navigator: null,
          isReactNative: !1,
        };
      'undefined' != typeof navigator &&
        navigator.product &&
        ((Q.product = navigator.product || ''),
        (Q.navigator = navigator || null),
        'ReactNative' === navigator.product
          ? ((Q.userAgent = Z + ' react-native'), (Q.isReactNative = !0))
          : ((Q.userAgent = Z + ' js'), (Q.isReactNative = !1)));
      var X = function () {
          return Q.userAgent;
        },
        ee = new f('Amplify'),
        te = (function () {
          function e() {
            (this._components = []),
              (this._config = {}),
              (this._modules = {}),
              (this.Auth = null),
              (this.Analytics = null),
              (this.API = null),
              (this.Credentials = null),
              (this.Storage = null),
              (this.I18n = null),
              (this.Cache = null),
              (this.PubSub = null),
              (this.Interactions = null),
              (this.Pushnotification = null),
              (this.UI = null),
              (this.XR = null),
              (this.Predictions = null),
              (this.DataStore = null),
              (this.Geo = null),
              (this.Logger = f),
              (this.ServiceWorker = null);
          }
          return (
            (e.prototype.register = function (e) {
              ee.debug('component registered in amplify', e),
                this._components.push(e),
                'function' == typeof e.getModuleName
                  ? ((this._modules[e.getModuleName()] = e),
                    (this[e.getModuleName()] = e))
                  : ee.debug('no getModuleName method for component', e),
                e.configure(this._config);
            }),
            (e.prototype.configure = function (e) {
              var t = this;
              return e
                ? ((this._config = Object.assign(this._config, e)),
                  ee.debug('amplify config', this._config),
                  Object.entries(this._modules).forEach(function (e) {
                    var n = (function (e, t) {
                        var n =
                          'function' == typeof Symbol && e[Symbol.iterator];
                        if (!n) return e;
                        var r,
                          o,
                          i = n.call(e),
                          s = [];
                        try {
                          for (
                            ;
                            (void 0 === t || t-- > 0) && !(r = i.next()).done;

                          )
                            s.push(r.value);
                        } catch (e) {
                          o = { error: e };
                        } finally {
                          try {
                            r && !r.done && (n = i.return) && n.call(i);
                          } finally {
                            if (o) throw o.error;
                          }
                        }
                        return s;
                      })(e, 2),
                      r = (n[0], n[1]);
                    Object.keys(r).forEach(function (e) {
                      t._modules[e] && (r[e] = t._modules[e]);
                    });
                  }),
                  this._components.map(function (e) {
                    e.configure(t._config);
                  }),
                  this._config)
                : this._config;
            }),
            (e.prototype.addPluggable = function (e) {
              e &&
                e.getCategory &&
                'function' == typeof e.getCategory &&
                this._components.map(function (t) {
                  t.addPluggable &&
                    'function' == typeof t.addPluggable &&
                    t.addPluggable(e);
                });
            }),
            e
          );
        })(),
        ne = new te();
      function re(e, t, n, r) {
        return new (n || (n = Promise))(function (o, i) {
          function s(e) {
            try {
              u(r.next(e));
            } catch (e) {
              i(e);
            }
          }
          function a(e) {
            try {
              u(r.throw(e));
            } catch (e) {
              i(e);
            }
          }
          function u(e) {
            var t;
            e.done
              ? o(e.value)
              : ((t = e.value),
                t instanceof n
                  ? t
                  : new n(function (e) {
                      e(t);
                    })).then(s, a);
          }
          u((r = r.apply(e, t || [])).next());
        });
      }
      function oe(e, t) {
        var n,
          r,
          o,
          i,
          s = {
            label: 0,
            sent: function () {
              if (1 & o[0]) throw o[1];
              return o[1];
            },
            trys: [],
            ops: [],
          };
        return (
          (i = { next: a(0), throw: a(1), return: a(2) }),
          'function' == typeof Symbol &&
            (i[Symbol.iterator] = function () {
              return this;
            }),
          i
        );
        function a(i) {
          return function (a) {
            return (function (i) {
              if (n) throw new TypeError('Generator is already executing.');
              for (; s; )
                try {
                  if (
                    ((n = 1),
                    r &&
                      (o =
                        2 & i[0]
                          ? r.return
                          : i[0]
                          ? r.throw || ((o = r.return) && o.call(r), 0)
                          : r.next) &&
                      !(o = o.call(r, i[1])).done)
                  )
                    return o;
                  switch (((r = 0), o && (i = [2 & i[0], o.value]), i[0])) {
                    case 0:
                    case 1:
                      o = i;
                      break;
                    case 4:
                      return s.label++, { value: i[1], done: !1 };
                    case 5:
                      s.label++, (r = i[1]), (i = [0]);
                      continue;
                    case 7:
                      (i = s.ops.pop()), s.trys.pop();
                      continue;
                    default:
                      if (
                        !(
                          (o = (o = s.trys).length > 0 && o[o.length - 1]) ||
                          (6 !== i[0] && 2 !== i[0])
                        )
                      ) {
                        s = 0;
                        continue;
                      }
                      if (3 === i[0] && (!o || (i[1] > o[0] && i[1] < o[3]))) {
                        s.label = i[1];
                        break;
                      }
                      if (6 === i[0] && s.label < o[1]) {
                        (s.label = o[1]), (o = i);
                        break;
                      }
                      if (o && s.label < o[2]) {
                        (s.label = o[2]), s.ops.push(i);
                        break;
                      }
                      o[2] && s.ops.pop(), s.trys.pop();
                      continue;
                  }
                  i = t.call(e, s);
                } catch (e) {
                  (i = [6, e]), (r = 0);
                } finally {
                  n = o = 0;
                }
              if (5 & i[0]) throw i[1];
              return { value: i[0] ? i[1] : void 0, done: !0 };
            })([i, a]);
          };
        }
      }
      var ie = function (e, t) {
        return (
          (ie =
            Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array &&
              function (e, t) {
                e.__proto__ = t;
              }) ||
            function (e, t) {
              for (var n in t)
                Object.prototype.hasOwnProperty.call(t, n) && (e[n] = t[n]);
            }),
          ie(e, t)
        );
      };
      function se(e, t) {
        if ('function' != typeof t && null !== t)
          throw new TypeError(
            'Class extends value ' + String(t) + ' is not a constructor or null'
          );
        function n() {
          this.constructor = e;
        }
        ie(e, t),
          (e.prototype =
            null === t
              ? Object.create(t)
              : ((n.prototype = t.prototype), new n()));
      }
      var ae,
        ue,
        ce,
        le,
        fe,
        he,
        de,
        pe,
        ge,
        ve,
        ye,
        me,
        be,
        we,
        Se,
        _e,
        Ae,
        Ee,
        Ce,
        Ie,
        Pe,
        Oe,
        Te,
        xe,
        Ue,
        ke,
        Me,
        Re,
        Ne,
        De,
        je,
        Fe,
        Le,
        Be,
        Ve,
        qe,
        ze,
        Ke,
        He,
        We,
        Ge,
        Ye,
        $e,
        Je,
        Ze,
        Qe,
        Xe,
        et,
        tt,
        nt,
        rt,
        ot,
        it,
        st,
        at,
        ut,
        ct,
        lt = function () {
          return (
            (lt =
              Object.assign ||
              function (e) {
                for (var t, n = 1, r = arguments.length; n < r; n++)
                  for (var o in (t = arguments[n]))
                    Object.prototype.hasOwnProperty.call(t, o) && (e[o] = t[o]);
                return e;
              }),
            lt.apply(this, arguments)
          );
        };
      function ft(e, t, n, r) {
        return new (n || (n = Promise))(function (o, i) {
          function s(e) {
            try {
              u(r.next(e));
            } catch (e) {
              i(e);
            }
          }
          function a(e) {
            try {
              u(r.throw(e));
            } catch (e) {
              i(e);
            }
          }
          function u(e) {
            var t;
            e.done
              ? o(e.value)
              : ((t = e.value),
                t instanceof n
                  ? t
                  : new n(function (e) {
                      e(t);
                    })).then(s, a);
          }
          u((r = r.apply(e, t || [])).next());
        });
      }
      function ht(e, t) {
        var n,
          r,
          o,
          i,
          s = {
            label: 0,
            sent: function () {
              if (1 & o[0]) throw o[1];
              return o[1];
            },
            trys: [],
            ops: [],
          };
        return (
          (i = { next: a(0), throw: a(1), return: a(2) }),
          'function' == typeof Symbol &&
            (i[Symbol.iterator] = function () {
              return this;
            }),
          i
        );
        function a(i) {
          return function (a) {
            return (function (i) {
              if (n) throw new TypeError('Generator is already executing.');
              for (; s; )
                try {
                  if (
                    ((n = 1),
                    r &&
                      (o =
                        2 & i[0]
                          ? r.return
                          : i[0]
                          ? r.throw || ((o = r.return) && o.call(r), 0)
                          : r.next) &&
                      !(o = o.call(r, i[1])).done)
                  )
                    return o;
                  switch (((r = 0), o && (i = [2 & i[0], o.value]), i[0])) {
                    case 0:
                    case 1:
                      o = i;
                      break;
                    case 4:
                      return s.label++, { value: i[1], done: !1 };
                    case 5:
                      s.label++, (r = i[1]), (i = [0]);
                      continue;
                    case 7:
                      (i = s.ops.pop()), s.trys.pop();
                      continue;
                    default:
                      if (
                        !(
                          (o = (o = s.trys).length > 0 && o[o.length - 1]) ||
                          (6 !== i[0] && 2 !== i[0])
                        )
                      ) {
                        s = 0;
                        continue;
                      }
                      if (3 === i[0] && (!o || (i[1] > o[0] && i[1] < o[3]))) {
                        s.label = i[1];
                        break;
                      }
                      if (6 === i[0] && s.label < o[1]) {
                        (s.label = o[1]), (o = i);
                        break;
                      }
                      if (o && s.label < o[2]) {
                        (s.label = o[2]), s.ops.push(i);
                        break;
                      }
                      o[2] && s.ops.pop(), s.trys.pop();
                      continue;
                  }
                  i = t.call(e, s);
                } catch (e) {
                  (i = [6, e]), (r = 0);
                } finally {
                  n = o = 0;
                }
              if (5 & i[0]) throw i[1];
              return { value: i[0] ? i[1] : void 0, done: !0 };
            })([i, a]);
          };
        }
      }
      Object.create,
        Object.create,
        (function (e) {
          (e.AUTHENTICATED_ROLE = 'AuthenticatedRole'), (e.DENY = 'Deny');
        })(ae || (ae = {})),
        (function (e) {
          e.filterSensitiveLog = function (e) {
            return lt({}, e);
          };
        })(ue || (ue = {})),
        (function (e) {
          e.filterSensitiveLog = function (e) {
            return lt({}, e);
          };
        })(ce || (ce = {})),
        (function (e) {
          e.filterSensitiveLog = function (e) {
            return lt({}, e);
          };
        })(le || (le = {})),
        (function (e) {
          e.filterSensitiveLog = function (e) {
            return lt({}, e);
          };
        })(fe || (fe = {})),
        (function (e) {
          e.filterSensitiveLog = function (e) {
            return lt({}, e);
          };
        })(he || (he = {})),
        (function (e) {
          e.filterSensitiveLog = function (e) {
            return lt({}, e);
          };
        })(de || (de = {})),
        (function (e) {
          e.filterSensitiveLog = function (e) {
            return lt({}, e);
          };
        })(pe || (pe = {})),
        (function (e) {
          e.filterSensitiveLog = function (e) {
            return lt({}, e);
          };
        })(ge || (ge = {})),
        (function (e) {
          e.filterSensitiveLog = function (e) {
            return lt({}, e);
          };
        })(ve || (ve = {})),
        (function (e) {
          e.filterSensitiveLog = function (e) {
            return lt({}, e);
          };
        })(ye || (ye = {})),
        (function (e) {
          (e.ACCESS_DENIED = 'AccessDenied'),
            (e.INTERNAL_SERVER_ERROR = 'InternalServerError');
        })(me || (me = {})),
        (function (e) {
          e.filterSensitiveLog = function (e) {
            return lt({}, e);
          };
        })(be || (be = {})),
        (function (e) {
          e.filterSensitiveLog = function (e) {
            return lt({}, e);
          };
        })(we || (we = {})),
        (function (e) {
          e.filterSensitiveLog = function (e) {
            return lt({}, e);
          };
        })(Se || (Se = {})),
        (function (e) {
          e.filterSensitiveLog = function (e) {
            return lt({}, e);
          };
        })(_e || (_e = {})),
        (function (e) {
          e.filterSensitiveLog = function (e) {
            return lt({}, e);
          };
        })(Ae || (Ae = {})),
        (function (e) {
          e.filterSensitiveLog = function (e) {
            return lt({}, e);
          };
        })(Ee || (Ee = {})),
        (function (e) {
          e.filterSensitiveLog = function (e) {
            return lt({}, e);
          };
        })(Ce || (Ce = {})),
        (function (e) {
          e.filterSensitiveLog = function (e) {
            return lt({}, e);
          };
        })(Ie || (Ie = {})),
        (function (e) {
          e.filterSensitiveLog = function (e) {
            return lt({}, e);
          };
        })(Pe || (Pe = {})),
        (function (e) {
          e.filterSensitiveLog = function (e) {
            return lt({}, e);
          };
        })(Oe || (Oe = {})),
        (function (e) {
          e.filterSensitiveLog = function (e) {
            return lt({}, e);
          };
        })(Te || (Te = {})),
        (function (e) {
          e.filterSensitiveLog = function (e) {
            return lt({}, e);
          };
        })(xe || (xe = {})),
        (function (e) {
          e.filterSensitiveLog = function (e) {
            return lt({}, e);
          };
        })(Ue || (Ue = {})),
        (function (e) {
          e.filterSensitiveLog = function (e) {
            return lt({}, e);
          };
        })(ke || (ke = {})),
        (function (e) {
          e.filterSensitiveLog = function (e) {
            return lt({}, e);
          };
        })(Me || (Me = {})),
        (function (e) {
          (e.CONTAINS = 'Contains'),
            (e.EQUALS = 'Equals'),
            (e.NOT_EQUAL = 'NotEqual'),
            (e.STARTS_WITH = 'StartsWith');
        })(Re || (Re = {})),
        (function (e) {
          e.filterSensitiveLog = function (e) {
            return lt({}, e);
          };
        })(Ne || (Ne = {})),
        (function (e) {
          e.filterSensitiveLog = function (e) {
            return lt({}, e);
          };
        })(De || (De = {})),
        (function (e) {
          (e.RULES = 'Rules'), (e.TOKEN = 'Token');
        })(je || (je = {})),
        (function (e) {
          e.filterSensitiveLog = function (e) {
            return lt({}, e);
          };
        })(Fe || (Fe = {})),
        (function (e) {
          e.filterSensitiveLog = function (e) {
            return lt({}, e);
          };
        })(Le || (Le = {})),
        (function (e) {
          e.filterSensitiveLog = function (e) {
            return lt({}, e);
          };
        })(Be || (Be = {})),
        (function (e) {
          e.filterSensitiveLog = function (e) {
            return lt({}, e);
          };
        })(Ve || (Ve = {})),
        (function (e) {
          e.filterSensitiveLog = function (e) {
            return lt({}, e);
          };
        })(qe || (qe = {})),
        (function (e) {
          e.filterSensitiveLog = function (e) {
            return lt({}, e);
          };
        })(ze || (ze = {})),
        (function (e) {
          e.filterSensitiveLog = function (e) {
            return lt({}, e);
          };
        })(Ke || (Ke = {})),
        (function (e) {
          e.filterSensitiveLog = function (e) {
            return lt({}, e);
          };
        })(He || (He = {})),
        (function (e) {
          e.filterSensitiveLog = function (e) {
            return lt({}, e);
          };
        })(We || (We = {})),
        (function (e) {
          e.filterSensitiveLog = function (e) {
            return lt({}, e);
          };
        })(Ge || (Ge = {})),
        (function (e) {
          e.filterSensitiveLog = function (e) {
            return lt({}, e);
          };
        })(Ye || (Ye = {})),
        (function (e) {
          e.filterSensitiveLog = function (e) {
            return lt({}, e);
          };
        })($e || ($e = {})),
        (function (e) {
          e.filterSensitiveLog = function (e) {
            return lt({}, e);
          };
        })(Je || (Je = {})),
        (function (e) {
          e.filterSensitiveLog = function (e) {
            return lt({}, e);
          };
        })(Ze || (Ze = {})),
        (function (e) {
          e.filterSensitiveLog = function (e) {
            return lt({}, e);
          };
        })(Qe || (Qe = {})),
        (function (e) {
          e.filterSensitiveLog = function (e) {
            return lt({}, e);
          };
        })(Xe || (Xe = {})),
        (function (e) {
          e.filterSensitiveLog = function (e) {
            return lt({}, e);
          };
        })(et || (et = {})),
        (function (e) {
          e.filterSensitiveLog = function (e) {
            return lt({}, e);
          };
        })(tt || (tt = {})),
        (function (e) {
          e.filterSensitiveLog = function (e) {
            return lt({}, e);
          };
        })(nt || (nt = {})),
        (function (e) {
          e.filterSensitiveLog = function (e) {
            return lt({}, e);
          };
        })(rt || (rt = {})),
        (function (e) {
          e.filterSensitiveLog = function (e) {
            return lt({}, e);
          };
        })(ot || (ot = {})),
        (function (e) {
          e.filterSensitiveLog = function (e) {
            return lt({}, e);
          };
        })(it || (it = {})),
        (function (e) {
          e.filterSensitiveLog = function (e) {
            return lt({}, e);
          };
        })(st || (st = {})),
        (function (e) {
          e.filterSensitiveLog = function (e) {
            return lt({}, e);
          };
        })(at || (at = {})),
        (function (e) {
          e.filterSensitiveLog = function (e) {
            return lt({}, e);
          };
        })(ut || (ut = {})),
        (function (e) {
          e.filterSensitiveLog = function (e) {
            return lt({}, e);
          };
        })(ct || (ct = {}));
      var dt = (function () {
          function e(e) {
            (this.statusCode = e.statusCode),
              (this.headers = e.headers || {}),
              (this.body = e.body);
          }
          return (
            (e.isInstance = function (e) {
              if (!e) return !1;
              var t = e;
              return (
                'number' == typeof t.statusCode && 'object' == typeof t.headers
              );
            }),
            e
          );
        })(),
        pt = function () {
          return (
            (pt =
              Object.assign ||
              function (e) {
                for (var t, n = 1, r = arguments.length; n < r; n++)
                  for (var o in (t = arguments[n]))
                    Object.prototype.hasOwnProperty.call(t, o) && (e[o] = t[o]);
                return e;
              }),
            pt.apply(this, arguments)
          );
        };
      function gt(e, t) {
        var n = 'function' == typeof Symbol && e[Symbol.iterator];
        if (!n) return e;
        var r,
          o,
          i = n.call(e),
          s = [];
        try {
          for (; (void 0 === t || t-- > 0) && !(r = i.next()).done; )
            s.push(r.value);
        } catch (e) {
          o = { error: e };
        } finally {
          try {
            r && !r.done && (n = i.return) && n.call(i);
          } finally {
            if (o) throw o.error;
          }
        }
        return s;
      }
      var vt = (function () {
          function e(e) {
            (this.method = e.method || 'GET'),
              (this.hostname = e.hostname || 'localhost'),
              (this.port = e.port),
              (this.query = e.query || {}),
              (this.headers = e.headers || {}),
              (this.body = e.body),
              (this.protocol = e.protocol
                ? ':' !== e.protocol.substr(-1)
                  ? e.protocol + ':'
                  : e.protocol
                : 'https:'),
              (this.path = e.path
                ? '/' !== e.path.charAt(0)
                  ? '/' + e.path
                  : e.path
                : '/');
          }
          return (
            (e.isInstance = function (e) {
              if (!e) return !1;
              var t = e;
              return (
                'method' in t &&
                'protocol' in t &&
                'hostname' in t &&
                'path' in t &&
                'object' == typeof t.query &&
                'object' == typeof t.headers
              );
            }),
            (e.prototype.clone = function () {
              var t,
                n = new e(pt(pt({}, this), { headers: pt({}, this.headers) }));
              return (
                n.query &&
                  (n.query =
                    ((t = n.query),
                    Object.keys(t).reduce(function (e, n) {
                      var r,
                        o = t[n];
                      return pt(
                        pt({}, e),
                        (((r = {})[n] = Array.isArray(o)
                          ? (function () {
                              for (var e = [], t = 0; t < arguments.length; t++)
                                e = e.concat(gt(arguments[t]));
                              return e;
                            })(o)
                          : o),
                        r)
                      );
                    }, {}))),
                n
              );
            }),
            e
          );
        })(),
        yt = function (e, t) {
          return ft(void 0, void 0, void 0, function () {
            var n, r, o, i, s, a, u, c, l, f, h, d, p, g, v;
            return ht(this, function (y) {
              switch (y.label) {
                case 0:
                  return (r = [lt({}, e)]), (v = {}), [4, Vt(e.body, t)];
                case 1:
                  switch (
                    ((n = lt.apply(
                      void 0,
                      r.concat([((v.body = y.sent()), v)])
                    )),
                    (i = 'UnknownError'),
                    (i = qt(e, n.body)))
                  ) {
                    case 'ExternalServiceException':
                    case 'com.amazonaws.cognitoidentity#ExternalServiceException':
                      return [3, 2];
                    case 'InternalErrorException':
                    case 'com.amazonaws.cognitoidentity#InternalErrorException':
                      return [3, 4];
                    case 'InvalidIdentityPoolConfigurationException':
                    case 'com.amazonaws.cognitoidentity#InvalidIdentityPoolConfigurationException':
                      return [3, 6];
                    case 'InvalidParameterException':
                    case 'com.amazonaws.cognitoidentity#InvalidParameterException':
                      return [3, 8];
                    case 'NotAuthorizedException':
                    case 'com.amazonaws.cognitoidentity#NotAuthorizedException':
                      return [3, 10];
                    case 'ResourceConflictException':
                    case 'com.amazonaws.cognitoidentity#ResourceConflictException':
                      return [3, 12];
                    case 'ResourceNotFoundException':
                    case 'com.amazonaws.cognitoidentity#ResourceNotFoundException':
                      return [3, 14];
                    case 'TooManyRequestsException':
                    case 'com.amazonaws.cognitoidentity#TooManyRequestsException':
                      return [3, 16];
                  }
                  return [3, 18];
                case 2:
                  return (s = [{}]), [4, bt(n, t)];
                case 3:
                  return (
                    (o = lt.apply(void 0, [
                      lt.apply(void 0, s.concat([y.sent()])),
                      { name: i, $metadata: Lt(e) },
                    ])),
                    [3, 19]
                  );
                case 4:
                  return (a = [{}]), [4, wt(n, t)];
                case 5:
                  return (
                    (o = lt.apply(void 0, [
                      lt.apply(void 0, a.concat([y.sent()])),
                      { name: i, $metadata: Lt(e) },
                    ])),
                    [3, 19]
                  );
                case 6:
                  return (u = [{}]), [4, St(n, t)];
                case 7:
                  return (
                    (o = lt.apply(void 0, [
                      lt.apply(void 0, u.concat([y.sent()])),
                      { name: i, $metadata: Lt(e) },
                    ])),
                    [3, 19]
                  );
                case 8:
                  return (c = [{}]), [4, _t(n, t)];
                case 9:
                  return (
                    (o = lt.apply(void 0, [
                      lt.apply(void 0, c.concat([y.sent()])),
                      { name: i, $metadata: Lt(e) },
                    ])),
                    [3, 19]
                  );
                case 10:
                  return (l = [{}]), [4, Et(n, t)];
                case 11:
                  return (
                    (o = lt.apply(void 0, [
                      lt.apply(void 0, l.concat([y.sent()])),
                      { name: i, $metadata: Lt(e) },
                    ])),
                    [3, 19]
                  );
                case 12:
                  return (f = [{}]), [4, Ct(n, t)];
                case 13:
                  return (
                    (o = lt.apply(void 0, [
                      lt.apply(void 0, f.concat([y.sent()])),
                      { name: i, $metadata: Lt(e) },
                    ])),
                    [3, 19]
                  );
                case 14:
                  return (h = [{}]), [4, It(n, t)];
                case 15:
                  return (
                    (o = lt.apply(void 0, [
                      lt.apply(void 0, h.concat([y.sent()])),
                      { name: i, $metadata: Lt(e) },
                    ])),
                    [3, 19]
                  );
                case 16:
                  return (d = [{}]), [4, Pt(n, t)];
                case 17:
                  return (
                    (o = lt.apply(void 0, [
                      lt.apply(void 0, d.concat([y.sent()])),
                      { name: i, $metadata: Lt(e) },
                    ])),
                    [3, 19]
                  );
                case 18:
                  (p = n.body),
                    (i = p.code || p.Code || i),
                    (o = lt(lt({}, p), {
                      name: '' + i,
                      message: p.message || p.Message || i,
                      $fault: 'client',
                      $metadata: Lt(e),
                    })),
                    (y.label = 19);
                case 19:
                  return (
                    (g = o.message || o.Message || i),
                    (o.message = g),
                    delete o.Message,
                    [2, Promise.reject(Object.assign(new Error(g), o))]
                  );
              }
            });
          });
        },
        mt = function (e, t) {
          return ft(void 0, void 0, void 0, function () {
            var n, r, o, i, s, a, u, c, l, f, h, d, p, g, v;
            return ht(this, function (y) {
              switch (y.label) {
                case 0:
                  return (r = [lt({}, e)]), (v = {}), [4, Vt(e.body, t)];
                case 1:
                  switch (
                    ((n = lt.apply(
                      void 0,
                      r.concat([((v.body = y.sent()), v)])
                    )),
                    (i = 'UnknownError'),
                    (i = qt(e, n.body)))
                  ) {
                    case 'ExternalServiceException':
                    case 'com.amazonaws.cognitoidentity#ExternalServiceException':
                      return [3, 2];
                    case 'InternalErrorException':
                    case 'com.amazonaws.cognitoidentity#InternalErrorException':
                      return [3, 4];
                    case 'InvalidParameterException':
                    case 'com.amazonaws.cognitoidentity#InvalidParameterException':
                      return [3, 6];
                    case 'LimitExceededException':
                    case 'com.amazonaws.cognitoidentity#LimitExceededException':
                      return [3, 8];
                    case 'NotAuthorizedException':
                    case 'com.amazonaws.cognitoidentity#NotAuthorizedException':
                      return [3, 10];
                    case 'ResourceConflictException':
                    case 'com.amazonaws.cognitoidentity#ResourceConflictException':
                      return [3, 12];
                    case 'ResourceNotFoundException':
                    case 'com.amazonaws.cognitoidentity#ResourceNotFoundException':
                      return [3, 14];
                    case 'TooManyRequestsException':
                    case 'com.amazonaws.cognitoidentity#TooManyRequestsException':
                      return [3, 16];
                  }
                  return [3, 18];
                case 2:
                  return (s = [{}]), [4, bt(n, t)];
                case 3:
                  return (
                    (o = lt.apply(void 0, [
                      lt.apply(void 0, s.concat([y.sent()])),
                      { name: i, $metadata: Lt(e) },
                    ])),
                    [3, 19]
                  );
                case 4:
                  return (a = [{}]), [4, wt(n, t)];
                case 5:
                  return (
                    (o = lt.apply(void 0, [
                      lt.apply(void 0, a.concat([y.sent()])),
                      { name: i, $metadata: Lt(e) },
                    ])),
                    [3, 19]
                  );
                case 6:
                  return (u = [{}]), [4, _t(n, t)];
                case 7:
                  return (
                    (o = lt.apply(void 0, [
                      lt.apply(void 0, u.concat([y.sent()])),
                      { name: i, $metadata: Lt(e) },
                    ])),
                    [3, 19]
                  );
                case 8:
                  return (c = [{}]), [4, At(n, t)];
                case 9:
                  return (
                    (o = lt.apply(void 0, [
                      lt.apply(void 0, c.concat([y.sent()])),
                      { name: i, $metadata: Lt(e) },
                    ])),
                    [3, 19]
                  );
                case 10:
                  return (l = [{}]), [4, Et(n, t)];
                case 11:
                  return (
                    (o = lt.apply(void 0, [
                      lt.apply(void 0, l.concat([y.sent()])),
                      { name: i, $metadata: Lt(e) },
                    ])),
                    [3, 19]
                  );
                case 12:
                  return (f = [{}]), [4, Ct(n, t)];
                case 13:
                  return (
                    (o = lt.apply(void 0, [
                      lt.apply(void 0, f.concat([y.sent()])),
                      { name: i, $metadata: Lt(e) },
                    ])),
                    [3, 19]
                  );
                case 14:
                  return (h = [{}]), [4, It(n, t)];
                case 15:
                  return (
                    (o = lt.apply(void 0, [
                      lt.apply(void 0, h.concat([y.sent()])),
                      { name: i, $metadata: Lt(e) },
                    ])),
                    [3, 19]
                  );
                case 16:
                  return (d = [{}]), [4, Pt(n, t)];
                case 17:
                  return (
                    (o = lt.apply(void 0, [
                      lt.apply(void 0, d.concat([y.sent()])),
                      { name: i, $metadata: Lt(e) },
                    ])),
                    [3, 19]
                  );
                case 18:
                  (p = n.body),
                    (i = p.code || p.Code || i),
                    (o = lt(lt({}, p), {
                      name: '' + i,
                      message: p.message || p.Message || i,
                      $fault: 'client',
                      $metadata: Lt(e),
                    })),
                    (y.label = 19);
                case 19:
                  return (
                    (g = o.message || o.Message || i),
                    (o.message = g),
                    delete o.Message,
                    [2, Promise.reject(Object.assign(new Error(g), o))]
                  );
              }
            });
          });
        },
        bt = function (e, t) {
          return ft(void 0, void 0, void 0, function () {
            var n, r;
            return ht(this, function (o) {
              return (
                (n = e.body),
                (r = xt(n, t)),
                [
                  2,
                  lt(
                    {
                      name: 'ExternalServiceException',
                      $fault: 'client',
                      $metadata: Lt(e),
                    },
                    r
                  ),
                ]
              );
            });
          });
        },
        wt = function (e, t) {
          return ft(void 0, void 0, void 0, function () {
            var n, r;
            return ht(this, function (o) {
              return (
                (n = e.body),
                (r = Ut(n, t)),
                [
                  2,
                  lt(
                    {
                      name: 'InternalErrorException',
                      $fault: 'server',
                      $metadata: Lt(e),
                    },
                    r
                  ),
                ]
              );
            });
          });
        },
        St = function (e, t) {
          return ft(void 0, void 0, void 0, function () {
            var n, r;
            return ht(this, function (o) {
              return (
                (n = e.body),
                (r = kt(n, t)),
                [
                  2,
                  lt(
                    {
                      name: 'InvalidIdentityPoolConfigurationException',
                      $fault: 'client',
                      $metadata: Lt(e),
                    },
                    r
                  ),
                ]
              );
            });
          });
        },
        _t = function (e, t) {
          return ft(void 0, void 0, void 0, function () {
            var n, r;
            return ht(this, function (o) {
              return (
                (n = e.body),
                (r = Mt(n, t)),
                [
                  2,
                  lt(
                    {
                      name: 'InvalidParameterException',
                      $fault: 'client',
                      $metadata: Lt(e),
                    },
                    r
                  ),
                ]
              );
            });
          });
        },
        At = function (e, t) {
          return ft(void 0, void 0, void 0, function () {
            var n, r;
            return ht(this, function (o) {
              return (
                (n = e.body),
                (r = Rt(n, t)),
                [
                  2,
                  lt(
                    {
                      name: 'LimitExceededException',
                      $fault: 'client',
                      $metadata: Lt(e),
                    },
                    r
                  ),
                ]
              );
            });
          });
        },
        Et = function (e, t) {
          return ft(void 0, void 0, void 0, function () {
            var n, r;
            return ht(this, function (o) {
              return (
                (n = e.body),
                (r = Nt(n, t)),
                [
                  2,
                  lt(
                    {
                      name: 'NotAuthorizedException',
                      $fault: 'client',
                      $metadata: Lt(e),
                    },
                    r
                  ),
                ]
              );
            });
          });
        },
        Ct = function (e, t) {
          return ft(void 0, void 0, void 0, function () {
            var n, r;
            return ht(this, function (o) {
              return (
                (n = e.body),
                (r = Dt(n, t)),
                [
                  2,
                  lt(
                    {
                      name: 'ResourceConflictException',
                      $fault: 'client',
                      $metadata: Lt(e),
                    },
                    r
                  ),
                ]
              );
            });
          });
        },
        It = function (e, t) {
          return ft(void 0, void 0, void 0, function () {
            var n, r;
            return ht(this, function (o) {
              return (
                (n = e.body),
                (r = jt(n, t)),
                [
                  2,
                  lt(
                    {
                      name: 'ResourceNotFoundException',
                      $fault: 'client',
                      $metadata: Lt(e),
                    },
                    r
                  ),
                ]
              );
            });
          });
        },
        Pt = function (e, t) {
          return ft(void 0, void 0, void 0, function () {
            var n, r;
            return ht(this, function (o) {
              return (
                (n = e.body),
                (r = Ft(n, t)),
                [
                  2,
                  lt(
                    {
                      name: 'TooManyRequestsException',
                      $fault: 'client',
                      $metadata: Lt(e),
                    },
                    r
                  ),
                ]
              );
            });
          });
        },
        Ot = function (e, t) {
          return Object.entries(e).reduce(function (e, t) {
            var n,
              r = (function (e, t) {
                var n = 'function' == typeof Symbol && e[Symbol.iterator];
                if (!n) return e;
                var r,
                  o,
                  i = n.call(e),
                  s = [];
                try {
                  for (; (void 0 === t || t-- > 0) && !(r = i.next()).done; )
                    s.push(r.value);
                } catch (e) {
                  o = { error: e };
                } finally {
                  try {
                    r && !r.done && (n = i.return) && n.call(i);
                  } finally {
                    if (o) throw o.error;
                  }
                }
                return s;
              })(t, 2),
              o = r[0],
              i = r[1];
            return null === i ? e : lt(lt({}, e), (((n = {})[o] = i), n));
          }, {});
        },
        Tt = function (e, t) {
          return {
            AccessKeyId:
              void 0 !== e.AccessKeyId && null !== e.AccessKeyId
                ? e.AccessKeyId
                : void 0,
            Expiration:
              void 0 !== e.Expiration && null !== e.Expiration
                ? new Date(Math.round(1e3 * e.Expiration))
                : void 0,
            SecretKey:
              void 0 !== e.SecretKey && null !== e.SecretKey
                ? e.SecretKey
                : void 0,
            SessionToken:
              void 0 !== e.SessionToken && null !== e.SessionToken
                ? e.SessionToken
                : void 0,
          };
        },
        xt = function (e, t) {
          return {
            message:
              void 0 !== e.message && null !== e.message ? e.message : void 0,
          };
        },
        Ut = function (e, t) {
          return {
            message:
              void 0 !== e.message && null !== e.message ? e.message : void 0,
          };
        },
        kt = function (e, t) {
          return {
            message:
              void 0 !== e.message && null !== e.message ? e.message : void 0,
          };
        },
        Mt = function (e, t) {
          return {
            message:
              void 0 !== e.message && null !== e.message ? e.message : void 0,
          };
        },
        Rt = function (e, t) {
          return {
            message:
              void 0 !== e.message && null !== e.message ? e.message : void 0,
          };
        },
        Nt = function (e, t) {
          return {
            message:
              void 0 !== e.message && null !== e.message ? e.message : void 0,
          };
        },
        Dt = function (e, t) {
          return {
            message:
              void 0 !== e.message && null !== e.message ? e.message : void 0,
          };
        },
        jt = function (e, t) {
          return {
            message:
              void 0 !== e.message && null !== e.message ? e.message : void 0,
          };
        },
        Ft = function (e, t) {
          return {
            message:
              void 0 !== e.message && null !== e.message ? e.message : void 0,
          };
        },
        Lt = function (e) {
          var t;
          return {
            httpStatusCode: e.statusCode,
            requestId:
              null !== (t = e.headers['x-amzn-requestid']) && void 0 !== t
                ? t
                : e.headers['x-amzn-request-id'],
            extendedRequestId: e.headers['x-amz-id-2'],
            cfId: e.headers['x-amz-cf-id'],
          };
        },
        Bt = function (e, t, n, r, o) {
          return ft(void 0, void 0, void 0, function () {
            var i, s, a, u, c, l;
            return ht(this, function (f) {
              switch (f.label) {
                case 0:
                  return [4, e.endpoint()];
                case 1:
                  return (
                    (i = f.sent()),
                    (s = i.hostname),
                    (a = i.protocol),
                    (u = void 0 === a ? 'https' : a),
                    (c = i.port),
                    (l = {
                      protocol: u,
                      hostname: s,
                      port: c,
                      method: 'POST',
                      path: n,
                      headers: t,
                    }),
                    void 0 !== r && (l.hostname = r),
                    void 0 !== o && (l.body = o),
                    [2, new vt(l)]
                  );
              }
            });
          });
        },
        Vt = function (e, t) {
          return (function (e, t) {
            return (function (e, t) {
              return (
                void 0 === e && (e = new Uint8Array()),
                e instanceof Uint8Array
                  ? Promise.resolve(e)
                  : t.streamCollector(e) || Promise.resolve(new Uint8Array())
              );
            })(e, t).then(function (e) {
              return t.utf8Encoder(e);
            });
          })(e, t).then(function (e) {
            return e.length ? JSON.parse(e) : {};
          });
        },
        qt = function (e, t) {
          var n,
            r = function (e) {
              var t = e;
              return (
                t.indexOf(':') >= 0 && (t = t.split(':')[0]),
                t.indexOf('#') >= 0 && (t = t.split('#')[1]),
                t
              );
            },
            o =
              ((n = e.headers),
              'x-amzn-errortype',
              Object.keys(n).find(function (e) {
                return e.toLowerCase() === 'x-amzn-errortype'.toLowerCase();
              }));
          return void 0 !== o
            ? r(e.headers[o])
            : void 0 !== t.code
            ? r(t.code)
            : void 0 !== t.__type
            ? r(t.__type)
            : '';
        },
        zt = function () {
          return (
            (zt =
              Object.assign ||
              function (e) {
                for (var t, n = 1, r = arguments.length; n < r; n++)
                  for (var o in (t = arguments[n]))
                    Object.prototype.hasOwnProperty.call(t, o) && (e[o] = t[o]);
                return e;
              }),
            zt.apply(this, arguments)
          );
        };
      function Kt(e, t, n, r) {
        return new (n || (n = Promise))(function (o, i) {
          function s(e) {
            try {
              u(r.next(e));
            } catch (e) {
              i(e);
            }
          }
          function a(e) {
            try {
              u(r.throw(e));
            } catch (e) {
              i(e);
            }
          }
          function u(e) {
            var t;
            e.done
              ? o(e.value)
              : ((t = e.value),
                t instanceof n
                  ? t
                  : new n(function (e) {
                      e(t);
                    })).then(s, a);
          }
          u((r = r.apply(e, t || [])).next());
        });
      }
      function Ht(e, t) {
        var n,
          r,
          o,
          i,
          s = {
            label: 0,
            sent: function () {
              if (1 & o[0]) throw o[1];
              return o[1];
            },
            trys: [],
            ops: [],
          };
        return (
          (i = { next: a(0), throw: a(1), return: a(2) }),
          'function' == typeof Symbol &&
            (i[Symbol.iterator] = function () {
              return this;
            }),
          i
        );
        function a(i) {
          return function (a) {
            return (function (i) {
              if (n) throw new TypeError('Generator is already executing.');
              for (; s; )
                try {
                  if (
                    ((n = 1),
                    r &&
                      (o =
                        2 & i[0]
                          ? r.return
                          : i[0]
                          ? r.throw || ((o = r.return) && o.call(r), 0)
                          : r.next) &&
                      !(o = o.call(r, i[1])).done)
                  )
                    return o;
                  switch (((r = 0), o && (i = [2 & i[0], o.value]), i[0])) {
                    case 0:
                    case 1:
                      o = i;
                      break;
                    case 4:
                      return s.label++, { value: i[1], done: !1 };
                    case 5:
                      s.label++, (r = i[1]), (i = [0]);
                      continue;
                    case 7:
                      (i = s.ops.pop()), s.trys.pop();
                      continue;
                    default:
                      if (
                        !(
                          (o = (o = s.trys).length > 0 && o[o.length - 1]) ||
                          (6 !== i[0] && 2 !== i[0])
                        )
                      ) {
                        s = 0;
                        continue;
                      }
                      if (3 === i[0] && (!o || (i[1] > o[0] && i[1] < o[3]))) {
                        s.label = i[1];
                        break;
                      }
                      if (6 === i[0] && s.label < o[1]) {
                        (s.label = o[1]), (o = i);
                        break;
                      }
                      if (o && s.label < o[2]) {
                        (s.label = o[2]), s.ops.push(i);
                        break;
                      }
                      o[2] && s.ops.pop(), s.trys.pop();
                      continue;
                  }
                  i = t.call(e, s);
                } catch (e) {
                  (i = [6, e]), (r = 0);
                } finally {
                  n = o = 0;
                }
              if (5 & i[0]) throw i[1];
              return { value: i[0] ? i[1] : void 0, done: !0 };
            })([i, a]);
          };
        }
      }
      var Wt = {
          name: 'deserializerMiddleware',
          step: 'deserialize',
          tags: ['DESERIALIZER'],
          override: !0,
        },
        Gt = {
          name: 'serializerMiddleware',
          step: 'serialize',
          tags: ['SERIALIZER'],
          override: !0,
        };
      function Yt(e, t, n) {
        return {
          applyToStack: function (r) {
            r.add(
              (function (e, t) {
                return function (n, r) {
                  return function (r) {
                    return Kt(void 0, void 0, void 0, function () {
                      var o, i;
                      return Ht(this, function (s) {
                        switch (s.label) {
                          case 0:
                            return [4, n(r)];
                          case 1:
                            return (o = s.sent().response), [4, t(o, e)];
                          case 2:
                            return (
                              (i = s.sent()), [2, { response: o, output: i }]
                            );
                        }
                      });
                    });
                  };
                };
              })(e, n),
              Wt
            ),
              r.add(
                (function (e, t) {
                  return function (n, r) {
                    return function (r) {
                      return Kt(void 0, void 0, void 0, function () {
                        var o;
                        return Ht(this, function (i) {
                          switch (i.label) {
                            case 0:
                              return [4, t(r.input, e)];
                            case 1:
                              return (
                                (o = i.sent()),
                                [2, n(zt(zt({}, r), { request: o }))]
                              );
                          }
                        });
                      });
                    };
                  };
                })(e, t),
                Gt
              );
          },
        };
      }
      var $t = function () {
        return (
          ($t =
            Object.assign ||
            function (e) {
              for (var t, n = 1, r = arguments.length; n < r; n++)
                for (var o in (t = arguments[n]))
                  Object.prototype.hasOwnProperty.call(t, o) && (e[o] = t[o]);
              return e;
            }),
          $t.apply(this, arguments)
        );
      };
      function Jt(e, t) {
        var n = 'function' == typeof Symbol && e[Symbol.iterator];
        if (!n) return e;
        var r,
          o,
          i = n.call(e),
          s = [];
        try {
          for (; (void 0 === t || t-- > 0) && !(r = i.next()).done; )
            s.push(r.value);
        } catch (e) {
          o = { error: e };
        } finally {
          try {
            r && !r.done && (n = i.return) && n.call(i);
          } finally {
            if (o) throw o.error;
          }
        }
        return s;
      }
      function Zt() {
        for (var e = [], t = 0; t < arguments.length; t++)
          e = e.concat(Jt(arguments[t]));
        return e;
      }
      var Qt = function () {
          var e = [],
            t = [],
            n = new Set(),
            r = function (n) {
              return (
                e.forEach(function (e) {
                  n.add(e.middleware, $t({}, e));
                }),
                t.forEach(function (e) {
                  n.addRelativeTo(e.middleware, $t({}, e));
                }),
                n
              );
            },
            o = function (e) {
              var t = [];
              return (
                e.before.forEach(function (e) {
                  0 === e.before.length && 0 === e.after.length
                    ? t.push(e)
                    : t.push.apply(t, Zt(o(e)));
                }),
                t.push(e),
                e.after.reverse().forEach(function (e) {
                  0 === e.before.length && 0 === e.after.length
                    ? t.push(e)
                    : t.push.apply(t, Zt(o(e)));
                }),
                t
              );
            },
            i = {
              add: function (t, r) {
                void 0 === r && (r = {});
                var o = r.name,
                  i = r.override,
                  s = $t(
                    { step: 'initialize', priority: 'normal', middleware: t },
                    r
                  );
                if (o) {
                  if (n.has(o)) {
                    if (!i)
                      throw new Error("Duplicate middleware name '" + o + "'");
                    var a = e.findIndex(function (e) {
                        return e.name === o;
                      }),
                      u = e[a];
                    if (u.step !== s.step || u.priority !== s.priority)
                      throw new Error(
                        '"' +
                          o +
                          '" middleware with ' +
                          u.priority +
                          ' priority in ' +
                          u.step +
                          ' step cannot be overridden by same-name middleware with ' +
                          s.priority +
                          ' priority in ' +
                          s.step +
                          ' step.'
                      );
                    e.splice(a, 1);
                  }
                  n.add(o);
                }
                e.push(s);
              },
              addRelativeTo: function (e, r) {
                var o = r.name,
                  i = r.override,
                  s = $t({ middleware: e }, r);
                if (o) {
                  if (n.has(o)) {
                    if (!i)
                      throw new Error("Duplicate middleware name '" + o + "'");
                    var a = t.findIndex(function (e) {
                        return e.name === o;
                      }),
                      u = t[a];
                    if (
                      u.toMiddleware !== s.toMiddleware ||
                      u.relation !== s.relation
                    )
                      throw new Error(
                        '"' +
                          o +
                          '" middleware ' +
                          u.relation +
                          ' "' +
                          u.toMiddleware +
                          '" middleware cannot be overridden by same-name middleware ' +
                          s.relation +
                          ' "' +
                          s.toMiddleware +
                          '" middleware.'
                      );
                    t.splice(a, 1);
                  }
                  n.add(o);
                }
                t.push(s);
              },
              clone: function () {
                return r(Qt());
              },
              use: function (e) {
                e.applyToStack(i);
              },
              remove: function (r) {
                return 'string' == typeof r
                  ? (function (r) {
                      var o = !1,
                        i = function (e) {
                          return (
                            !e.name ||
                            e.name !== r ||
                            ((o = !0), n.delete(r), !1)
                          );
                        };
                      return (e = e.filter(i)), (t = t.filter(i)), o;
                    })(r)
                  : (function (r) {
                      var o = !1,
                        i = function (e) {
                          return (
                            e.middleware !== r ||
                            ((o = !0), e.name && n.delete(e.name), !1)
                          );
                        };
                      return (e = e.filter(i)), (t = t.filter(i)), o;
                    })(r);
              },
              removeByTag: function (r) {
                var o = !1,
                  i = function (e) {
                    var t = e.tags,
                      i = e.name;
                    return (
                      !t || !t.includes(r) || (i && n.delete(i), (o = !0), !1)
                    );
                  };
                return (e = e.filter(i)), (t = t.filter(i)), o;
              },
              concat: function (e) {
                var t = r(Qt());
                return t.use(e), t;
              },
              applyToStack: r,
              resolve: function (n, r) {
                var i, s;
                try {
                  for (
                    var a = (function (e) {
                        var t = 'function' == typeof Symbol && Symbol.iterator,
                          n = t && e[t],
                          r = 0;
                        if (n) return n.call(e);
                        if (e && 'number' == typeof e.length)
                          return {
                            next: function () {
                              return (
                                e && r >= e.length && (e = void 0),
                                { value: e && e[r++], done: !e }
                              );
                            },
                          };
                        throw new TypeError(
                          t
                            ? 'Object is not iterable.'
                            : 'Symbol.iterator is not defined.'
                        );
                      })(
                        (function () {
                          var n,
                            r = [],
                            i = [],
                            s = {};
                          return (
                            e.forEach(function (e) {
                              var t = $t($t({}, e), { before: [], after: [] });
                              t.name && (s[t.name] = t), r.push(t);
                            }),
                            t.forEach(function (e) {
                              var t = $t($t({}, e), { before: [], after: [] });
                              t.name && (s[t.name] = t), i.push(t);
                            }),
                            i.forEach(function (e) {
                              if (e.toMiddleware) {
                                var t = s[e.toMiddleware];
                                if (void 0 === t)
                                  throw new Error(
                                    e.toMiddleware +
                                      ' is not found when adding ' +
                                      (e.name || 'anonymous') +
                                      ' middleware ' +
                                      e.relation +
                                      ' ' +
                                      e.toMiddleware
                                  );
                                'after' === e.relation && t.after.push(e),
                                  'before' === e.relation && t.before.push(e);
                              }
                            }),
                            ((n = r),
                            n.sort(function (e, t) {
                              return (
                                Xt[t.step] - Xt[e.step] ||
                                en[t.priority || 'normal'] -
                                  en[e.priority || 'normal']
                              );
                            }))
                              .map(o)
                              .reduce(function (e, t) {
                                return e.push.apply(e, Zt(t)), e;
                              }, [])
                              .map(function (e) {
                                return e.middleware;
                              })
                          );
                        })().reverse()
                      ),
                      u = a.next();
                    !u.done;
                    u = a.next()
                  )
                    n = (0, u.value)(n, r);
                } catch (e) {
                  i = { error: e };
                } finally {
                  try {
                    u && !u.done && (s = a.return) && s.call(a);
                  } finally {
                    if (i) throw i.error;
                  }
                }
                return n;
              },
            };
          return i;
        },
        Xt = {
          initialize: 5,
          serialize: 4,
          build: 3,
          finalizeRequest: 2,
          deserialize: 1,
        },
        en = { high: 3, normal: 2, low: 1 },
        tn = (function () {
          function e(e) {
            (this.middlewareStack = Qt()), (this.config = e);
          }
          return (
            (e.prototype.send = function (e, t, n) {
              var r = 'function' != typeof t ? t : void 0,
                o = 'function' == typeof t ? t : n,
                i = e.resolveMiddleware(this.middlewareStack, this.config, r);
              if (!o)
                return i(e).then(function (e) {
                  return e.output;
                });
              i(e)
                .then(
                  function (e) {
                    return o(null, e.output);
                  },
                  function (e) {
                    return o(e);
                  }
                )
                .catch(function () {});
            }),
            (e.prototype.destroy = function () {
              this.config.requestHandler.destroy &&
                this.config.requestHandler.destroy();
            }),
            e
          );
        })(),
        nn = function () {
          this.middlewareStack = Qt();
        },
        rn = function (e, t) {
          return (
            (rn =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (e, t) {
                  e.__proto__ = t;
                }) ||
              function (e, t) {
                for (var n in t) t.hasOwnProperty(n) && (e[n] = t[n]);
              }),
            rn(e, t)
          );
        };
      function on(e, t) {
        var n = 'function' == typeof Symbol && e[Symbol.iterator];
        if (!n) return e;
        var r,
          o,
          i = n.call(e),
          s = [];
        try {
          for (; (void 0 === t || t-- > 0) && !(r = i.next()).done; )
            s.push(r.value);
        } catch (e) {
          o = { error: e };
        } finally {
          try {
            r && !r.done && (n = i.return) && n.call(i);
          } finally {
            if (o) throw o.error;
          }
        }
        return s;
      }
      function sn() {
        for (var e = [], t = 0; t < arguments.length; t++)
          e = e.concat(on(arguments[t]));
        return e;
      }
      var an = function () {
        var e = Object.getPrototypeOf(this).constructor,
          t = Function.bind.apply(String, sn([null], arguments)),
          n = new t();
        return Object.setPrototypeOf(n, e.prototype), n;
      };
      (an.prototype = Object.create(String.prototype, {
        constructor: {
          value: an,
          enumerable: !1,
          writable: !0,
          configurable: !0,
        },
      })),
        Object.setPrototypeOf(an, String),
        (function (e) {
          function t() {
            return (null !== e && e.apply(this, arguments)) || this;
          }
          (function (e, t) {
            function n() {
              this.constructor = e;
            }
            rn(e, t),
              (e.prototype =
                null === t
                  ? Object.create(t)
                  : ((n.prototype = t.prototype), new n()));
          })(t, e),
            (t.prototype.deserializeJSON = function () {
              return JSON.parse(e.prototype.toString.call(this));
            }),
            (t.prototype.toJSON = function () {
              return e.prototype.toString.call(this);
            }),
            (t.fromObject = function (e) {
              return e instanceof t
                ? e
                : new t(
                    e instanceof String || 'string' == typeof e
                      ? e
                      : JSON.stringify(e)
                  );
            });
        })(an);
      var un = (function (e) {
          function t(t) {
            var n = e.call(this) || this;
            return (n.input = t), n;
          }
          return (
            se(t, e),
            (t.prototype.resolveMiddleware = function (e, t, n) {
              this.middlewareStack.use(Yt(t, this.serialize, this.deserialize));
              var r = e.concat(this.middlewareStack),
                o = {
                  logger: t.logger,
                  clientName: 'CognitoIdentityClient',
                  commandName: 'GetCredentialsForIdentityCommand',
                  inputFilterSensitiveLog: Pe.filterSensitiveLog,
                  outputFilterSensitiveLog: Te.filterSensitiveLog,
                },
                i = t.requestHandler;
              return r.resolve(function (e) {
                return i.handle(e.request, n || {});
              }, o);
            }),
            (t.prototype.serialize = function (e, t) {
              return (function (e, t) {
                return ft(void 0, void 0, void 0, function () {
                  var n, r;
                  return ht(this, function (o) {
                    return (
                      (n = {
                        'content-type': 'application/x-amz-json-1.1',
                        'x-amz-target':
                          'AWSCognitoIdentityService.GetCredentialsForIdentity',
                      }),
                      (r = JSON.stringify(
                        (function (e, t) {
                          return lt(
                            lt(
                              lt(
                                {},
                                void 0 !== e.CustomRoleArn &&
                                  null !== e.CustomRoleArn && {
                                    CustomRoleArn: e.CustomRoleArn,
                                  }
                              ),
                              void 0 !== e.IdentityId &&
                                null !== e.IdentityId && {
                                  IdentityId: e.IdentityId,
                                }
                            ),
                            void 0 !== e.Logins &&
                              null !== e.Logins && { Logins: Ot(e.Logins, t) }
                          );
                        })(e, t)
                      )),
                      [2, Bt(t, n, '/', void 0, r)]
                    );
                  });
                });
              })(e, t);
            }),
            (t.prototype.deserialize = function (e, t) {
              return (function (e, t) {
                return ft(void 0, void 0, void 0, function () {
                  var n, r, o;
                  return ht(this, function (i) {
                    switch (i.label) {
                      case 0:
                        return e.statusCode >= 300
                          ? [2, yt(e, t)]
                          : [4, Vt(e.body, t)];
                      case 1:
                        return (
                          (n = i.sent()),
                          (r = (function (e, t) {
                            return {
                              Credentials:
                                void 0 !== e.Credentials &&
                                null !== e.Credentials
                                  ? Tt(e.Credentials)
                                  : void 0,
                              IdentityId:
                                void 0 !== e.IdentityId && null !== e.IdentityId
                                  ? e.IdentityId
                                  : void 0,
                            };
                          })(n)),
                          (o = lt({ $metadata: Lt(e) }, r)),
                          [2, Promise.resolve(o)]
                        );
                    }
                  });
                });
              })(e, t);
            }),
            t
          );
        })(nn),
        cn = function (e, t) {
          return (
            (cn =
              Object.setPrototypeOf ||
              ({ __proto__: [] } instanceof Array &&
                function (e, t) {
                  e.__proto__ = t;
                }) ||
              function (e, t) {
                for (var n in t) t.hasOwnProperty(n) && (e[n] = t[n]);
              }),
            cn(e, t)
          );
        },
        ln = (function (e) {
          function t(t, n) {
            void 0 === n && (n = !0);
            var r = e.call(this, t) || this;
            return (r.tryNextLink = n), r;
          }
          return (
            (function (e, t) {
              function n() {
                this.constructor = e;
              }
              cn(e, t),
                (e.prototype =
                  null === t
                    ? Object.create(t)
                    : ((n.prototype = t.prototype), new n()));
            })(t, e),
            t
          );
        })(Error);
      function fn(e) {
        return Promise.all(
          Object.keys(e).reduce(function (t, n) {
            var r = e[n];
            return (
              'string' == typeof r
                ? t.push([n, r])
                : t.push(
                    r().then(function (e) {
                      return [n, e];
                    })
                  ),
              t
            );
          }, [])
        ).then(function (e) {
          return e.reduce(function (e, t) {
            var n = (function (e, t) {
                var n = 'function' == typeof Symbol && e[Symbol.iterator];
                if (!n) return e;
                var r,
                  o,
                  i = n.call(e),
                  s = [];
                try {
                  for (; (void 0 === t || t-- > 0) && !(r = i.next()).done; )
                    s.push(r.value);
                } catch (e) {
                  o = { error: e };
                } finally {
                  try {
                    r && !r.done && (n = i.return) && n.call(i);
                  } finally {
                    if (o) throw o.error;
                  }
                }
                return s;
              })(t, 2),
              r = n[0],
              o = n[1];
            return (e[r] = o), e;
          }, {});
        });
      }
      function hn(e) {
        var t = this;
        return function () {
          return re(t, void 0, void 0, function () {
            var t, n, r, o, i, s, a, u, c, l, f, h, d;
            return oe(this, function (p) {
              switch (p.label) {
                case 0:
                  return (
                    (l = (c = e.client).send),
                    (f = un.bind),
                    (d = {
                      CustomRoleArn: e.customRoleArn,
                      IdentityId: e.identityId,
                    }),
                    e.logins ? [4, fn(e.logins)] : [3, 2]
                  );
                case 1:
                  return (h = p.sent()), [3, 3];
                case 2:
                  (h = void 0), (p.label = 3);
                case 3:
                  return [
                    4,
                    l.apply(c, [
                      new (f.apply(un, [void 0, ((d.Logins = h), d)]))(),
                    ]),
                  ];
                case 4:
                  return (
                    (t = p.sent().Credentials),
                    (n =
                      void 0 === t
                        ? (function () {
                            throw new ln(
                              'Response from Amazon Cognito contained no credentials'
                            );
                          })()
                        : t),
                    (r = n.AccessKeyId),
                    (o =
                      void 0 === r
                        ? (function () {
                            throw new ln(
                              'Response from Amazon Cognito contained no access key ID'
                            );
                          })()
                        : r),
                    (i = n.Expiration),
                    (s = n.SecretKey),
                    (a =
                      void 0 === s
                        ? (function () {
                            throw new ln(
                              'Response from Amazon Cognito contained no secret key'
                            );
                          })()
                        : s),
                    (u = n.SessionToken),
                    [
                      2,
                      {
                        identityId: e.identityId,
                        accessKeyId: o,
                        secretAccessKey: a,
                        sessionToken: u,
                        expiration: i,
                      },
                    ]
                  );
              }
            });
          });
        };
      }
      var dn = (function (e) {
          function t(t) {
            var n = e.call(this) || this;
            return (n.input = t), n;
          }
          return (
            se(t, e),
            (t.prototype.resolveMiddleware = function (e, t, n) {
              this.middlewareStack.use(Yt(t, this.serialize, this.deserialize));
              var r = e.concat(this.middlewareStack),
                o = {
                  logger: t.logger,
                  clientName: 'CognitoIdentityClient',
                  commandName: 'GetIdCommand',
                  inputFilterSensitiveLog: Ue.filterSensitiveLog,
                  outputFilterSensitiveLog: ke.filterSensitiveLog,
                },
                i = t.requestHandler;
              return r.resolve(function (e) {
                return i.handle(e.request, n || {});
              }, o);
            }),
            (t.prototype.serialize = function (e, t) {
              return (function (e, t) {
                return ft(void 0, void 0, void 0, function () {
                  var n, r;
                  return ht(this, function (o) {
                    return (
                      (n = {
                        'content-type': 'application/x-amz-json-1.1',
                        'x-amz-target': 'AWSCognitoIdentityService.GetId',
                      }),
                      (r = JSON.stringify(
                        (function (e, t) {
                          return lt(
                            lt(
                              lt(
                                {},
                                void 0 !== e.AccountId &&
                                  null !== e.AccountId && {
                                    AccountId: e.AccountId,
                                  }
                              ),
                              void 0 !== e.IdentityPoolId &&
                                null !== e.IdentityPoolId && {
                                  IdentityPoolId: e.IdentityPoolId,
                                }
                            ),
                            void 0 !== e.Logins &&
                              null !== e.Logins && { Logins: Ot(e.Logins, t) }
                          );
                        })(e, t)
                      )),
                      [2, Bt(t, n, '/', void 0, r)]
                    );
                  });
                });
              })(e, t);
            }),
            (t.prototype.deserialize = function (e, t) {
              return (function (e, t) {
                return ft(void 0, void 0, void 0, function () {
                  var n, r, o;
                  return ht(this, function (i) {
                    switch (i.label) {
                      case 0:
                        return e.statusCode >= 300
                          ? [2, mt(e, t)]
                          : [4, Vt(e.body, t)];
                      case 1:
                        return (
                          (n = i.sent()),
                          (r = (function (e, t) {
                            return {
                              IdentityId:
                                void 0 !== e.IdentityId && null !== e.IdentityId
                                  ? e.IdentityId
                                  : void 0,
                            };
                          })(n)),
                          (o = lt({ $metadata: Lt(e) }, r)),
                          [2, Promise.resolve(o)]
                        );
                    }
                  });
                });
              })(e, t);
            }),
            t
          );
        })(nn),
        pn = 'IdentityIds',
        gn = (function () {
          function e(e) {
            void 0 === e && (e = 'aws:cognito-identity-ids'), (this.dbName = e);
          }
          return (
            (e.prototype.getItem = function (e) {
              return this.withObjectStore('readonly', function (t) {
                var n = t.get(e);
                return new Promise(function (e) {
                  (n.onerror = function () {
                    return e(null);
                  }),
                    (n.onsuccess = function () {
                      return e(n.result ? n.result.value : null);
                    });
                });
              }).catch(function () {
                return null;
              });
            }),
            (e.prototype.removeItem = function (e) {
              return this.withObjectStore('readwrite', function (t) {
                var n = t.delete(e);
                return new Promise(function (e, t) {
                  (n.onerror = function () {
                    return t(n.error);
                  }),
                    (n.onsuccess = function () {
                      return e();
                    });
                });
              });
            }),
            (e.prototype.setItem = function (e, t) {
              return this.withObjectStore('readwrite', function (n) {
                var r = n.put({ id: e, value: t });
                return new Promise(function (e, t) {
                  (r.onerror = function () {
                    return t(r.error);
                  }),
                    (r.onsuccess = function () {
                      return e();
                    });
                });
              });
            }),
            (e.prototype.getDb = function () {
              var e = self.indexedDB.open(this.dbName, 1);
              return new Promise(function (t, n) {
                (e.onsuccess = function () {
                  t(e.result);
                }),
                  (e.onerror = function () {
                    n(e.error);
                  }),
                  (e.onblocked = function () {
                    n(new Error('Unable to access DB'));
                  }),
                  (e.onupgradeneeded = function () {
                    var t = e.result;
                    (t.onerror = function () {
                      n(new Error('Failed to create object store'));
                    }),
                      t.createObjectStore(pn, { keyPath: 'id' });
                  });
              });
            }),
            (e.prototype.withObjectStore = function (e, t) {
              return this.getDb().then(function (n) {
                var r = n.transaction(pn, e);
                return (
                  (r.oncomplete = function () {
                    return n.close();
                  }),
                  new Promise(function (e, n) {
                    (r.onerror = function () {
                      return n(r.error);
                    }),
                      e(t(r.objectStore(pn)));
                  }).catch(function (e) {
                    throw (n.close(), e);
                  })
                );
              });
            }),
            e
          );
        })(),
        vn = new ((function () {
          function e(e) {
            void 0 === e && (e = {}), (this.store = e);
          }
          return (
            (e.prototype.getItem = function (e) {
              return e in this.store ? this.store[e] : null;
            }),
            (e.prototype.removeItem = function (e) {
              delete this.store[e];
            }),
            (e.prototype.setItem = function (e, t) {
              this.store[e] = t;
            }),
            e
          );
        })())();
      var yn = n(8322);
      function mn(e, t, n, r) {
        return new (n || (n = Promise))(function (o, i) {
          function s(e) {
            try {
              u(r.next(e));
            } catch (e) {
              i(e);
            }
          }
          function a(e) {
            try {
              u(r.throw(e));
            } catch (e) {
              i(e);
            }
          }
          function u(e) {
            var t;
            e.done
              ? o(e.value)
              : ((t = e.value),
                t instanceof n
                  ? t
                  : new n(function (e) {
                      e(t);
                    })).then(s, a);
          }
          u((r = r.apply(e, t || [])).next());
        });
      }
      function bn(e, t) {
        var n,
          r,
          o,
          i,
          s = {
            label: 0,
            sent: function () {
              if (1 & o[0]) throw o[1];
              return o[1];
            },
            trys: [],
            ops: [],
          };
        return (
          (i = { next: a(0), throw: a(1), return: a(2) }),
          'function' == typeof Symbol &&
            (i[Symbol.iterator] = function () {
              return this;
            }),
          i
        );
        function a(i) {
          return function (a) {
            return (function (i) {
              if (n) throw new TypeError('Generator is already executing.');
              for (; s; )
                try {
                  if (
                    ((n = 1),
                    r &&
                      (o =
                        2 & i[0]
                          ? r.return
                          : i[0]
                          ? r.throw || ((o = r.return) && o.call(r), 0)
                          : r.next) &&
                      !(o = o.call(r, i[1])).done)
                  )
                    return o;
                  switch (((r = 0), o && (i = [2 & i[0], o.value]), i[0])) {
                    case 0:
                    case 1:
                      o = i;
                      break;
                    case 4:
                      return s.label++, { value: i[1], done: !1 };
                    case 5:
                      s.label++, (r = i[1]), (i = [0]);
                      continue;
                    case 7:
                      (i = s.ops.pop()), s.trys.pop();
                      continue;
                    default:
                      if (
                        !(
                          (o = (o = s.trys).length > 0 && o[o.length - 1]) ||
                          (6 !== i[0] && 2 !== i[0])
                        )
                      ) {
                        s = 0;
                        continue;
                      }
                      if (3 === i[0] && (!o || (i[1] > o[0] && i[1] < o[3]))) {
                        s.label = i[1];
                        break;
                      }
                      if (6 === i[0] && s.label < o[1]) {
                        (s.label = o[1]), (o = i);
                        break;
                      }
                      if (o && s.label < o[2]) {
                        (s.label = o[2]), s.ops.push(i);
                        break;
                      }
                      o[2] && s.ops.pop(), s.trys.pop();
                      continue;
                  }
                  i = t.call(e, s);
                } catch (e) {
                  (i = [6, e]), (r = 0);
                } finally {
                  n = o = 0;
                }
              if (5 & i[0]) throw i[1];
              return { value: i[0] ? i[1] : void 0, done: !0 };
            })([i, a]);
          };
        }
      }
      for (
        var wn = function (e) {
            return encodeURIComponent(e).replace(/[!'()*]/g, Sn);
          },
          Sn = function (e) {
            return '%' + e.charCodeAt(0).toString(16).toUpperCase();
          },
          _n = (function () {
            function e(e) {
              var t = (void 0 === e ? {} : e).requestTimeout;
              this.requestTimeout = t;
            }
            return (
              (e.prototype.destroy = function () {}),
              (e.prototype.handle = function (e, t) {
                var n = (void 0 === t ? {} : t).abortSignal,
                  r = this.requestTimeout;
                if (null == n ? void 0 : n.aborted) {
                  var o = new Error('Request aborted');
                  return (o.name = 'AbortError'), Promise.reject(o);
                }
                var i = e.path;
                if (e.query) {
                  var s = (function (e) {
                    var t,
                      n,
                      r = [];
                    try {
                      for (
                        var o = (function (e) {
                            var t =
                                'function' == typeof Symbol && Symbol.iterator,
                              n = t && e[t],
                              r = 0;
                            if (n) return n.call(e);
                            if (e && 'number' == typeof e.length)
                              return {
                                next: function () {
                                  return (
                                    e && r >= e.length && (e = void 0),
                                    { value: e && e[r++], done: !e }
                                  );
                                },
                              };
                            throw new TypeError(
                              t
                                ? 'Object is not iterable.'
                                : 'Symbol.iterator is not defined.'
                            );
                          })(Object.keys(e).sort()),
                          i = o.next();
                        !i.done;
                        i = o.next()
                      ) {
                        var s = i.value,
                          a = e[s];
                        if (((s = wn(s)), Array.isArray(a)))
                          for (var u = 0, c = a.length; u < c; u++)
                            r.push(s + '=' + wn(a[u]));
                        else {
                          var l = s;
                          (a || 'string' == typeof a) && (l += '=' + wn(a)),
                            r.push(l);
                        }
                      }
                    } catch (e) {
                      t = { error: e };
                    } finally {
                      try {
                        i && !i.done && (n = o.return) && n.call(o);
                      } finally {
                        if (t) throw t.error;
                      }
                    }
                    return r.join('&');
                  })(e.query);
                  s && (i += '?' + s);
                }
                var a = e.port,
                  u = e.method,
                  c = e.protocol + '//' + e.hostname + (a ? ':' + a : '') + i,
                  l = {
                    body: 'GET' === u || 'HEAD' === u ? void 0 : e.body,
                    headers: new Headers(e.headers),
                    method: u,
                  };
                'undefined' != typeof AbortController && (l.signal = n);
                var f,
                  h = new Request(c, l),
                  d = [
                    fetch(h).then(function (e) {
                      var t,
                        n,
                        r = e.headers,
                        o = {};
                      try {
                        for (
                          var i = (function (e) {
                              var t =
                                  'function' == typeof Symbol &&
                                  Symbol.iterator,
                                n = t && e[t],
                                r = 0;
                              if (n) return n.call(e);
                              if (e && 'number' == typeof e.length)
                                return {
                                  next: function () {
                                    return (
                                      e && r >= e.length && (e = void 0),
                                      { value: e && e[r++], done: !e }
                                    );
                                  },
                                };
                              throw new TypeError(
                                t
                                  ? 'Object is not iterable.'
                                  : 'Symbol.iterator is not defined.'
                              );
                            })(r.entries()),
                            s = i.next();
                          !s.done;
                          s = i.next()
                        ) {
                          var a = s.value;
                          o[a[0]] = a[1];
                        }
                      } catch (e) {
                        t = { error: e };
                      } finally {
                        try {
                          s && !s.done && (n = i.return) && n.call(i);
                        } finally {
                          if (t) throw t.error;
                        }
                      }
                      return void 0 !== e.body
                        ? {
                            response: new dt({
                              headers: o,
                              statusCode: e.status,
                              body: e.body,
                            }),
                          }
                        : e.blob().then(function (t) {
                            return {
                              response: new dt({
                                headers: o,
                                statusCode: e.status,
                                body: t,
                              }),
                            };
                          });
                    }),
                    ((f = r),
                    void 0 === f && (f = 0),
                    new Promise(function (e, t) {
                      f &&
                        setTimeout(function () {
                          var e = new Error(
                            'Request did not complete within ' + f + ' ms'
                          );
                          (e.name = 'TimeoutError'), t(e);
                        }, f);
                    })),
                  ];
                return (
                  n &&
                    d.push(
                      new Promise(function (e, t) {
                        n.onabort = function () {
                          var e = new Error('Request aborted');
                          (e.name = 'AbortError'), t(e);
                        };
                      })
                    ),
                  Promise.race(d)
                );
              }),
              e
            );
          })(),
          An = {},
          En = new Array(64),
          Cn = 0,
          In = 'A'.charCodeAt(0),
          Pn = 'Z'.charCodeAt(0);
        Cn + In <= Pn;
        Cn++
      ) {
        var On = String.fromCharCode(Cn + In);
        (An[On] = Cn), (En[Cn] = On);
      }
      for (
        Cn = 0, In = 'a'.charCodeAt(0), Pn = 'z'.charCodeAt(0);
        Cn + In <= Pn;
        Cn++
      ) {
        On = String.fromCharCode(Cn + In);
        var Tn = Cn + 26;
        (An[On] = Tn), (En[Tn] = On);
      }
      for (Cn = 0; Cn < 10; Cn++)
        (An[Cn.toString(10)] = Cn + 52),
          (On = Cn.toString(10)),
          (Tn = Cn + 52),
          (An[On] = Tn),
          (En[Tn] = On);
      function xn(e) {
        var t = (e.length / 4) * 3;
        '==' === e.substr(-2) ? (t -= 2) : '=' === e.substr(-1) && t--;
        for (
          var n = new ArrayBuffer(t), r = new DataView(n), o = 0;
          o < e.length;
          o += 4
        ) {
          for (var i = 0, s = 0, a = o, u = o + 3; a <= u; a++)
            '=' !== e[a]
              ? ((i |= An[e[a]] << (6 * (u - a))), (s += 6))
              : (i >>= 6);
          var c = (o / 4) * 3;
          i >>= s % 8;
          for (var l = Math.floor(s / 8), f = 0; f < l; f++) {
            var h = 8 * (l - f - 1);
            r.setUint8(c + f, (i & (255 << h)) >> h);
          }
        }
        return new Uint8Array(n);
      }
      function Un(e) {
        return new Promise(function (t, n) {
          var r = new FileReader();
          (r.onloadend = function () {
            var e;
            if (2 !== r.readyState)
              return n(new Error('Reader aborted too early'));
            var o = null !== (e = r.result) && void 0 !== e ? e : '',
              i = o.indexOf(','),
              s = i > -1 ? i + 1 : o.length;
            t(o.substring(s));
          }),
            (r.onabort = function () {
              return n(new Error('Read aborted'));
            }),
            (r.onerror = function () {
              return n(r.error);
            }),
            r.readAsDataURL(e);
        });
      }
      (An['+'] = 62), (En[62] = '+'), (An['/'] = 63), (En[63] = '/');
      var kn = function () {
        return (
          (kn =
            Object.assign ||
            function (e) {
              for (var t, n = 1, r = arguments.length; n < r; n++)
                for (var o in (t = arguments[n]))
                  Object.prototype.hasOwnProperty.call(t, o) && (e[o] = t[o]);
              return e;
            }),
          kn.apply(this, arguments)
        );
      };
      function Mn(e, t, n, r) {
        return new (n || (n = Promise))(function (o, i) {
          function s(e) {
            try {
              u(r.next(e));
            } catch (e) {
              i(e);
            }
          }
          function a(e) {
            try {
              u(r.throw(e));
            } catch (e) {
              i(e);
            }
          }
          function u(e) {
            var t;
            e.done
              ? o(e.value)
              : ((t = e.value),
                t instanceof n
                  ? t
                  : new n(function (e) {
                      e(t);
                    })).then(s, a);
          }
          u((r = r.apply(e, t || [])).next());
        });
      }
      function Rn(e, t) {
        var n,
          r,
          o,
          i,
          s = {
            label: 0,
            sent: function () {
              if (1 & o[0]) throw o[1];
              return o[1];
            },
            trys: [],
            ops: [],
          };
        return (
          (i = { next: a(0), throw: a(1), return: a(2) }),
          'function' == typeof Symbol &&
            (i[Symbol.iterator] = function () {
              return this;
            }),
          i
        );
        function a(i) {
          return function (a) {
            return (function (i) {
              if (n) throw new TypeError('Generator is already executing.');
              for (; s; )
                try {
                  if (
                    ((n = 1),
                    r &&
                      (o =
                        2 & i[0]
                          ? r.return
                          : i[0]
                          ? r.throw || ((o = r.return) && o.call(r), 0)
                          : r.next) &&
                      !(o = o.call(r, i[1])).done)
                  )
                    return o;
                  switch (((r = 0), o && (i = [2 & i[0], o.value]), i[0])) {
                    case 0:
                    case 1:
                      o = i;
                      break;
                    case 4:
                      return s.label++, { value: i[1], done: !1 };
                    case 5:
                      s.label++, (r = i[1]), (i = [0]);
                      continue;
                    case 7:
                      (i = s.ops.pop()), s.trys.pop();
                      continue;
                    default:
                      if (
                        !(
                          (o = (o = s.trys).length > 0 && o[o.length - 1]) ||
                          (6 !== i[0] && 2 !== i[0])
                        )
                      ) {
                        s = 0;
                        continue;
                      }
                      if (3 === i[0] && (!o || (i[1] > o[0] && i[1] < o[3]))) {
                        s.label = i[1];
                        break;
                      }
                      if (6 === i[0] && s.label < o[1]) {
                        (s.label = o[1]), (o = i);
                        break;
                      }
                      if (o && s.label < o[2]) {
                        (s.label = o[2]), s.ops.push(i);
                        break;
                      }
                      o[2] && s.ops.pop(), s.trys.pop();
                      continue;
                  }
                  i = t.call(e, s);
                } catch (e) {
                  (i = [6, e]), (r = 0);
                } finally {
                  n = o = 0;
                }
              if (5 & i[0]) throw i[1];
              return { value: i[0] ? i[1] : void 0, done: !0 };
            })([i, a]);
          };
        }
      }
      function Nn(e, t) {
        var n = 'function' == typeof Symbol && e[Symbol.iterator];
        if (!n) return e;
        var r,
          o,
          i = n.call(e),
          s = [];
        try {
          for (; (void 0 === t || t-- > 0) && !(r = i.next()).done; )
            s.push(r.value);
        } catch (e) {
          o = { error: e };
        } finally {
          try {
            r && !r.done && (n = i.return) && n.call(i);
          } finally {
            if (o) throw o.error;
          }
        }
        return s;
      }
      var Dn = {
          name: 'retryMiddleware',
          tags: ['RETRY'],
          step: 'finalizeRequest',
          priority: 'high',
          override: !0,
        },
        jn = [
          'AuthFailure',
          'InvalidSignatureException',
          'RequestExpired',
          'RequestInTheFuture',
          'RequestTimeTooSkewed',
          'SignatureDoesNotMatch',
        ],
        Fn = [
          'BandwidthLimitExceeded',
          'EC2ThrottledException',
          'LimitExceededException',
          'PriorRequestNotComplete',
          'ProvisionedThroughputExceededException',
          'RequestLimitExceeded',
          'RequestThrottled',
          'RequestThrottledException',
          'SlowDown',
          'ThrottledException',
          'Throttling',
          'ThrottlingException',
          'TooManyRequestsException',
          'TransactionInProgressException',
        ],
        Ln = [
          'AbortError',
          'TimeoutError',
          'RequestTimeout',
          'RequestTimeoutException',
        ],
        Bn = [500, 502, 503, 504],
        Vn = function (e) {
          var t, n;
          return (
            429 ===
              (null === (t = e.$metadata) || void 0 === t
                ? void 0
                : t.httpStatusCode) ||
            Fn.includes(e.name) ||
            1 ==
              (null === (n = e.$retryable) || void 0 === n
                ? void 0
                : n.throttling)
          );
        },
        qn = n(273),
        zn = function (e, t) {
          return Math.floor(Math.min(2e4, Math.random() * Math.pow(2, t) * e));
        },
        Kn = function (e) {
          return (
            !!e &&
            ((function (e) {
              return void 0 !== e.$retryable;
            })(e) ||
              (function (e) {
                return jn.includes(e.name);
              })(e) ||
              Vn(e) ||
              (function (e) {
                var t;
                return (
                  Ln.includes(e.name) ||
                  Bn.includes(
                    (null === (t = e.$metadata) || void 0 === t
                      ? void 0
                      : t.httpStatusCode) || 0
                  )
                );
              })(e))
          );
        },
        Hn = (function () {
          function e(e, t) {
            var n, r, o, i, s, a, u;
            (this.maxAttemptsProvider = e),
              (this.mode = 'standard'),
              (this.retryDecider =
                null !== (n = null == t ? void 0 : t.retryDecider) &&
                void 0 !== n
                  ? n
                  : Kn),
              (this.delayDecider =
                null !== (r = null == t ? void 0 : t.delayDecider) &&
                void 0 !== r
                  ? r
                  : zn),
              (this.retryQuota =
                null !== (o = null == t ? void 0 : t.retryQuota) && void 0 !== o
                  ? o
                  : ((i = 500),
                    (s = 500),
                    (a = function (e) {
                      return 'TimeoutError' === e.name ? 10 : 5;
                    }),
                    (u = function (e) {
                      return a(e) <= s;
                    }),
                    Object.freeze({
                      hasRetryTokens: u,
                      retrieveRetryTokens: function (e) {
                        if (!u(e)) throw new Error('No retry token available');
                        var t = a(e);
                        return (s -= t), t;
                      },
                      releaseRetryTokens: function (e) {
                        (s += null != e ? e : 1), (s = Math.min(s, i));
                      },
                    })));
          }
          return (
            (e.prototype.shouldRetry = function (e, t, n) {
              return (
                t < n &&
                this.retryDecider(e) &&
                this.retryQuota.hasRetryTokens(e)
              );
            }),
            (e.prototype.getMaxAttempts = function () {
              return Mn(this, void 0, void 0, function () {
                var e;
                return Rn(this, function (t) {
                  switch (t.label) {
                    case 0:
                      return (
                        t.trys.push([0, 2, , 3]),
                        [4, this.maxAttemptsProvider()]
                      );
                    case 1:
                      return (e = t.sent()), [3, 3];
                    case 2:
                      return t.sent(), (e = 3), [3, 3];
                    case 3:
                      return [2, e];
                  }
                });
              });
            }),
            (e.prototype.retry = function (e, t) {
              return Mn(this, void 0, void 0, function () {
                var n, r, o, i, s, a, u, c;
                return Rn(this, function (l) {
                  switch (l.label) {
                    case 0:
                      return (r = 0), (o = 0), [4, this.getMaxAttempts()];
                    case 1:
                      (i = l.sent()),
                        (s = t.request),
                        vt.isInstance(s) &&
                          (s.headers['amz-sdk-invocation-id'] = (0, qn.v4)()),
                        (a = function () {
                          var a, c, l, f, h;
                          return Rn(this, function (d) {
                            switch (d.label) {
                              case 0:
                                return (
                                  d.trys.push([0, 2, , 5]),
                                  vt.isInstance(s) &&
                                    (s.headers['amz-sdk-request'] =
                                      'attempt=' + (r + 1) + '; max=' + i),
                                  [4, e(t)]
                                );
                              case 1:
                                return (
                                  (a = d.sent()),
                                  (c = a.response),
                                  (l = a.output),
                                  u.retryQuota.releaseRetryTokens(n),
                                  (l.$metadata.attempts = r + 1),
                                  (l.$metadata.totalRetryDelay = o),
                                  [2, { value: { response: c, output: l } }]
                                );
                              case 2:
                                return (
                                  (f = d.sent()),
                                  r++,
                                  u.shouldRetry(f, r, i)
                                    ? ((n =
                                        u.retryQuota.retrieveRetryTokens(f)),
                                      (h = u.delayDecider(
                                        Vn(f) ? 500 : 100,
                                        r
                                      )),
                                      (o += h),
                                      [
                                        4,
                                        new Promise(function (e) {
                                          return setTimeout(e, h);
                                        }),
                                      ])
                                    : [3, 4]
                                );
                              case 3:
                                return d.sent(), [2, 'continue'];
                              case 4:
                                throw (
                                  (f.$metadata || (f.$metadata = {}),
                                  (f.$metadata.attempts = r),
                                  (f.$metadata.totalRetryDelay = o),
                                  f)
                                );
                              case 5:
                                return [2];
                            }
                          });
                        }),
                        (u = this),
                        (l.label = 2);
                    case 2:
                      return [5, a()];
                    case 3:
                      return 'object' == typeof (c = l.sent())
                        ? [2, c.value]
                        : [3, 2];
                    case 4:
                      return [2];
                  }
                });
              });
            }),
            e
          );
        })();
      var Wn = n(7160),
        Gn = n.n(Wn),
        Yn = 'cognito-identity.{region}.amazonaws.com',
        $n = new Set([
          'af-south-1',
          'ap-east-1',
          'ap-northeast-1',
          'ap-northeast-2',
          'ap-south-1',
          'ap-southeast-1',
          'ap-southeast-2',
          'ca-central-1',
          'eu-central-1',
          'eu-north-1',
          'eu-south-1',
          'eu-west-1',
          'eu-west-2',
          'eu-west-3',
          'me-south-1',
          'sa-east-1',
          'us-east-1',
          'us-east-2',
          'us-west-1',
          'us-west-2',
        ]),
        Jn = new Set(['cn-north-1', 'cn-northwest-1']),
        Zn = new Set(['us-iso-east-1']),
        Qn = new Set(['us-isob-east-1']),
        Xn = new Set(['us-gov-east-1', 'us-gov-west-1']);
      function er(e, t) {
        var n = 'function' == typeof Symbol && e[Symbol.iterator];
        if (!n) return e;
        var r,
          o,
          i = n.call(e),
          s = [];
        try {
          for (; (void 0 === t || t-- > 0) && !(r = i.next()).done; )
            s.push(r.value);
        } catch (e) {
          o = { error: e };
        } finally {
          try {
            r && !r.done && (n = i.return) && n.call(i);
          } finally {
            if (o) throw o.error;
          }
        }
        return s;
      }
      var tr,
        nr,
        rr,
        or = {
          apiVersion: '2014-06-30',
          disableHostPrefix: !1,
          logger: {},
          regionInfoProvider: function (e, t) {
            var n = void 0;
            switch (e) {
              case 'ap-northeast-1':
                n = {
                  hostname: 'cognito-identity.ap-northeast-1.amazonaws.com',
                  partition: 'aws',
                };
                break;
              case 'ap-northeast-2':
                n = {
                  hostname: 'cognito-identity.ap-northeast-2.amazonaws.com',
                  partition: 'aws',
                };
                break;
              case 'ap-south-1':
                n = {
                  hostname: 'cognito-identity.ap-south-1.amazonaws.com',
                  partition: 'aws',
                };
                break;
              case 'ap-southeast-1':
                n = {
                  hostname: 'cognito-identity.ap-southeast-1.amazonaws.com',
                  partition: 'aws',
                };
                break;
              case 'ap-southeast-2':
                n = {
                  hostname: 'cognito-identity.ap-southeast-2.amazonaws.com',
                  partition: 'aws',
                };
                break;
              case 'ca-central-1':
                n = {
                  hostname: 'cognito-identity.ca-central-1.amazonaws.com',
                  partition: 'aws',
                };
                break;
              case 'cn-north-1':
                n = {
                  hostname: 'cognito-identity.cn-north-1.amazonaws.com.cn',
                  partition: 'aws-cn',
                };
                break;
              case 'eu-central-1':
                n = {
                  hostname: 'cognito-identity.eu-central-1.amazonaws.com',
                  partition: 'aws',
                };
                break;
              case 'eu-north-1':
                n = {
                  hostname: 'cognito-identity.eu-north-1.amazonaws.com',
                  partition: 'aws',
                };
                break;
              case 'eu-west-1':
                n = {
                  hostname: 'cognito-identity.eu-west-1.amazonaws.com',
                  partition: 'aws',
                };
                break;
              case 'eu-west-2':
                n = {
                  hostname: 'cognito-identity.eu-west-2.amazonaws.com',
                  partition: 'aws',
                };
                break;
              case 'eu-west-3':
                n = {
                  hostname: 'cognito-identity.eu-west-3.amazonaws.com',
                  partition: 'aws',
                };
                break;
              case 'fips-us-east-1':
                n = {
                  hostname: 'cognito-identity-fips.us-east-1.amazonaws.com',
                  partition: 'aws',
                  signingRegion: 'us-east-1',
                };
                break;
              case 'fips-us-east-2':
                n = {
                  hostname: 'cognito-identity-fips.us-east-2.amazonaws.com',
                  partition: 'aws',
                  signingRegion: 'us-east-2',
                };
                break;
              case 'fips-us-gov-west-1':
                n = {
                  hostname: 'cognito-identity-fips.us-gov-west-1.amazonaws.com',
                  partition: 'aws-us-gov',
                  signingRegion: 'us-gov-west-1',
                };
                break;
              case 'fips-us-west-2':
                n = {
                  hostname: 'cognito-identity-fips.us-west-2.amazonaws.com',
                  partition: 'aws',
                  signingRegion: 'us-west-2',
                };
                break;
              case 'sa-east-1':
                n = {
                  hostname: 'cognito-identity.sa-east-1.amazonaws.com',
                  partition: 'aws',
                };
                break;
              case 'us-east-1':
                n = {
                  hostname: 'cognito-identity.us-east-1.amazonaws.com',
                  partition: 'aws',
                };
                break;
              case 'us-east-2':
                n = {
                  hostname: 'cognito-identity.us-east-2.amazonaws.com',
                  partition: 'aws',
                };
                break;
              case 'us-gov-west-1':
                n = {
                  hostname: 'cognito-identity.us-gov-west-1.amazonaws.com',
                  partition: 'aws-us-gov',
                };
                break;
              case 'us-west-1':
                n = {
                  hostname: 'cognito-identity.us-west-1.amazonaws.com',
                  partition: 'aws',
                };
                break;
              case 'us-west-2':
                n = {
                  hostname: 'cognito-identity.us-west-2.amazonaws.com',
                  partition: 'aws',
                };
                break;
              default:
                $n.has(e) &&
                  (n = {
                    hostname: Yn.replace('{region}', e),
                    partition: 'aws',
                  }),
                  Jn.has(e) &&
                    (n = {
                      hostname:
                        'cognito-identity.{region}.amazonaws.com.cn'.replace(
                          '{region}',
                          e
                        ),
                      partition: 'aws-cn',
                    }),
                  Zn.has(e) &&
                    (n = {
                      hostname: 'cognito-identity.{region}.c2s.ic.gov'.replace(
                        '{region}',
                        e
                      ),
                      partition: 'aws-iso',
                    }),
                  Qn.has(e) &&
                    (n = {
                      hostname:
                        'cognito-identity.{region}.sc2s.sgov.gov'.replace(
                          '{region}',
                          e
                        ),
                      partition: 'aws-iso-b',
                    }),
                  Xn.has(e) &&
                    (n = {
                      hostname:
                        'cognito-identity.{region}.amazonaws.com'.replace(
                          '{region}',
                          e
                        ),
                      partition: 'aws-us-gov',
                    }),
                  void 0 === n &&
                    (n = {
                      hostname: Yn.replace('{region}', e),
                      partition: 'aws',
                    });
            }
            return Promise.resolve(
              lt({ signingService: 'cognito-identity' }, n)
            );
          },
          serviceId: 'Cognito Identity',
          urlParser: function (e) {
            var t,
              n = new URL(e),
              r = n.hostname,
              o = n.pathname,
              i = n.port,
              s = n.protocol,
              a = n.search;
            return (
              a &&
                (t = (function (e) {
                  var t,
                    n,
                    r = {};
                  if ((e = e.replace(/^\?/, '')))
                    try {
                      for (
                        var o = (function (e) {
                            var t =
                                'function' == typeof Symbol && Symbol.iterator,
                              n = t && e[t],
                              r = 0;
                            if (n) return n.call(e);
                            if (e && 'number' == typeof e.length)
                              return {
                                next: function () {
                                  return (
                                    e && r >= e.length && (e = void 0),
                                    { value: e && e[r++], done: !e }
                                  );
                                },
                              };
                            throw new TypeError(
                              t
                                ? 'Object is not iterable.'
                                : 'Symbol.iterator is not defined.'
                            );
                          })(e.split('&')),
                          i = o.next();
                        !i.done;
                        i = o.next()
                      ) {
                        var s = er(i.value.split('='), 2),
                          a = s[0],
                          u = s[1],
                          c = void 0 === u ? null : u;
                        (a = decodeURIComponent(a)),
                          c && (c = decodeURIComponent(c)),
                          a in r
                            ? Array.isArray(r[a])
                              ? r[a].push(c)
                              : (r[a] = [r[a], c])
                            : (r[a] = c);
                      }
                    } catch (e) {
                      t = { error: e };
                    } finally {
                      try {
                        i && !i.done && (n = o.return) && n.call(o);
                      } finally {
                        if (t) throw t.error;
                      }
                    }
                  return r;
                })(a)),
              {
                hostname: r,
                port: i ? parseInt(i) : void 0,
                protocol: s,
                path: o,
                query: t,
              }
            );
          },
        },
        ir = lt(lt({}, or), {
          runtime: 'browser',
          base64Decoder: xn,
          base64Encoder: function (e) {
            for (var t = '', n = 0; n < e.length; n += 3) {
              for (
                var r = 0, o = 0, i = n, s = Math.min(n + 3, e.length);
                i < s;
                i++
              )
                (r |= e[i] << (8 * (s - i - 1))), (o += 8);
              var a = Math.ceil(o / 6);
              r <<= 6 * a - o;
              for (var u = 1; u <= a; u++) {
                var c = 6 * (a - u);
                t += En[(r & (63 << c)) >> c];
              }
              t += '=='.slice(0, 4 - a);
            }
            return t;
          },
          bodyLengthChecker: function (e) {
            if ('string' == typeof e) {
              for (var t = e.length, n = t - 1; n >= 0; n--) {
                var r = e.charCodeAt(n);
                r > 127 && r <= 2047 ? t++ : r > 2047 && r <= 65535 && (t += 2);
              }
              return t;
            }
            return 'number' == typeof e.byteLength
              ? e.byteLength
              : 'number' == typeof e.size
              ? e.size
              : void 0;
          },
          credentialDefaultProvider: function (e) {
            return function () {
              return Promise.reject(new Error('Credential is missing'));
            };
          },
          defaultUserAgentProvider:
            ((tr = { serviceId: or.serviceId, clientVersion: '3.6.1' }),
            (nr = tr.serviceId),
            (rr = tr.clientVersion),
            function () {
              return (
                (e = void 0),
                (t = void 0),
                (r = function () {
                  var e, t, n, r, o, i, s, a, u;
                  return (function (e, t) {
                    var n,
                      r,
                      o,
                      i,
                      s = {
                        label: 0,
                        sent: function () {
                          if (1 & o[0]) throw o[1];
                          return o[1];
                        },
                        trys: [],
                        ops: [],
                      };
                    return (
                      (i = { next: a(0), throw: a(1), return: a(2) }),
                      'function' == typeof Symbol &&
                        (i[Symbol.iterator] = function () {
                          return this;
                        }),
                      i
                    );
                    function a(i) {
                      return function (a) {
                        return (function (i) {
                          if (n)
                            throw new TypeError(
                              'Generator is already executing.'
                            );
                          for (; s; )
                            try {
                              if (
                                ((n = 1),
                                r &&
                                  (o =
                                    2 & i[0]
                                      ? r.return
                                      : i[0]
                                      ? r.throw ||
                                        ((o = r.return) && o.call(r), 0)
                                      : r.next) &&
                                  !(o = o.call(r, i[1])).done)
                              )
                                return o;
                              switch (
                                ((r = 0), o && (i = [2 & i[0], o.value]), i[0])
                              ) {
                                case 0:
                                case 1:
                                  o = i;
                                  break;
                                case 4:
                                  return s.label++, { value: i[1], done: !1 };
                                case 5:
                                  s.label++, (r = i[1]), (i = [0]);
                                  continue;
                                case 7:
                                  (i = s.ops.pop()), s.trys.pop();
                                  continue;
                                default:
                                  if (
                                    !(
                                      (o =
                                        (o = s.trys).length > 0 &&
                                        o[o.length - 1]) ||
                                      (6 !== i[0] && 2 !== i[0])
                                    )
                                  ) {
                                    s = 0;
                                    continue;
                                  }
                                  if (
                                    3 === i[0] &&
                                    (!o || (i[1] > o[0] && i[1] < o[3]))
                                  ) {
                                    s.label = i[1];
                                    break;
                                  }
                                  if (6 === i[0] && s.label < o[1]) {
                                    (s.label = o[1]), (o = i);
                                    break;
                                  }
                                  if (o && s.label < o[2]) {
                                    (s.label = o[2]), s.ops.push(i);
                                    break;
                                  }
                                  o[2] && s.ops.pop(), s.trys.pop();
                                  continue;
                              }
                              i = t.call(e, s);
                            } catch (e) {
                              (i = [6, e]), (r = 0);
                            } finally {
                              n = o = 0;
                            }
                          if (5 & i[0]) throw i[1];
                          return { value: i[0] ? i[1] : void 0, done: !0 };
                        })([i, a]);
                      };
                    }
                  })(this, function (c) {
                    return (
                      (e = (
                        null ===
                          (n =
                            null === window || void 0 === window
                              ? void 0
                              : window.navigator) || void 0 === n
                          ? void 0
                          : n.userAgent
                      )
                        ? Gn().parse(window.navigator.userAgent)
                        : void 0),
                      (t = [
                        ['aws-sdk-js', rr],
                        [
                          'os/' +
                            ((null === (r = null == e ? void 0 : e.os) ||
                            void 0 === r
                              ? void 0
                              : r.name) || 'other'),
                          null === (o = null == e ? void 0 : e.os) ||
                          void 0 === o
                            ? void 0
                            : o.version,
                        ],
                        ['lang/js'],
                        [
                          'md/browser',
                          (null !==
                            (s =
                              null === (i = null == e ? void 0 : e.browser) ||
                              void 0 === i
                                ? void 0
                                : i.name) && void 0 !== s
                            ? s
                            : 'unknown') +
                            '_' +
                            (null !==
                              (u =
                                null === (a = null == e ? void 0 : e.browser) ||
                                void 0 === a
                                  ? void 0
                                  : a.version) && void 0 !== u
                              ? u
                              : 'unknown'),
                        ],
                      ]),
                      nr && t.push(['api/' + nr, rr]),
                      [2, t]
                    );
                  });
                }),
                new ((n = void 0) || (n = Promise))(function (o, i) {
                  function s(e) {
                    try {
                      u(r.next(e));
                    } catch (e) {
                      i(e);
                    }
                  }
                  function a(e) {
                    try {
                      u(r.throw(e));
                    } catch (e) {
                      i(e);
                    }
                  }
                  function u(e) {
                    var t;
                    e.done
                      ? o(e.value)
                      : ((t = e.value),
                        t instanceof n
                          ? t
                          : new n(function (e) {
                              e(t);
                            })).then(s, a);
                  }
                  u((r = r.apply(e, t || [])).next());
                })
              );
              var e, t, n, r;
            }),
          maxAttempts: 3,
          region:
            ('Region is missing',
            function () {
              return Promise.reject('Region is missing');
            }),
          requestHandler: new _n(),
          sha256: yn.Sha256,
          streamCollector: function (e) {
            return 'function' == typeof Blob && e instanceof Blob
              ? (function (e) {
                  return mn(this, void 0, void 0, function () {
                    var t, n;
                    return bn(this, function (r) {
                      switch (r.label) {
                        case 0:
                          return [4, Un(e)];
                        case 1:
                          return (
                            (t = r.sent()), (n = xn(t)), [2, new Uint8Array(n)]
                          );
                      }
                    });
                  });
                })(e)
              : (function (e) {
                  return mn(this, void 0, void 0, function () {
                    var t, n, r, o, i, s, a;
                    return bn(this, function (u) {
                      switch (u.label) {
                        case 0:
                          (t = new Uint8Array(0)),
                            (n = e.getReader()),
                            (r = !1),
                            (u.label = 1);
                        case 1:
                          return r ? [3, 3] : [4, n.read()];
                        case 2:
                          return (
                            (o = u.sent()),
                            (i = o.done),
                            (s = o.value) &&
                              ((a = t),
                              (t = new Uint8Array(a.length + s.length)).set(a),
                              t.set(s, a.length)),
                            (r = i),
                            [3, 1]
                          );
                        case 3:
                          return [2, t];
                      }
                    });
                  });
                })(e);
          },
          utf8Decoder: function (e) {
            return 'function' == typeof TextEncoder
              ? (function (e) {
                  return new TextEncoder().encode(e);
                })(e)
              : (function (e) {
                  for (var t = [], n = 0, r = e.length; n < r; n++) {
                    var o = e.charCodeAt(n);
                    if (o < 128) t.push(o);
                    else if (o < 2048) t.push((o >> 6) | 192, (63 & o) | 128);
                    else if (
                      n + 1 < e.length &&
                      55296 == (64512 & o) &&
                      56320 == (64512 & e.charCodeAt(n + 1))
                    ) {
                      var i =
                        65536 + ((1023 & o) << 10) + (1023 & e.charCodeAt(++n));
                      t.push(
                        (i >> 18) | 240,
                        ((i >> 12) & 63) | 128,
                        ((i >> 6) & 63) | 128,
                        (63 & i) | 128
                      );
                    } else
                      t.push(
                        (o >> 12) | 224,
                        ((o >> 6) & 63) | 128,
                        (63 & o) | 128
                      );
                  }
                  return Uint8Array.from(t);
                })(e);
          },
          utf8Encoder: function (e) {
            return 'function' == typeof TextDecoder
              ? (function (e) {
                  return new TextDecoder('utf-8').decode(e);
                })(e)
              : (function (e) {
                  for (var t = '', n = 0, r = e.length; n < r; n++) {
                    var o = e[n];
                    if (o < 128) t += String.fromCharCode(o);
                    else if (192 <= o && o < 224) {
                      var i = e[++n];
                      t += String.fromCharCode(((31 & o) << 6) | (63 & i));
                    } else if (240 <= o && o < 365) {
                      var s =
                        '%' +
                        [o, e[++n], e[++n], e[++n]]
                          .map(function (e) {
                            return e.toString(16);
                          })
                          .join('%');
                      t += decodeURIComponent(s);
                    } else
                      t += String.fromCharCode(
                        ((15 & o) << 12) | ((63 & e[++n]) << 6) | (63 & e[++n])
                      );
                  }
                  return t;
                })(e);
          },
        }),
        sr = function () {
          return (
            (sr =
              Object.assign ||
              function (e) {
                for (var t, n = 1, r = arguments.length; n < r; n++)
                  for (var o in (t = arguments[n]))
                    Object.prototype.hasOwnProperty.call(t, o) && (e[o] = t[o]);
                return e;
              }),
            sr.apply(this, arguments)
          );
        };
      var ar = function (e) {
          var t = e.endpoint,
            n = e.urlParser;
          if ('string' == typeof t) {
            var r = Promise.resolve(n(t));
            return function () {
              return r;
            };
          }
          if ('object' == typeof t) {
            var o = Promise.resolve(t);
            return function () {
              return o;
            };
          }
          return t;
        },
        ur = function (e) {
          return (
            (t = void 0),
            (n = void 0),
            (o = function () {
              var t, n, r, o, i;
              return (function (e, t) {
                var n,
                  r,
                  o,
                  i,
                  s = {
                    label: 0,
                    sent: function () {
                      if (1 & o[0]) throw o[1];
                      return o[1];
                    },
                    trys: [],
                    ops: [],
                  };
                return (
                  (i = { next: a(0), throw: a(1), return: a(2) }),
                  'function' == typeof Symbol &&
                    (i[Symbol.iterator] = function () {
                      return this;
                    }),
                  i
                );
                function a(i) {
                  return function (a) {
                    return (function (i) {
                      if (n)
                        throw new TypeError('Generator is already executing.');
                      for (; s; )
                        try {
                          if (
                            ((n = 1),
                            r &&
                              (o =
                                2 & i[0]
                                  ? r.return
                                  : i[0]
                                  ? r.throw || ((o = r.return) && o.call(r), 0)
                                  : r.next) &&
                              !(o = o.call(r, i[1])).done)
                          )
                            return o;
                          switch (
                            ((r = 0), o && (i = [2 & i[0], o.value]), i[0])
                          ) {
                            case 0:
                            case 1:
                              o = i;
                              break;
                            case 4:
                              return s.label++, { value: i[1], done: !1 };
                            case 5:
                              s.label++, (r = i[1]), (i = [0]);
                              continue;
                            case 7:
                              (i = s.ops.pop()), s.trys.pop();
                              continue;
                            default:
                              if (
                                !(
                                  (o =
                                    (o = s.trys).length > 0 &&
                                    o[o.length - 1]) ||
                                  (6 !== i[0] && 2 !== i[0])
                                )
                              ) {
                                s = 0;
                                continue;
                              }
                              if (
                                3 === i[0] &&
                                (!o || (i[1] > o[0] && i[1] < o[3]))
                              ) {
                                s.label = i[1];
                                break;
                              }
                              if (6 === i[0] && s.label < o[1]) {
                                (s.label = o[1]), (o = i);
                                break;
                              }
                              if (o && s.label < o[2]) {
                                (s.label = o[2]), s.ops.push(i);
                                break;
                              }
                              o[2] && s.ops.pop(), s.trys.pop();
                              continue;
                          }
                          i = t.call(e, s);
                        } catch (e) {
                          (i = [6, e]), (r = 0);
                        } finally {
                          n = o = 0;
                        }
                      if (5 & i[0]) throw i[1];
                      return { value: i[0] ? i[1] : void 0, done: !0 };
                    })([i, a]);
                  };
                }
              })(this, function (s) {
                switch (s.label) {
                  case 0:
                    return (
                      (t = e.tls), (n = void 0 === t || t), [4, e.region()]
                    );
                  case 1:
                    if (
                      ((r = s.sent()),
                      !new RegExp(
                        /^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9])$/
                      ).test(r))
                    )
                      throw new Error('Invalid region in client config');
                    return [4, e.regionInfoProvider(r)];
                  case 2:
                    if (
                      !(o = (null !== (i = s.sent()) && void 0 !== i ? i : {})
                        .hostname)
                    )
                      throw new Error(
                        'Cannot resolve hostname from client config'
                      );
                    return [
                      2,
                      e.urlParser((n ? 'https:' : 'http:') + '//' + o),
                    ];
                }
              });
            }),
            new ((r = void 0) || (r = Promise))(function (e, i) {
              function s(e) {
                try {
                  u(o.next(e));
                } catch (e) {
                  i(e);
                }
              }
              function a(e) {
                try {
                  u(o.throw(e));
                } catch (e) {
                  i(e);
                }
              }
              function u(t) {
                var n;
                t.done
                  ? e(t.value)
                  : ((n = t.value),
                    n instanceof r
                      ? n
                      : new r(function (e) {
                          e(n);
                        })).then(s, a);
              }
              u((o = o.apply(t, n || [])).next());
            })
          );
          var t, n, r, o;
        },
        cr = function (e) {
          if ('string' == typeof e) {
            var t = Promise.resolve(e);
            return function () {
              return t;
            };
          }
          return e;
        },
        lr = function () {
          return (
            (lr =
              Object.assign ||
              function (e) {
                for (var t, n = 1, r = arguments.length; n < r; n++)
                  for (var o in (t = arguments[n]))
                    Object.prototype.hasOwnProperty.call(t, o) && (e[o] = t[o]);
                return e;
              }),
            lr.apply(this, arguments)
          );
        };
      var fr = {
          step: 'build',
          tags: ['SET_CONTENT_LENGTH', 'CONTENT_LENGTH'],
          name: 'contentLengthMiddleware',
          override: !0,
        },
        hr = function (e) {
          return {
            applyToStack: function (t) {
              t.add(
                (function (e) {
                  var t = this;
                  return function (n) {
                    return function (r) {
                      return (
                        (o = t),
                        (i = void 0),
                        (a = function () {
                          var t, o, i, s, a;
                          return (function (e, t) {
                            var n,
                              r,
                              o,
                              i,
                              s = {
                                label: 0,
                                sent: function () {
                                  if (1 & o[0]) throw o[1];
                                  return o[1];
                                },
                                trys: [],
                                ops: [],
                              };
                            return (
                              (i = { next: a(0), throw: a(1), return: a(2) }),
                              'function' == typeof Symbol &&
                                (i[Symbol.iterator] = function () {
                                  return this;
                                }),
                              i
                            );
                            function a(i) {
                              return function (a) {
                                return (function (i) {
                                  if (n)
                                    throw new TypeError(
                                      'Generator is already executing.'
                                    );
                                  for (; s; )
                                    try {
                                      if (
                                        ((n = 1),
                                        r &&
                                          (o =
                                            2 & i[0]
                                              ? r.return
                                              : i[0]
                                              ? r.throw ||
                                                ((o = r.return) && o.call(r), 0)
                                              : r.next) &&
                                          !(o = o.call(r, i[1])).done)
                                      )
                                        return o;
                                      switch (
                                        ((r = 0),
                                        o && (i = [2 & i[0], o.value]),
                                        i[0])
                                      ) {
                                        case 0:
                                        case 1:
                                          o = i;
                                          break;
                                        case 4:
                                          return (
                                            s.label++, { value: i[1], done: !1 }
                                          );
                                        case 5:
                                          s.label++, (r = i[1]), (i = [0]);
                                          continue;
                                        case 7:
                                          (i = s.ops.pop()), s.trys.pop();
                                          continue;
                                        default:
                                          if (
                                            !(
                                              (o =
                                                (o = s.trys).length > 0 &&
                                                o[o.length - 1]) ||
                                              (6 !== i[0] && 2 !== i[0])
                                            )
                                          ) {
                                            s = 0;
                                            continue;
                                          }
                                          if (
                                            3 === i[0] &&
                                            (!o || (i[1] > o[0] && i[1] < o[3]))
                                          ) {
                                            s.label = i[1];
                                            break;
                                          }
                                          if (6 === i[0] && s.label < o[1]) {
                                            (s.label = o[1]), (o = i);
                                            break;
                                          }
                                          if (o && s.label < o[2]) {
                                            (s.label = o[2]), s.ops.push(i);
                                            break;
                                          }
                                          o[2] && s.ops.pop(), s.trys.pop();
                                          continue;
                                      }
                                      i = t.call(e, s);
                                    } catch (e) {
                                      (i = [6, e]), (r = 0);
                                    } finally {
                                      n = o = 0;
                                    }
                                  if (5 & i[0]) throw i[1];
                                  return {
                                    value: i[0] ? i[1] : void 0,
                                    done: !0,
                                  };
                                })([i, a]);
                              };
                            }
                          })(this, function (u) {
                            return (
                              (t = r.request),
                              vt.isInstance(t) &&
                                ((o = t.body),
                                (i = t.headers),
                                o &&
                                  -1 ===
                                    Object.keys(i)
                                      .map(function (e) {
                                        return e.toLowerCase();
                                      })
                                      .indexOf('content-length') &&
                                  void 0 !== (s = e(o)) &&
                                  (t.headers = lr(
                                    lr({}, t.headers),
                                    (((a = {})['content-length'] = String(s)),
                                    a)
                                  ))),
                              [2, n(lr(lr({}, r), { request: t }))]
                            );
                          });
                        }),
                        new ((s = void 0) || (s = Promise))(function (e, t) {
                          function n(e) {
                            try {
                              u(a.next(e));
                            } catch (e) {
                              t(e);
                            }
                          }
                          function r(e) {
                            try {
                              u(a.throw(e));
                            } catch (e) {
                              t(e);
                            }
                          }
                          function u(t) {
                            var o;
                            t.done
                              ? e(t.value)
                              : ((o = t.value),
                                o instanceof s
                                  ? o
                                  : new s(function (e) {
                                      e(o);
                                    })).then(n, r);
                          }
                          u((a = a.apply(o, i || [])).next());
                        })
                      );
                      var o, i, s, a;
                    };
                  };
                })(e.bodyLengthChecker),
                fr
              );
            },
          };
        };
      var dr = {
          name: 'hostHeaderMiddleware',
          step: 'build',
          priority: 'low',
          tags: ['HOST'],
          override: !0,
        },
        pr = function (e) {
          return {
            applyToStack: function (t) {
              t.add(
                (function (e) {
                  return function (t) {
                    return function (n) {
                      return (
                        (r = void 0),
                        (o = void 0),
                        (s = function () {
                          var r, o;
                          return (function (e, t) {
                            var n,
                              r,
                              o,
                              i,
                              s = {
                                label: 0,
                                sent: function () {
                                  if (1 & o[0]) throw o[1];
                                  return o[1];
                                },
                                trys: [],
                                ops: [],
                              };
                            return (
                              (i = { next: a(0), throw: a(1), return: a(2) }),
                              'function' == typeof Symbol &&
                                (i[Symbol.iterator] = function () {
                                  return this;
                                }),
                              i
                            );
                            function a(i) {
                              return function (a) {
                                return (function (i) {
                                  if (n)
                                    throw new TypeError(
                                      'Generator is already executing.'
                                    );
                                  for (; s; )
                                    try {
                                      if (
                                        ((n = 1),
                                        r &&
                                          (o =
                                            2 & i[0]
                                              ? r.return
                                              : i[0]
                                              ? r.throw ||
                                                ((o = r.return) && o.call(r), 0)
                                              : r.next) &&
                                          !(o = o.call(r, i[1])).done)
                                      )
                                        return o;
                                      switch (
                                        ((r = 0),
                                        o && (i = [2 & i[0], o.value]),
                                        i[0])
                                      ) {
                                        case 0:
                                        case 1:
                                          o = i;
                                          break;
                                        case 4:
                                          return (
                                            s.label++, { value: i[1], done: !1 }
                                          );
                                        case 5:
                                          s.label++, (r = i[1]), (i = [0]);
                                          continue;
                                        case 7:
                                          (i = s.ops.pop()), s.trys.pop();
                                          continue;
                                        default:
                                          if (
                                            !(
                                              (o =
                                                (o = s.trys).length > 0 &&
                                                o[o.length - 1]) ||
                                              (6 !== i[0] && 2 !== i[0])
                                            )
                                          ) {
                                            s = 0;
                                            continue;
                                          }
                                          if (
                                            3 === i[0] &&
                                            (!o || (i[1] > o[0] && i[1] < o[3]))
                                          ) {
                                            s.label = i[1];
                                            break;
                                          }
                                          if (6 === i[0] && s.label < o[1]) {
                                            (s.label = o[1]), (o = i);
                                            break;
                                          }
                                          if (o && s.label < o[2]) {
                                            (s.label = o[2]), s.ops.push(i);
                                            break;
                                          }
                                          o[2] && s.ops.pop(), s.trys.pop();
                                          continue;
                                      }
                                      i = t.call(e, s);
                                    } catch (e) {
                                      (i = [6, e]), (r = 0);
                                    } finally {
                                      n = o = 0;
                                    }
                                  if (5 & i[0]) throw i[1];
                                  return {
                                    value: i[0] ? i[1] : void 0,
                                    done: !0,
                                  };
                                })([i, a]);
                              };
                            }
                          })(this, function (i) {
                            return vt.isInstance(n.request)
                              ? ((r = n.request),
                                (void 0 ===
                                (o = (e.requestHandler.metadata || {})
                                  .handlerProtocol)
                                  ? ''
                                  : o
                                ).indexOf('h2') >= 0 && !r.headers[':authority']
                                  ? (delete r.headers.host,
                                    (r.headers[':authority'] = ''))
                                  : r.headers.host ||
                                    (r.headers.host = r.hostname),
                                [2, t(n)])
                              : [2, t(n)];
                          });
                        }),
                        new ((i = void 0) || (i = Promise))(function (e, t) {
                          function n(e) {
                            try {
                              u(s.next(e));
                            } catch (e) {
                              t(e);
                            }
                          }
                          function a(e) {
                            try {
                              u(s.throw(e));
                            } catch (e) {
                              t(e);
                            }
                          }
                          function u(t) {
                            var r;
                            t.done
                              ? e(t.value)
                              : ((r = t.value),
                                r instanceof i
                                  ? r
                                  : new i(function (e) {
                                      e(r);
                                    })).then(n, a);
                          }
                          u((s = s.apply(r, o || [])).next());
                        })
                      );
                      var r, o, i, s;
                    };
                  };
                })(e),
                dr
              );
            },
          };
        };
      var gr = function () {
          return function (e, t) {
            return function (n) {
              return (
                (r = void 0),
                (o = void 0),
                (s = function () {
                  var r, o, i, s, a, u, c, l, f;
                  return (function (e, t) {
                    var n,
                      r,
                      o,
                      i,
                      s = {
                        label: 0,
                        sent: function () {
                          if (1 & o[0]) throw o[1];
                          return o[1];
                        },
                        trys: [],
                        ops: [],
                      };
                    return (
                      (i = { next: a(0), throw: a(1), return: a(2) }),
                      'function' == typeof Symbol &&
                        (i[Symbol.iterator] = function () {
                          return this;
                        }),
                      i
                    );
                    function a(i) {
                      return function (a) {
                        return (function (i) {
                          if (n)
                            throw new TypeError(
                              'Generator is already executing.'
                            );
                          for (; s; )
                            try {
                              if (
                                ((n = 1),
                                r &&
                                  (o =
                                    2 & i[0]
                                      ? r.return
                                      : i[0]
                                      ? r.throw ||
                                        ((o = r.return) && o.call(r), 0)
                                      : r.next) &&
                                  !(o = o.call(r, i[1])).done)
                              )
                                return o;
                              switch (
                                ((r = 0), o && (i = [2 & i[0], o.value]), i[0])
                              ) {
                                case 0:
                                case 1:
                                  o = i;
                                  break;
                                case 4:
                                  return s.label++, { value: i[1], done: !1 };
                                case 5:
                                  s.label++, (r = i[1]), (i = [0]);
                                  continue;
                                case 7:
                                  (i = s.ops.pop()), s.trys.pop();
                                  continue;
                                default:
                                  if (
                                    !(
                                      (o =
                                        (o = s.trys).length > 0 &&
                                        o[o.length - 1]) ||
                                      (6 !== i[0] && 2 !== i[0])
                                    )
                                  ) {
                                    s = 0;
                                    continue;
                                  }
                                  if (
                                    3 === i[0] &&
                                    (!o || (i[1] > o[0] && i[1] < o[3]))
                                  ) {
                                    s.label = i[1];
                                    break;
                                  }
                                  if (6 === i[0] && s.label < o[1]) {
                                    (s.label = o[1]), (o = i);
                                    break;
                                  }
                                  if (o && s.label < o[2]) {
                                    (s.label = o[2]), s.ops.push(i);
                                    break;
                                  }
                                  o[2] && s.ops.pop(), s.trys.pop();
                                  continue;
                              }
                              i = t.call(e, s);
                            } catch (e) {
                              (i = [6, e]), (r = 0);
                            } finally {
                              n = o = 0;
                            }
                          if (5 & i[0]) throw i[1];
                          return { value: i[0] ? i[1] : void 0, done: !0 };
                        })([i, a]);
                      };
                    }
                  })(this, function (h) {
                    switch (h.label) {
                      case 0:
                        return (
                          (r = t.clientName),
                          (o = t.commandName),
                          (i = t.inputFilterSensitiveLog),
                          (s = t.logger),
                          (a = t.outputFilterSensitiveLog),
                          [4, e(n)]
                        );
                      case 1:
                        return (
                          (u = h.sent()),
                          s
                            ? ('function' == typeof s.info &&
                                ((c = u.output),
                                (l = c.$metadata),
                                (f = (function (e, t) {
                                  var n = {};
                                  for (var r in e)
                                    Object.prototype.hasOwnProperty.call(
                                      e,
                                      r
                                    ) &&
                                      t.indexOf(r) < 0 &&
                                      (n[r] = e[r]);
                                  if (
                                    null != e &&
                                    'function' ==
                                      typeof Object.getOwnPropertySymbols
                                  ) {
                                    var o = 0;
                                    for (
                                      r = Object.getOwnPropertySymbols(e);
                                      o < r.length;
                                      o++
                                    )
                                      t.indexOf(r[o]) < 0 &&
                                        Object.prototype.propertyIsEnumerable.call(
                                          e,
                                          r[o]
                                        ) &&
                                        (n[r[o]] = e[r[o]]);
                                  }
                                  return n;
                                })(c, ['$metadata'])),
                                s.info({
                                  clientName: r,
                                  commandName: o,
                                  input: i(n.input),
                                  output: a(f),
                                  metadata: l,
                                })),
                              [2, u])
                            : [2, u]
                        );
                    }
                  });
                }),
                new ((i = void 0) || (i = Promise))(function (e, t) {
                  function n(e) {
                    try {
                      u(s.next(e));
                    } catch (e) {
                      t(e);
                    }
                  }
                  function a(e) {
                    try {
                      u(s.throw(e));
                    } catch (e) {
                      t(e);
                    }
                  }
                  function u(t) {
                    var r;
                    t.done
                      ? e(t.value)
                      : ((r = t.value),
                        r instanceof i
                          ? r
                          : new i(function (e) {
                              e(r);
                            })).then(n, a);
                  }
                  u((s = s.apply(r, o || [])).next());
                })
              );
              var r, o, i, s;
            };
          };
        },
        vr = {
          name: 'loggerMiddleware',
          tags: ['LOGGER'],
          step: 'initialize',
          override: !0,
        },
        yr = function () {
          return (
            (yr =
              Object.assign ||
              function (e) {
                for (var t, n = 1, r = arguments.length; n < r; n++)
                  for (var o in (t = arguments[n]))
                    Object.prototype.hasOwnProperty.call(t, o) && (e[o] = t[o]);
                return e;
              }),
            yr.apply(this, arguments)
          );
        };
      var mr = function () {
        return (
          (mr =
            Object.assign ||
            function (e) {
              for (var t, n = 1, r = arguments.length; n < r; n++)
                for (var o in (t = arguments[n]))
                  Object.prototype.hasOwnProperty.call(t, o) && (e[o] = t[o]);
              return e;
            }),
          mr.apply(this, arguments)
        );
      };
      function br(e, t, n, r) {
        return new (n || (n = Promise))(function (o, i) {
          function s(e) {
            try {
              u(r.next(e));
            } catch (e) {
              i(e);
            }
          }
          function a(e) {
            try {
              u(r.throw(e));
            } catch (e) {
              i(e);
            }
          }
          function u(e) {
            var t;
            e.done
              ? o(e.value)
              : ((t = e.value),
                t instanceof n
                  ? t
                  : new n(function (e) {
                      e(t);
                    })).then(s, a);
          }
          u((r = r.apply(e, t || [])).next());
        });
      }
      function wr(e, t) {
        var n,
          r,
          o,
          i,
          s = {
            label: 0,
            sent: function () {
              if (1 & o[0]) throw o[1];
              return o[1];
            },
            trys: [],
            ops: [],
          };
        return (
          (i = { next: a(0), throw: a(1), return: a(2) }),
          'function' == typeof Symbol &&
            (i[Symbol.iterator] = function () {
              return this;
            }),
          i
        );
        function a(i) {
          return function (a) {
            return (function (i) {
              if (n) throw new TypeError('Generator is already executing.');
              for (; s; )
                try {
                  if (
                    ((n = 1),
                    r &&
                      (o =
                        2 & i[0]
                          ? r.return
                          : i[0]
                          ? r.throw || ((o = r.return) && o.call(r), 0)
                          : r.next) &&
                      !(o = o.call(r, i[1])).done)
                  )
                    return o;
                  switch (((r = 0), o && (i = [2 & i[0], o.value]), i[0])) {
                    case 0:
                    case 1:
                      o = i;
                      break;
                    case 4:
                      return s.label++, { value: i[1], done: !1 };
                    case 5:
                      s.label++, (r = i[1]), (i = [0]);
                      continue;
                    case 7:
                      (i = s.ops.pop()), s.trys.pop();
                      continue;
                    default:
                      if (
                        !(
                          (o = (o = s.trys).length > 0 && o[o.length - 1]) ||
                          (6 !== i[0] && 2 !== i[0])
                        )
                      ) {
                        s = 0;
                        continue;
                      }
                      if (3 === i[0] && (!o || (i[1] > o[0] && i[1] < o[3]))) {
                        s.label = i[1];
                        break;
                      }
                      if (6 === i[0] && s.label < o[1]) {
                        (s.label = o[1]), (o = i);
                        break;
                      }
                      if (o && s.label < o[2]) {
                        (s.label = o[2]), s.ops.push(i);
                        break;
                      }
                      o[2] && s.ops.pop(), s.trys.pop();
                      continue;
                  }
                  i = t.call(e, s);
                } catch (e) {
                  (i = [6, e]), (r = 0);
                } finally {
                  n = o = 0;
                }
              if (5 & i[0]) throw i[1];
              return { value: i[0] ? i[1] : void 0, done: !0 };
            })([i, a]);
          };
        }
      }
      function Sr(e) {
        var t = 'function' == typeof Symbol && Symbol.iterator,
          n = t && e[t],
          r = 0;
        if (n) return n.call(e);
        if (e && 'number' == typeof e.length)
          return {
            next: function () {
              return (
                e && r >= e.length && (e = void 0),
                { value: e && e[r++], done: !e }
              );
            },
          };
        throw new TypeError(
          t ? 'Object is not iterable.' : 'Symbol.iterator is not defined.'
        );
      }
      function _r(e, t) {
        var n = 'function' == typeof Symbol && e[Symbol.iterator];
        if (!n) return e;
        var r,
          o,
          i = n.call(e),
          s = [];
        try {
          for (; (void 0 === t || t-- > 0) && !(r = i.next()).done; )
            s.push(r.value);
        } catch (e) {
          o = { error: e };
        } finally {
          try {
            r && !r.done && (n = i.return) && n.call(i);
          } finally {
            if (o) throw o.error;
          }
        }
        return s;
      }
      for (var Ar = {}, Er = {}, Cr = 0; Cr < 256; Cr++) {
        var Ir = Cr.toString(16).toLowerCase();
        1 === Ir.length && (Ir = '0' + Ir), (Ar[Cr] = Ir), (Er[Ir] = Cr);
      }
      function Pr(e) {
        for (var t = '', n = 0; n < e.byteLength; n++) t += Ar[e[n]];
        return t;
      }
      var Or = 'X-Amz-Signature',
        Tr = 'X-Amz-Security-Token',
        xr = 'authorization',
        Ur = 'X-Amz-Date'.toLowerCase(),
        kr = [xr, Ur, 'date'],
        Mr = Or.toLowerCase(),
        Rr = 'x-amz-content-sha256',
        Nr = Tr.toLowerCase(),
        Dr = {
          authorization: !0,
          'cache-control': !0,
          connection: !0,
          expect: !0,
          from: !0,
          'keep-alive': !0,
          'max-forwards': !0,
          pragma: !0,
          referer: !0,
          te: !0,
          trailer: !0,
          'transfer-encoding': !0,
          upgrade: !0,
          'user-agent': !0,
          'x-amzn-trace-id': !0,
        },
        jr = /^proxy-/,
        Fr = /^sec-/,
        Lr = 'AWS4-HMAC-SHA256-PAYLOAD',
        Br = 'aws4_request',
        Vr = {},
        qr = [];
      function zr(e, t, n) {
        return e + '/' + t + '/' + n + '/' + Br;
      }
      function Kr(e, t, n) {
        var r = new e(t);
        return r.update(n), r.digest();
      }
      function Hr(e, t, n) {
        var r,
          o,
          i = e.headers,
          s = {};
        try {
          for (
            var a = Sr(Object.keys(i).sort()), u = a.next();
            !u.done;
            u = a.next()
          ) {
            var c = u.value,
              l = c.toLowerCase();
            ((l in Dr ||
              (null == t ? void 0 : t.has(l)) ||
              jr.test(l) ||
              Fr.test(l)) &&
              (!n || (n && !n.has(l)))) ||
              (s[l] = i[c].trim().replace(/\s+/g, ' '));
          }
        } catch (e) {
          r = { error: e };
        } finally {
          try {
            u && !u.done && (o = a.return) && o.call(a);
          } finally {
            if (r) throw r.error;
          }
        }
        return s;
      }
      function Wr(e, t) {
        var n = e.headers,
          r = e.body;
        return br(this, void 0, void 0, function () {
          var e, o, i, s, a, u, c;
          return wr(this, function (l) {
            switch (l.label) {
              case 0:
                try {
                  for (
                    e = Sr(Object.keys(n)), o = e.next();
                    !o.done;
                    o = e.next()
                  )
                    if ((i = o.value).toLowerCase() === Rr) return [2, n[i]];
                } catch (e) {
                  u = { error: e };
                } finally {
                  try {
                    o && !o.done && (c = e.return) && c.call(e);
                  } finally {
                    if (u) throw u.error;
                  }
                }
                return null != r
                  ? [3, 1]
                  : [
                      2,
                      'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855',
                    ];
              case 1:
                return 'string' == typeof r ||
                  ArrayBuffer.isView(r) ||
                  ((f = r),
                  ('function' == typeof ArrayBuffer &&
                    f instanceof ArrayBuffer) ||
                    '[object ArrayBuffer]' ===
                      Object.prototype.toString.call(f))
                  ? ((s = new t()).update(r), (a = Pr), [4, s.digest()])
                  : [3, 3];
              case 2:
                return [2, a.apply(void 0, [l.sent()])];
              case 3:
                return [2, 'UNSIGNED-PAYLOAD'];
            }
            var f;
          });
        });
      }
      function Gr(e) {
        var t = e.headers,
          n = e.query,
          r = (function (e, t) {
            var n = {};
            for (var r in e)
              Object.prototype.hasOwnProperty.call(e, r) &&
                t.indexOf(r) < 0 &&
                (n[r] = e[r]);
            if (
              null != e &&
              'function' == typeof Object.getOwnPropertySymbols
            ) {
              var o = 0;
              for (r = Object.getOwnPropertySymbols(e); o < r.length; o++)
                t.indexOf(r[o]) < 0 &&
                  Object.prototype.propertyIsEnumerable.call(e, r[o]) &&
                  (n[r[o]] = e[r[o]]);
            }
            return n;
          })(e, ['headers', 'query']);
        return mr(mr({}, r), { headers: mr({}, t), query: n ? Yr(n) : void 0 });
      }
      function Yr(e) {
        return Object.keys(e).reduce(function (t, n) {
          var r,
            o = e[n];
          return mr(
            mr({}, t),
            (((r = {})[n] = Array.isArray(o)
              ? (function () {
                  for (var e = [], t = 0; t < arguments.length; t++)
                    e = e.concat(_r(arguments[t]));
                  return e;
                })(o)
              : o),
            r)
          );
        }, {});
      }
      function $r(e) {
        var t, n;
        e = 'function' == typeof e.clone ? e.clone() : Gr(e);
        try {
          for (
            var r = Sr(Object.keys(e.headers)), o = r.next();
            !o.done;
            o = r.next()
          ) {
            var i = o.value;
            kr.indexOf(i.toLowerCase()) > -1 && delete e.headers[i];
          }
        } catch (e) {
          t = { error: e };
        } finally {
          try {
            o && !o.done && (n = r.return) && n.call(r);
          } finally {
            if (t) throw t.error;
          }
        }
        return e;
      }
      var Jr = (function () {
          function e(e) {
            var t = e.applyChecksum,
              n = e.credentials,
              r = e.region,
              o = e.service,
              i = e.sha256,
              s = e.uriEscapePath,
              a = void 0 === s || s;
            (this.service = o),
              (this.sha256 = i),
              (this.uriEscapePath = a),
              (this.applyChecksum = 'boolean' != typeof t || t),
              (this.regionProvider = Xr(r)),
              (this.credentialProvider = eo(n));
          }
          return (
            (e.prototype.presign = function (e, t) {
              return (
                void 0 === t && (t = {}),
                br(this, void 0, void 0, function () {
                  var n,
                    r,
                    o,
                    i,
                    s,
                    a,
                    u,
                    c,
                    l,
                    f,
                    h,
                    d,
                    p,
                    g,
                    v,
                    y,
                    m,
                    b,
                    w,
                    S,
                    _,
                    A,
                    E,
                    C;
                  return wr(this, function (I) {
                    switch (I.label) {
                      case 0:
                        return (
                          (n = t.signingDate),
                          (r = void 0 === n ? new Date() : n),
                          (o = t.expiresIn),
                          (i = void 0 === o ? 3600 : o),
                          (s = t.unsignableHeaders),
                          (a = t.unhoistableHeaders),
                          (u = t.signableHeaders),
                          (c = t.signingRegion),
                          (l = t.signingService),
                          [4, this.credentialProvider()]
                        );
                      case 1:
                        return (
                          (f = I.sent()), null == c ? [3, 2] : ((d = c), [3, 4])
                        );
                      case 2:
                        return [4, this.regionProvider()];
                      case 3:
                        (d = I.sent()), (I.label = 4);
                      case 4:
                        return (
                          (h = d),
                          (p = Zr(r)),
                          (g = p.longDate),
                          (v = p.shortDate),
                          i > 604800
                            ? [
                                2,
                                Promise.reject(
                                  'Signature version 4 presigned URLs must have an expiration date less than one week in the future'
                                ),
                              ]
                            : ((y = zr(v, h, null != l ? l : this.service)),
                              (m = (function (e, t) {
                                var n, r, o;
                                void 0 === t && (t = {});
                                var i =
                                    'function' == typeof e.clone
                                      ? e.clone()
                                      : Gr(e),
                                  s = i.headers,
                                  a = i.query,
                                  u = void 0 === a ? {} : a;
                                try {
                                  for (
                                    var c = Sr(Object.keys(s)), l = c.next();
                                    !l.done;
                                    l = c.next()
                                  ) {
                                    var f = l.value,
                                      h = f.toLowerCase();
                                    'x-amz-' !== h.substr(0, 6) ||
                                      (null === (o = t.unhoistableHeaders) ||
                                      void 0 === o
                                        ? void 0
                                        : o.has(h)) ||
                                      ((u[f] = s[f]), delete s[f]);
                                  }
                                } catch (e) {
                                  n = { error: e };
                                } finally {
                                  try {
                                    l && !l.done && (r = c.return) && r.call(c);
                                  } finally {
                                    if (n) throw n.error;
                                  }
                                }
                                return mr(mr({}, e), { headers: s, query: u });
                              })($r(e), { unhoistableHeaders: a })),
                              f.sessionToken && (m.query[Tr] = f.sessionToken),
                              (m.query['X-Amz-Algorithm'] = 'AWS4-HMAC-SHA256'),
                              (m.query['X-Amz-Credential'] =
                                f.accessKeyId + '/' + y),
                              (m.query['X-Amz-Date'] = g),
                              (m.query['X-Amz-Expires'] = i.toString(10)),
                              (b = Hr(m, s, u)),
                              (m.query['X-Amz-SignedHeaders'] = Qr(b)),
                              (w = m.query),
                              (S = Or),
                              (_ = this.getSignature),
                              (A = [g, y, this.getSigningKey(f, h, v, l)]),
                              (E = this.createCanonicalRequest),
                              (C = [m, b]),
                              [4, Wr(e, this.sha256)])
                        );
                      case 5:
                        return [
                          4,
                          _.apply(
                            this,
                            A.concat([E.apply(this, C.concat([I.sent()]))])
                          ),
                        ];
                      case 6:
                        return (w[S] = I.sent()), [2, m];
                    }
                  });
                })
              );
            }),
            (e.prototype.sign = function (e, t) {
              return br(this, void 0, void 0, function () {
                return wr(this, function (n) {
                  return 'string' == typeof e
                    ? [2, this.signString(e, t)]
                    : e.headers && e.payload
                    ? [2, this.signEvent(e, t)]
                    : [2, this.signRequest(e, t)];
                });
              });
            }),
            (e.prototype.signEvent = function (e, t) {
              var n = e.headers,
                r = e.payload,
                o = t.signingDate,
                i = void 0 === o ? new Date() : o,
                s = t.priorSignature,
                a = t.signingRegion,
                u = t.signingService;
              return br(this, void 0, void 0, function () {
                var e, t, o, c, l, f, h, d, p, g, v;
                return wr(this, function (y) {
                  switch (y.label) {
                    case 0:
                      return null == a ? [3, 1] : ((t = a), [3, 3]);
                    case 1:
                      return [4, this.regionProvider()];
                    case 2:
                      (t = y.sent()), (y.label = 3);
                    case 3:
                      return (
                        (e = t),
                        (o = Zr(i)),
                        (c = o.shortDate),
                        (l = o.longDate),
                        (f = zr(c, e, null != u ? u : this.service)),
                        [4, Wr({ headers: {}, body: r }, this.sha256)]
                      );
                    case 4:
                      return (
                        (h = y.sent()),
                        (d = new this.sha256()).update(n),
                        (g = Pr),
                        [4, d.digest()]
                      );
                    case 5:
                      return (
                        (p = g.apply(void 0, [y.sent()])),
                        (v = [Lr, l, f, s, p, h].join('\n')),
                        [
                          2,
                          this.signString(v, {
                            signingDate: i,
                            signingRegion: e,
                            signingService: u,
                          }),
                        ]
                      );
                  }
                });
              });
            }),
            (e.prototype.signString = function (e, t) {
              var n = void 0 === t ? {} : t,
                r = n.signingDate,
                o = void 0 === r ? new Date() : r,
                i = n.signingRegion,
                s = n.signingService;
              return br(this, void 0, void 0, function () {
                var t, n, r, a, u, c, l, f;
                return wr(this, function (h) {
                  switch (h.label) {
                    case 0:
                      return [4, this.credentialProvider()];
                    case 1:
                      return (
                        (t = h.sent()), null == i ? [3, 2] : ((r = i), [3, 4])
                      );
                    case 2:
                      return [4, this.regionProvider()];
                    case 3:
                      (r = h.sent()), (h.label = 4);
                    case 4:
                      return (
                        (n = r),
                        (a = Zr(o).shortDate),
                        (l = (c = this.sha256).bind),
                        [4, this.getSigningKey(t, n, a, s)]
                      );
                    case 5:
                      return (
                        (u = new (l.apply(c, [void 0, h.sent()]))()).update(e),
                        (f = Pr),
                        [4, u.digest()]
                      );
                    case 6:
                      return [2, f.apply(void 0, [h.sent()])];
                  }
                });
              });
            }),
            (e.prototype.signRequest = function (e, t) {
              var n = void 0 === t ? {} : t,
                r = n.signingDate,
                o = void 0 === r ? new Date() : r,
                i = n.signableHeaders,
                s = n.unsignableHeaders,
                a = n.signingRegion,
                u = n.signingService;
              return br(this, void 0, void 0, function () {
                var t, n, r, c, l, f, h, d, p, g, v;
                return wr(this, function (y) {
                  switch (y.label) {
                    case 0:
                      return [4, this.credentialProvider()];
                    case 1:
                      return (
                        (t = y.sent()), null == a ? [3, 2] : ((r = a), [3, 4])
                      );
                    case 2:
                      return [4, this.regionProvider()];
                    case 3:
                      (r = y.sent()), (y.label = 4);
                    case 4:
                      return (
                        (n = r),
                        (c = $r(e)),
                        (l = Zr(o)),
                        (f = l.longDate),
                        (h = l.shortDate),
                        (d = zr(h, n, null != u ? u : this.service)),
                        (c.headers[Ur] = f),
                        t.sessionToken && (c.headers[Nr] = t.sessionToken),
                        [4, Wr(c, this.sha256)]
                      );
                    case 5:
                      return (
                        (p = y.sent()),
                        !(function (e, t) {
                          var n, r;
                          e = e.toLowerCase();
                          try {
                            for (
                              var o = Sr(Object.keys(t)), i = o.next();
                              !i.done;
                              i = o.next()
                            )
                              if (e === i.value.toLowerCase()) return !0;
                          } catch (e) {
                            n = { error: e };
                          } finally {
                            try {
                              i && !i.done && (r = o.return) && r.call(o);
                            } finally {
                              if (n) throw n.error;
                            }
                          }
                          return !1;
                        })(Rr, c.headers) &&
                          this.applyChecksum &&
                          (c.headers[Rr] = p),
                        (g = Hr(c, s, i)),
                        [
                          4,
                          this.getSignature(
                            f,
                            d,
                            this.getSigningKey(t, n, h, u),
                            this.createCanonicalRequest(c, g, p)
                          ),
                        ]
                      );
                    case 6:
                      return (
                        (v = y.sent()),
                        (c.headers[xr] =
                          'AWS4-HMAC-SHA256 Credential=' +
                          t.accessKeyId +
                          '/' +
                          d +
                          ', SignedHeaders=' +
                          Qr(g) +
                          ', Signature=' +
                          v),
                        [2, c]
                      );
                  }
                });
              });
            }),
            (e.prototype.createCanonicalRequest = function (e, t, n) {
              var r = Object.keys(t).sort();
              return (
                e.method +
                '\n' +
                this.getCanonicalPath(e) +
                '\n' +
                (function (e) {
                  var t,
                    n,
                    r = e.query,
                    o = void 0 === r ? {} : r,
                    i = [],
                    s = {},
                    a = function (e) {
                      if (e.toLowerCase() === Mr) return 'continue';
                      i.push(e);
                      var t = o[e];
                      'string' == typeof t
                        ? (s[e] = wn(e) + '=' + wn(t))
                        : Array.isArray(t) &&
                          (s[e] = t
                            .slice(0)
                            .sort()
                            .reduce(function (t, n) {
                              return t.concat([wn(e) + '=' + wn(n)]);
                            }, [])
                            .join('&'));
                    };
                  try {
                    for (
                      var u = Sr(Object.keys(o).sort()), c = u.next();
                      !c.done;
                      c = u.next()
                    )
                      a(c.value);
                  } catch (e) {
                    t = { error: e };
                  } finally {
                    try {
                      c && !c.done && (n = u.return) && n.call(u);
                    } finally {
                      if (t) throw t.error;
                    }
                  }
                  return i
                    .map(function (e) {
                      return s[e];
                    })
                    .filter(function (e) {
                      return e;
                    })
                    .join('&');
                })(e) +
                '\n' +
                r
                  .map(function (e) {
                    return e + ':' + t[e];
                  })
                  .join('\n') +
                '\n\n' +
                r.join(';') +
                '\n' +
                n
              );
            }),
            (e.prototype.createStringToSign = function (e, t, n) {
              return br(this, void 0, void 0, function () {
                var r, o;
                return wr(this, function (i) {
                  switch (i.label) {
                    case 0:
                      return (r = new this.sha256()).update(n), [4, r.digest()];
                    case 1:
                      return (
                        (o = i.sent()),
                        [2, 'AWS4-HMAC-SHA256\n' + e + '\n' + t + '\n' + Pr(o)]
                      );
                  }
                });
              });
            }),
            (e.prototype.getCanonicalPath = function (e) {
              var t = e.path;
              return this.uriEscapePath
                ? '/' +
                    encodeURIComponent(t.replace(/^\//, '')).replace(
                      /%2F/g,
                      '/'
                    )
                : t;
            }),
            (e.prototype.getSignature = function (e, t, n, r) {
              return br(this, void 0, void 0, function () {
                var o, i, s, a, u;
                return wr(this, function (c) {
                  switch (c.label) {
                    case 0:
                      return [4, this.createStringToSign(e, t, r)];
                    case 1:
                      return (
                        (o = c.sent()), (a = (s = this.sha256).bind), [4, n]
                      );
                    case 2:
                      return (
                        (i = new (a.apply(s, [void 0, c.sent()]))()).update(o),
                        (u = Pr),
                        [4, i.digest()]
                      );
                    case 3:
                      return [2, u.apply(void 0, [c.sent()])];
                  }
                });
              });
            }),
            (e.prototype.getSigningKey = function (e, t, n, r) {
              return (function (e, t, n, r, o) {
                return br(void 0, void 0, void 0, function () {
                  var i, s, a, u, c, l, f, h, d;
                  return wr(this, function (p) {
                    switch (p.label) {
                      case 0:
                        return [4, Kr(e, t.secretAccessKey, t.accessKeyId)];
                      case 1:
                        if (
                          ((i = p.sent()),
                          (s =
                            n +
                            ':' +
                            r +
                            ':' +
                            o +
                            ':' +
                            Pr(i) +
                            ':' +
                            t.sessionToken) in Vr)
                        )
                          return [2, Vr[s]];
                        for (qr.push(s); qr.length > 50; )
                          delete Vr[qr.shift()];
                        (a = 'AWS4' + t.secretAccessKey), (p.label = 2);
                      case 2:
                        p.trys.push([2, 7, 8, 9]),
                          (u = Sr([n, r, o, Br])),
                          (c = u.next()),
                          (p.label = 3);
                      case 3:
                        return c.done
                          ? [3, 6]
                          : ((l = c.value), [4, Kr(e, a, l)]);
                      case 4:
                        (a = p.sent()), (p.label = 5);
                      case 5:
                        return (c = u.next()), [3, 3];
                      case 6:
                        return [3, 9];
                      case 7:
                        return (f = p.sent()), (h = { error: f }), [3, 9];
                      case 8:
                        try {
                          c && !c.done && (d = u.return) && d.call(u);
                        } finally {
                          if (h) throw h.error;
                        }
                        return [7];
                      case 9:
                        return [2, (Vr[s] = a)];
                    }
                  });
                });
              })(this.sha256, e, n, t, r || this.service);
            }),
            e
          );
        })(),
        Zr = function (e) {
          var t,
            n = ((t = e),
            (function (e) {
              return 'number' == typeof e
                ? new Date(1e3 * e)
                : 'string' == typeof e
                ? Number(e)
                  ? new Date(1e3 * Number(e))
                  : new Date(e)
                : e;
            })(t)
              .toISOString()
              .replace(/\.\d{3}Z$/, 'Z')).replace(/[\-:]/g, '');
          return { longDate: n, shortDate: n.substr(0, 8) };
        },
        Qr = function (e) {
          return Object.keys(e).sort().join(';');
        },
        Xr = function (e) {
          if ('string' == typeof e) {
            var t = Promise.resolve(e);
            return function () {
              return t;
            };
          }
          return e;
        },
        eo = function (e) {
          if ('object' == typeof e) {
            var t = Promise.resolve(e);
            return function () {
              return t;
            };
          }
          return e;
        };
      function to(e) {
        if ('object' == typeof e) {
          var t = Promise.resolve(e);
          return function () {
            return t;
          };
        }
        return e;
      }
      var no = function () {
        return (
          (no =
            Object.assign ||
            function (e) {
              for (var t, n = 1, r = arguments.length; n < r; n++)
                for (var o in (t = arguments[n]))
                  Object.prototype.hasOwnProperty.call(t, o) && (e[o] = t[o]);
              return e;
            }),
          no.apply(this, arguments)
        );
      };
      function ro(e, t) {
        var n = 'function' == typeof Symbol && e[Symbol.iterator];
        if (!n) return e;
        var r,
          o,
          i = n.call(e),
          s = [];
        try {
          for (; (void 0 === t || t-- > 0) && !(r = i.next()).done; )
            s.push(r.value);
        } catch (e) {
          o = { error: e };
        } finally {
          try {
            r && !r.done && (n = i.return) && n.call(i);
          } finally {
            if (o) throw o.error;
          }
        }
        return s;
      }
      function oo() {
        for (var e = [], t = 0; t < arguments.length; t++)
          e = e.concat(ro(arguments[t]));
        return e;
      }
      var io = 'user-agent',
        so = /[^\!\#\$\%\&\'\*\+\-\.\^\_\`\|\~\d\w]/g,
        ao = function (e) {
          var t = ro(e, 2),
            n = t[0],
            r = t[1],
            o = n.indexOf('/'),
            i = n.substring(0, o),
            s = n.substring(o + 1);
          return (
            'api' === i && (s = s.toLowerCase()),
            [i, s, r]
              .filter(function (e) {
                return e && e.length > 0;
              })
              .map(function (e) {
                return null == e ? void 0 : e.replace(so, '_');
              })
              .join('/')
          );
        },
        uo = {
          name: 'getUserAgentMiddleware',
          step: 'build',
          priority: 'low',
          tags: ['SET_USER_AGENT', 'USER_AGENT'],
          override: !0,
        },
        co = function (e) {
          return {
            applyToStack: function (t) {
              var n;
              t.add(
                ((n = e),
                function (e, t) {
                  return function (r) {
                    return (
                      (o = void 0),
                      (i = void 0),
                      (a = function () {
                        var o, i, s, a, u, c, l, f;
                        return (function (e, t) {
                          var n,
                            r,
                            o,
                            i,
                            s = {
                              label: 0,
                              sent: function () {
                                if (1 & o[0]) throw o[1];
                                return o[1];
                              },
                              trys: [],
                              ops: [],
                            };
                          return (
                            (i = { next: a(0), throw: a(1), return: a(2) }),
                            'function' == typeof Symbol &&
                              (i[Symbol.iterator] = function () {
                                return this;
                              }),
                            i
                          );
                          function a(i) {
                            return function (a) {
                              return (function (i) {
                                if (n)
                                  throw new TypeError(
                                    'Generator is already executing.'
                                  );
                                for (; s; )
                                  try {
                                    if (
                                      ((n = 1),
                                      r &&
                                        (o =
                                          2 & i[0]
                                            ? r.return
                                            : i[0]
                                            ? r.throw ||
                                              ((o = r.return) && o.call(r), 0)
                                            : r.next) &&
                                        !(o = o.call(r, i[1])).done)
                                    )
                                      return o;
                                    switch (
                                      ((r = 0),
                                      o && (i = [2 & i[0], o.value]),
                                      i[0])
                                    ) {
                                      case 0:
                                      case 1:
                                        o = i;
                                        break;
                                      case 4:
                                        return (
                                          s.label++, { value: i[1], done: !1 }
                                        );
                                      case 5:
                                        s.label++, (r = i[1]), (i = [0]);
                                        continue;
                                      case 7:
                                        (i = s.ops.pop()), s.trys.pop();
                                        continue;
                                      default:
                                        if (
                                          !(
                                            (o =
                                              (o = s.trys).length > 0 &&
                                              o[o.length - 1]) ||
                                            (6 !== i[0] && 2 !== i[0])
                                          )
                                        ) {
                                          s = 0;
                                          continue;
                                        }
                                        if (
                                          3 === i[0] &&
                                          (!o || (i[1] > o[0] && i[1] < o[3]))
                                        ) {
                                          s.label = i[1];
                                          break;
                                        }
                                        if (6 === i[0] && s.label < o[1]) {
                                          (s.label = o[1]), (o = i);
                                          break;
                                        }
                                        if (o && s.label < o[2]) {
                                          (s.label = o[2]), s.ops.push(i);
                                          break;
                                        }
                                        o[2] && s.ops.pop(), s.trys.pop();
                                        continue;
                                    }
                                    i = t.call(e, s);
                                  } catch (e) {
                                    (i = [6, e]), (r = 0);
                                  } finally {
                                    n = o = 0;
                                  }
                                if (5 & i[0]) throw i[1];
                                return {
                                  value: i[0] ? i[1] : void 0,
                                  done: !0,
                                };
                              })([i, a]);
                            };
                          }
                        })(this, function (h) {
                          switch (h.label) {
                            case 0:
                              return (
                                (o = r.request),
                                vt.isInstance(o)
                                  ? ((i = o.headers),
                                    (s =
                                      (null ===
                                        (l =
                                          null == t ? void 0 : t.userAgent) ||
                                      void 0 === l
                                        ? void 0
                                        : l.map(ao)) || []),
                                    [4, n.defaultUserAgentProvider()])
                                  : [2, e(r)]
                              );
                            case 1:
                              return (
                                (a = h.sent().map(ao)),
                                (u =
                                  (null ===
                                    (f =
                                      null == n ? void 0 : n.customUserAgent) ||
                                  void 0 === f
                                    ? void 0
                                    : f.map(ao)) || []),
                                (i['x-amz-user-agent'] = oo(a, s, u).join(' ')),
                                (c = oo(
                                  a.filter(function (e) {
                                    return e.startsWith('aws-sdk-');
                                  }),
                                  u
                                ).join(' ')),
                                'browser' !== n.runtime &&
                                  c &&
                                  (i[io] = i[io] ? i[io] + ' ' + c : c),
                                [2, e(no(no({}, r), { request: o }))]
                              );
                          }
                        });
                      }),
                      new ((s = void 0) || (s = Promise))(function (e, t) {
                        function n(e) {
                          try {
                            u(a.next(e));
                          } catch (e) {
                            t(e);
                          }
                        }
                        function r(e) {
                          try {
                            u(a.throw(e));
                          } catch (e) {
                            t(e);
                          }
                        }
                        function u(t) {
                          var o;
                          t.done
                            ? e(t.value)
                            : ((o = t.value),
                              o instanceof s
                                ? o
                                : new s(function (e) {
                                    e(o);
                                  })).then(n, r);
                        }
                        u((a = a.apply(o, i || [])).next());
                      })
                    );
                    var o, i, s, a;
                  };
                }),
                uo
              );
            },
          };
        },
        lo = (function (e) {
          function t(t) {
            var n,
              r,
              o,
              i = this,
              s = (function (e) {
                if (!e.region) throw new Error('Region is missing');
                return sr(sr({}, e), { region: cr(e.region) });
              })(lt(lt({}, ir), t)),
              a = (function (e) {
                var t;
                return sr(sr({}, e), {
                  tls: null === (t = e.tls) || void 0 === t || t,
                  endpoint: e.endpoint
                    ? ar(e)
                    : function () {
                        return ur(e);
                      },
                  isCustomEndpoint: !!e.endpoint,
                });
              })(s),
              u = (function (e) {
                var t,
                  n = this,
                  r = to(e.credentials || e.credentialDefaultProvider(e)),
                  o = e.signingEscapePath,
                  i = void 0 === o || o,
                  s = e.systemClockOffset,
                  a = void 0 === s ? e.systemClockOffset || 0 : s,
                  u = e.sha256;
                return (
                  (t = e.signer
                    ? to(e.signer)
                    : function () {
                        return to(e.region)()
                          .then(function (t) {
                            return (
                              (r = n),
                              (o = void 0),
                              (s = function () {
                                return (function (e, t) {
                                  var n,
                                    r,
                                    o,
                                    i,
                                    s = {
                                      label: 0,
                                      sent: function () {
                                        if (1 & o[0]) throw o[1];
                                        return o[1];
                                      },
                                      trys: [],
                                      ops: [],
                                    };
                                  return (
                                    (i = {
                                      next: a(0),
                                      throw: a(1),
                                      return: a(2),
                                    }),
                                    'function' == typeof Symbol &&
                                      (i[Symbol.iterator] = function () {
                                        return this;
                                      }),
                                    i
                                  );
                                  function a(i) {
                                    return function (a) {
                                      return (function (i) {
                                        if (n)
                                          throw new TypeError(
                                            'Generator is already executing.'
                                          );
                                        for (; s; )
                                          try {
                                            if (
                                              ((n = 1),
                                              r &&
                                                (o =
                                                  2 & i[0]
                                                    ? r.return
                                                    : i[0]
                                                    ? r.throw ||
                                                      ((o = r.return) &&
                                                        o.call(r),
                                                      0)
                                                    : r.next) &&
                                                !(o = o.call(r, i[1])).done)
                                            )
                                              return o;
                                            switch (
                                              ((r = 0),
                                              o && (i = [2 & i[0], o.value]),
                                              i[0])
                                            ) {
                                              case 0:
                                              case 1:
                                                o = i;
                                                break;
                                              case 4:
                                                return (
                                                  s.label++,
                                                  { value: i[1], done: !1 }
                                                );
                                              case 5:
                                                s.label++,
                                                  (r = i[1]),
                                                  (i = [0]);
                                                continue;
                                              case 7:
                                                (i = s.ops.pop()), s.trys.pop();
                                                continue;
                                              default:
                                                if (
                                                  !(
                                                    (o =
                                                      (o = s.trys).length > 0 &&
                                                      o[o.length - 1]) ||
                                                    (6 !== i[0] && 2 !== i[0])
                                                  )
                                                ) {
                                                  s = 0;
                                                  continue;
                                                }
                                                if (
                                                  3 === i[0] &&
                                                  (!o ||
                                                    (i[1] > o[0] &&
                                                      i[1] < o[3]))
                                                ) {
                                                  s.label = i[1];
                                                  break;
                                                }
                                                if (
                                                  6 === i[0] &&
                                                  s.label < o[1]
                                                ) {
                                                  (s.label = o[1]), (o = i);
                                                  break;
                                                }
                                                if (o && s.label < o[2]) {
                                                  (s.label = o[2]),
                                                    s.ops.push(i);
                                                  break;
                                                }
                                                o[2] && s.ops.pop(),
                                                  s.trys.pop();
                                                continue;
                                            }
                                            i = t.call(e, s);
                                          } catch (e) {
                                            (i = [6, e]), (r = 0);
                                          } finally {
                                            n = o = 0;
                                          }
                                        if (5 & i[0]) throw i[1];
                                        return {
                                          value: i[0] ? i[1] : void 0,
                                          done: !0,
                                        };
                                      })([i, a]);
                                    };
                                  }
                                })(this, function (n) {
                                  switch (n.label) {
                                    case 0:
                                      return [4, e.regionInfoProvider(t)];
                                    case 1:
                                      return [2, [n.sent() || {}, t]];
                                  }
                                });
                              }),
                              new ((i = void 0) || (i = Promise))(function (
                                e,
                                t
                              ) {
                                function n(e) {
                                  try {
                                    u(s.next(e));
                                  } catch (e) {
                                    t(e);
                                  }
                                }
                                function a(e) {
                                  try {
                                    u(s.throw(e));
                                  } catch (e) {
                                    t(e);
                                  }
                                }
                                function u(t) {
                                  var r;
                                  t.done
                                    ? e(t.value)
                                    : ((r = t.value),
                                      r instanceof i
                                        ? r
                                        : new i(function (e) {
                                            e(r);
                                          })).then(n, a);
                                }
                                u((s = s.apply(r, o || [])).next());
                              })
                            );
                            var r, o, i, s;
                          })
                          .then(function (t) {
                            var n = (function (e, t) {
                                var n =
                                  'function' == typeof Symbol &&
                                  e[Symbol.iterator];
                                if (!n) return e;
                                var r,
                                  o,
                                  i = n.call(e),
                                  s = [];
                                try {
                                  for (
                                    ;
                                    (void 0 === t || t-- > 0) &&
                                    !(r = i.next()).done;

                                  )
                                    s.push(r.value);
                                } catch (e) {
                                  o = { error: e };
                                } finally {
                                  try {
                                    r && !r.done && (n = i.return) && n.call(i);
                                  } finally {
                                    if (o) throw o.error;
                                  }
                                }
                                return s;
                              })(t, 2),
                              o = n[0],
                              s = n[1],
                              a = o.signingRegion,
                              c = o.signingService;
                            return (
                              (e.signingRegion = e.signingRegion || a || s),
                              (e.signingName =
                                e.signingName || c || e.serviceId),
                              new Jr({
                                credentials: r,
                                region: e.signingRegion,
                                service: e.signingName,
                                sha256: u,
                                uriEscapePath: i,
                              })
                            );
                          });
                      }),
                  yr(yr({}, e), {
                    systemClockOffset: a,
                    signingEscapePath: i,
                    credentials: r,
                    signer: t,
                  })
                );
              })(a),
              c = (function (e) {
                return no(no({}, e), {
                  customUserAgent:
                    'string' == typeof e.customUserAgent
                      ? [[e.customUserAgent]]
                      : e.customUserAgent,
                });
              })(
                ((r = (function (e) {
                  if ((void 0 === e && (e = 3), 'number' == typeof e)) {
                    var t = Promise.resolve(e);
                    return function () {
                      return t;
                    };
                  }
                  return e;
                })((n = u).maxAttempts)),
                kn(kn({}, n), {
                  maxAttempts: r,
                  retryStrategy: n.retryStrategy || new Hn(r),
                }))
              );
            return (
              ((i = e.call(this, c) || this).config = c),
              i.middlewareStack.use(
                ((o = i.config),
                {
                  applyToStack: function (e) {
                    e.add(
                      (function (e) {
                        return function (t, n) {
                          return function (r) {
                            return Mn(void 0, void 0, void 0, function () {
                              var o;
                              return Rn(this, function (i) {
                                return (
                                  (null ===
                                    (o =
                                      null == e ? void 0 : e.retryStrategy) ||
                                  void 0 === o
                                    ? void 0
                                    : o.mode) &&
                                    (n.userAgent = (function () {
                                      for (
                                        var e = [], t = 0;
                                        t < arguments.length;
                                        t++
                                      )
                                        e = e.concat(Nn(arguments[t]));
                                      return e;
                                    })(n.userAgent || [], [
                                      ['cfg/retry-mode', e.retryStrategy.mode],
                                    ])),
                                  [2, e.retryStrategy.retry(t, r)]
                                );
                              });
                            });
                          };
                        };
                      })(o),
                      Dn
                    );
                  },
                })
              ),
              i.middlewareStack.use(hr(i.config)),
              i.middlewareStack.use(pr(i.config)),
              i.middlewareStack.use(
                (i.config,
                {
                  applyToStack: function (e) {
                    e.add(gr(), vr);
                  },
                })
              ),
              i.middlewareStack.use(co(i.config)),
              i
            );
          }
          return (
            se(t, e),
            (t.prototype.destroy = function () {
              e.prototype.destroy.call(this);
            }),
            t
          );
        })(tn),
        fo = function () {
          return (
            (fo =
              Object.assign ||
              function (e) {
                for (var t, n = 1, r = arguments.length; n < r; n++)
                  for (var o in (t = arguments[n]))
                    Object.prototype.hasOwnProperty.call(t, o) && (e[o] = t[o]);
                return e;
              }),
            fo.apply(this, arguments)
          );
        },
        ho = function (e, t, n, r) {
          return new (n || (n = Promise))(function (o, i) {
            function s(e) {
              try {
                u(r.next(e));
              } catch (e) {
                i(e);
              }
            }
            function a(e) {
              try {
                u(r.throw(e));
              } catch (e) {
                i(e);
              }
            }
            function u(e) {
              var t;
              e.done
                ? o(e.value)
                : ((t = e.value),
                  t instanceof n
                    ? t
                    : new n(function (e) {
                        e(t);
                      })).then(s, a);
            }
            u((r = r.apply(e, t || [])).next());
          });
        },
        po = function (e, t) {
          var n,
            r,
            o,
            i,
            s = {
              label: 0,
              sent: function () {
                if (1 & o[0]) throw o[1];
                return o[1];
              },
              trys: [],
              ops: [],
            };
          return (
            (i = { next: a(0), throw: a(1), return: a(2) }),
            'function' == typeof Symbol &&
              (i[Symbol.iterator] = function () {
                return this;
              }),
            i
          );
          function a(i) {
            return function (a) {
              return (function (i) {
                if (n) throw new TypeError('Generator is already executing.');
                for (; s; )
                  try {
                    if (
                      ((n = 1),
                      r &&
                        (o =
                          2 & i[0]
                            ? r.return
                            : i[0]
                            ? r.throw || ((o = r.return) && o.call(r), 0)
                            : r.next) &&
                        !(o = o.call(r, i[1])).done)
                    )
                      return o;
                    switch (((r = 0), o && (i = [2 & i[0], o.value]), i[0])) {
                      case 0:
                      case 1:
                        o = i;
                        break;
                      case 4:
                        return s.label++, { value: i[1], done: !1 };
                      case 5:
                        s.label++, (r = i[1]), (i = [0]);
                        continue;
                      case 7:
                        (i = s.ops.pop()), s.trys.pop();
                        continue;
                      default:
                        if (
                          !(
                            (o = (o = s.trys).length > 0 && o[o.length - 1]) ||
                            (6 !== i[0] && 2 !== i[0])
                          )
                        ) {
                          s = 0;
                          continue;
                        }
                        if (
                          3 === i[0] &&
                          (!o || (i[1] > o[0] && i[1] < o[3]))
                        ) {
                          s.label = i[1];
                          break;
                        }
                        if (6 === i[0] && s.label < o[1]) {
                          (s.label = o[1]), (o = i);
                          break;
                        }
                        if (o && s.label < o[2]) {
                          (s.label = o[2]), s.ops.push(i);
                          break;
                        }
                        o[2] && s.ops.pop(), s.trys.pop();
                        continue;
                    }
                    i = t.call(e, s);
                  } catch (e) {
                    (i = [6, e]), (r = 0);
                  } finally {
                    n = o = 0;
                  }
                if (5 & i[0]) throw i[1];
                return { value: i[0] ? i[1] : void 0, done: !0 };
              })([i, a]);
            };
          }
        },
        go = new f('Credentials'),
        vo = (function () {
          function e(e) {
            (this._gettingCredPromise = null),
              (this._refreshHandlers = {}),
              (this.Auth = void 0),
              this.configure(e),
              (this._refreshHandlers.google = $.refreshGoogleToken),
              (this._refreshHandlers.facebook = J.refreshFacebookToken);
          }
          return (
            (e.prototype.getModuleName = function () {
              return 'Credentials';
            }),
            (e.prototype.getCredSource = function () {
              return this._credentials_source;
            }),
            (e.prototype.configure = function (e) {
              if (!e) return this._config || {};
              this._config = Object.assign({}, this._config, e);
              var t = this._config.refreshHandlers;
              return (
                t &&
                  (this._refreshHandlers = fo(
                    fo({}, this._refreshHandlers),
                    t
                  )),
                (this._storage = this._config.storage),
                this._storage || (this._storage = new S().getStorage()),
                (this._storageSync = Promise.resolve()),
                'function' == typeof this._storage.sync &&
                  (this._storageSync = this._storage.sync()),
                this._config
              );
            }),
            (e.prototype.get = function () {
              return go.debug('getting credentials'), this._pickupCredentials();
            }),
            (e.prototype._getCognitoIdentityIdStorageKey = function (e) {
              return 'CognitoIdentityId-' + e;
            }),
            (e.prototype._pickupCredentials = function () {
              return (
                go.debug('picking up credentials'),
                this._gettingCredPromise && this._gettingCredPromise.isPending()
                  ? go.debug('getting old cred promise')
                  : (go.debug('getting new cred promise'),
                    (this._gettingCredPromise = T(this._keepAlive()))),
                this._gettingCredPromise
              );
            }),
            (e.prototype._keepAlive = function () {
              return ho(this, void 0, void 0, function () {
                var e, t, n, r, o, i, s;
                return po(this, function (a) {
                  switch (a.label) {
                    case 0:
                      if (
                        (go.debug(
                          'checking if credentials exists and not expired'
                        ),
                        (e = this._credentials) &&
                          !this._isExpired(e) &&
                          !this._isPastTTL())
                      )
                        return (
                          go.debug(
                            'credentials not changed and not expired, directly return'
                          ),
                          [2, Promise.resolve(e)]
                        );
                      if (
                        (go.debug(
                          'need to get a new credential or refresh the existing one'
                        ),
                        (t = this.Auth),
                        !(n = void 0 === t ? ne.Auth : t) ||
                          'function' != typeof n.currentUserCredentials)
                      )
                        return [
                          2,
                          Promise.reject(
                            'No Auth module registered in Amplify'
                          ),
                        ];
                      if (this._isExpired(e) || !this._isPastTTL())
                        return [3, 6];
                      go.debug('ttl has passed but token is not yet expired'),
                        (a.label = 1);
                    case 1:
                      return (
                        a.trys.push([1, 5, , 6]), [4, n.currentUserPoolUser()]
                      );
                    case 2:
                      return (r = a.sent()), [4, n.currentSession()];
                    case 3:
                      return (
                        (o = a.sent()),
                        (i = o.refreshToken),
                        [
                          4,
                          new Promise(function (e, t) {
                            r.refreshSession(i, function (n, r) {
                              return n ? t(n) : e(r);
                            });
                          }),
                        ]
                      );
                    case 4:
                      return a.sent(), [3, 6];
                    case 5:
                      return (
                        (s = a.sent()),
                        go.debug(
                          'Error attempting to refreshing the session',
                          s
                        ),
                        [3, 6]
                      );
                    case 6:
                      return [2, n.currentUserCredentials()];
                  }
                });
              });
            }),
            (e.prototype.refreshFederatedToken = function (e) {
              go.debug('Getting federated credentials');
              var t = e.provider,
                n = e.user,
                r = e.token,
                o = e.identity_id,
                i = e.expires_at;
              i = 1970 === new Date(i).getFullYear() ? 1e3 * i : i;
              var s = this;
              return (
                go.debug('checking if federated jwt token expired'),
                i > new Date().getTime()
                  ? (go.debug('token not expired'),
                    this._setCredentialsFromFederation({
                      provider: t,
                      token: r,
                      user: n,
                      identity_id: o,
                      expires_at: i,
                    }))
                  : s._refreshHandlers[t] &&
                    'function' == typeof s._refreshHandlers[t]
                  ? (go.debug(
                      'getting refreshed jwt token from federation provider'
                    ),
                    this._providerRefreshWithRetry({
                      refreshHandler: s._refreshHandlers[t],
                      provider: t,
                      user: n,
                    }))
                  : (go.debug('no refresh handler for provider:', t),
                    this.clear(),
                    Promise.reject('no refresh handler for provider'))
              );
            }),
            (e.prototype._providerRefreshWithRetry = function (e) {
              var t,
                n,
                r,
                o = this,
                i = e.refreshHandler,
                s = e.provider,
                a = e.user;
              return ((t = i),
              (n = []),
              (r = 1e4),
              void 0 === r && (r = q),
              V(
                t,
                n,
                (function (e) {
                  return (
                    void 0 === e && (e = q),
                    function (t) {
                      var n = 100 * Math.pow(2, t) + 100 * Math.random();
                      return !(n > e) && n;
                    }
                  );
                })(r)
              ))
                .then(function (e) {
                  return (
                    go.debug('refresh federated token sucessfully', e),
                    o._setCredentialsFromFederation({
                      provider: s,
                      token: e.token,
                      user: a,
                      identity_id: e.identity_id,
                      expires_at: e.expires_at,
                    })
                  );
                })
                .catch(function (e) {
                  return (
                    ('string' == typeof e &&
                      0 ===
                        e
                          .toLowerCase()
                          .lastIndexOf('network error', e.length)) ||
                      o.clear(),
                    go.debug('refresh federated token failed', e),
                    Promise.reject('refreshing federation token failed: ' + e)
                  );
                });
            }),
            (e.prototype._isExpired = function (e) {
              if (!e)
                return go.debug('no credentials for expiration check'), !0;
              go.debug('are these credentials expired?', e);
              var t = Date.now();
              return e.expiration.getTime() <= t;
            }),
            (e.prototype._isPastTTL = function () {
              return this._nextCredentialsRefresh <= Date.now();
            }),
            (e.prototype._setCredentialsForGuest = function () {
              return ho(this, void 0, void 0, function () {
                var e,
                  t,
                  n,
                  r,
                  o,
                  i,
                  s,
                  a,
                  u = this;
                return po(this, function (c) {
                  switch (c.label) {
                    case 0:
                      return (
                        go.debug('setting credentials for guest'),
                        (e = this._config),
                        (t = e.identityPoolId),
                        (n = e.region),
                        e.mandatorySignIn
                          ? [
                              2,
                              Promise.reject(
                                'cannot get guest credentials when mandatory signin enabled'
                              ),
                            ]
                          : t
                          ? n
                            ? ((o = this), [4, this._getGuestIdentityId()])
                            : (go.debug(
                                'region is not configured for getting the credentials'
                              ),
                              [
                                2,
                                Promise.reject(
                                  'region is not configured for getting the credentials'
                                ),
                              ])
                          : (go.debug(
                              'No Cognito Identity pool provided for unauthenticated access'
                            ),
                            [
                              2,
                              Promise.reject(
                                'No Cognito Identity pool provided for unauthenticated access'
                              ),
                            ])
                      );
                    case 1:
                      return (
                        (r = o._identityId = c.sent()),
                        (i = new lo({ region: n, customUserAgent: X() })),
                        (s = void 0),
                        r
                          ? (s = hn({ identityId: r, client: i })())
                          : ((a = function () {
                              return ho(u, void 0, void 0, function () {
                                var e;
                                return po(this, function (n) {
                                  switch (n.label) {
                                    case 0:
                                      return [
                                        4,
                                        i.send(new dn({ IdentityPoolId: t })),
                                      ];
                                    case 1:
                                      return (
                                        (e = n.sent().IdentityId),
                                        (this._identityId = e),
                                        [2, hn({ client: i, identityId: e })()]
                                      );
                                  }
                                });
                              });
                            }),
                            (s = a().catch(function (e) {
                              return ho(u, void 0, void 0, function () {
                                return po(this, function (t) {
                                  throw e;
                                });
                              });
                            }))),
                        [
                          2,
                          this._loadCredentials(s, 'guest', !1, null)
                            .then(function (e) {
                              return e;
                            })
                            .catch(function (e) {
                              return ho(u, void 0, void 0, function () {
                                var n,
                                  o = this;
                                return po(this, function (a) {
                                  switch (a.label) {
                                    case 0:
                                      return 'ResourceNotFoundException' !==
                                        e.name ||
                                        e.message !==
                                          "Identity '" + r + "' not found."
                                        ? [3, 2]
                                        : (go.debug(
                                            'Failed to load guest credentials'
                                          ),
                                          [4, this._removeGuestIdentityId()]);
                                    case 1:
                                      return (
                                        a.sent(),
                                        (n = function () {
                                          return ho(
                                            o,
                                            void 0,
                                            void 0,
                                            function () {
                                              var e;
                                              return po(this, function (n) {
                                                switch (n.label) {
                                                  case 0:
                                                    return [
                                                      4,
                                                      i.send(
                                                        new dn({
                                                          IdentityPoolId: t,
                                                        })
                                                      ),
                                                    ];
                                                  case 1:
                                                    return (
                                                      (e = n.sent().IdentityId),
                                                      (this._identityId = e),
                                                      [
                                                        2,
                                                        hn({
                                                          client: i,
                                                          identityId: e,
                                                        })(),
                                                      ]
                                                    );
                                                }
                                              });
                                            }
                                          );
                                        }),
                                        (s = n().catch(function (e) {
                                          return ho(
                                            o,
                                            void 0,
                                            void 0,
                                            function () {
                                              return po(this, function (t) {
                                                throw e;
                                              });
                                            }
                                          );
                                        })),
                                        [
                                          2,
                                          this._loadCredentials(
                                            s,
                                            'guest',
                                            !1,
                                            null
                                          ),
                                        ]
                                      );
                                    case 2:
                                      return [2, e];
                                  }
                                });
                              });
                            }),
                        ]
                      );
                  }
                });
              });
            }),
            (e.prototype._setCredentialsFromFederation = function (e) {
              var t = e.provider,
                n = e.token,
                r = e.identity_id,
                o =
                  {
                    google: 'accounts.google.com',
                    facebook: 'graph.facebook.com',
                    amazon: 'www.amazon.com',
                    developer: 'cognito-identity.amazonaws.com',
                  }[t] || t;
              if (!o)
                return Promise.reject('You must specify a federated provider');
              var i = {};
              i[o] = n;
              var s = this._config,
                a = s.identityPoolId,
                u = s.region;
              if (!a)
                return (
                  go.debug('No Cognito Federated Identity pool provided'),
                  Promise.reject('No Cognito Federated Identity pool provided')
                );
              if (!u)
                return (
                  go.debug(
                    'region is not configured for getting the credentials'
                  ),
                  Promise.reject(
                    'region is not configured for getting the credentials'
                  )
                );
              var c = new lo({ region: u, customUserAgent: X() }),
                l = void 0;
              return (
                (l = r
                  ? hn({ identityId: r, logins: i, client: c })()
                  : (function (e) {
                      var t = this,
                        n = e.accountId,
                        r = e.cache,
                        o =
                          void 0 === r
                            ? 'object' == typeof self && self.indexedDB
                              ? new gn()
                              : 'object' == typeof window && window.localStorage
                              ? window.localStorage
                              : vn
                            : r,
                        i = e.client,
                        s = e.customRoleArn,
                        a = e.identityPoolId,
                        u = e.logins,
                        c = e.userIdentifier,
                        l =
                          void 0 === c
                            ? u && 0 !== Object.keys(u).length
                              ? void 0
                              : 'ANONYMOUS'
                            : c,
                        f = l
                          ? 'aws:cognito-identity-credentials:' + a + ':' + l
                          : void 0,
                        h = function () {
                          return re(t, void 0, void 0, function () {
                            var e, t, r, c, l, d, p, g, v;
                            return oe(this, function (y) {
                              switch (y.label) {
                                case 0:
                                  return (t = f) ? [4, o.getItem(f)] : [3, 2];
                                case 1:
                                  (t = y.sent()), (y.label = 2);
                                case 2:
                                  return (e = t)
                                    ? [3, 7]
                                    : ((d = (l = i).send),
                                      (p = dn.bind),
                                      (v = { AccountId: n, IdentityPoolId: a }),
                                      u ? [4, fn(u)] : [3, 4]);
                                case 3:
                                  return (g = y.sent()), [3, 5];
                                case 4:
                                  (g = void 0), (y.label = 5);
                                case 5:
                                  return [
                                    4,
                                    d.apply(l, [
                                      new (p.apply(dn, [
                                        void 0,
                                        ((v.Logins = g), v),
                                      ]))(),
                                    ]),
                                  ];
                                case 6:
                                  (r = y.sent().IdentityId),
                                    (c =
                                      void 0 === r
                                        ? (function () {
                                            throw new ln(
                                              'Response from Amazon Cognito contained no identity ID'
                                            );
                                          })()
                                        : r),
                                    (e = c),
                                    f &&
                                      Promise.resolve(o.setItem(f, e)).catch(
                                        function () {}
                                      ),
                                    (y.label = 7);
                                case 7:
                                  return [
                                    2,
                                    (h = hn({
                                      client: i,
                                      customRoleArn: s,
                                      logins: u,
                                      identityId: e,
                                    }))(),
                                  ];
                              }
                            });
                          });
                        };
                      return function () {
                        return h().catch(function (e) {
                          return re(t, void 0, void 0, function () {
                            return oe(this, function (t) {
                              throw (
                                (f &&
                                  Promise.resolve(o.removeItem(f)).catch(
                                    function () {}
                                  ),
                                e)
                              );
                            });
                          });
                        });
                      };
                    })({ logins: i, identityPoolId: a, client: c })()),
                this._loadCredentials(l, 'federated', !0, e)
              );
            }),
            (e.prototype._setCredentialsFromSession = function (e) {
              var t = this;
              go.debug('set credentials from session');
              var n = e.getIdToken().getJwtToken(),
                r = this._config,
                o = r.region,
                i = r.userPoolId,
                s = r.identityPoolId;
              if (!s)
                return (
                  go.debug('No Cognito Federated Identity pool provided'),
                  Promise.reject('No Cognito Federated Identity pool provided')
                );
              if (!o)
                return (
                  go.debug(
                    'region is not configured for getting the credentials'
                  ),
                  Promise.reject(
                    'region is not configured for getting the credentials'
                  )
                );
              var a = {};
              a['cognito-idp.' + o + '.amazonaws.com/' + i] = n;
              var u = new lo({ region: o, customUserAgent: X() }),
                c = ho(t, void 0, void 0, function () {
                  var e, t, n, r, o, i, c, l, f, h;
                  return po(this, function (d) {
                    switch (d.label) {
                      case 0:
                        return [4, this._getGuestIdentityId()];
                      case 1:
                        return (e = d.sent())
                          ? [3, 3]
                          : [
                              4,
                              u.send(new dn({ IdentityPoolId: s, Logins: a })),
                            ];
                      case 2:
                        (n = d.sent().IdentityId), (t = n), (d.label = 3);
                      case 3:
                        return [
                          4,
                          u.send(new un({ IdentityId: e || t, Logins: a })),
                        ];
                      case 4:
                        return (
                          (r = d.sent()),
                          (o = r.Credentials),
                          (i = o.AccessKeyId),
                          (c = o.Expiration),
                          (l = o.SecretKey),
                          (f = o.SessionToken),
                          (h = r.IdentityId),
                          (this._identityId = h),
                          e
                            ? (go.debug(
                                'The guest identity ' +
                                  e +
                                  ' has been successfully linked to the logins'
                              ),
                              e === h &&
                                go.debug(
                                  'The guest identity ' +
                                    e +
                                    ' has become the primary identity'
                                ),
                              [4, this._removeGuestIdentityId()])
                            : [3, 6]
                        );
                      case 5:
                        d.sent(), (d.label = 6);
                      case 6:
                        return [
                          2,
                          {
                            accessKeyId: i,
                            secretAccessKey: l,
                            sessionToken: f,
                            expiration: c,
                            identityId: h,
                          },
                        ];
                    }
                  });
                }).catch(function (e) {
                  return ho(t, void 0, void 0, function () {
                    return po(this, function (t) {
                      throw e;
                    });
                  });
                });
              return this._loadCredentials(c, 'userPool', !0, null);
            }),
            (e.prototype._loadCredentials = function (e, t, n, r) {
              var o = this,
                i = this;
              return new Promise(function (s, a) {
                e.then(function (e) {
                  return ho(o, void 0, void 0, function () {
                    var o, a, u, c, l;
                    return po(this, function (f) {
                      switch (f.label) {
                        case 0:
                          if (
                            (go.debug('Load credentials successfully', e),
                            this._identityId &&
                              !e.identityId &&
                              (e.identityId = this._identityId),
                            (i._credentials = e),
                            (i._credentials.authenticated = n),
                            (i._credentials_source = t),
                            (i._nextCredentialsRefresh =
                              new Date().getTime() + 3e6),
                            'federated' === t)
                          ) {
                            (o = Object.assign(
                              { id: this._credentials.identityId },
                              r.user
                            )),
                              (a = r.provider),
                              (u = r.token),
                              (c = r.expires_at),
                              (l = r.identity_id);
                            try {
                              this._storage.setItem(
                                'aws-amplify-federatedInfo',
                                JSON.stringify({
                                  provider: a,
                                  token: u,
                                  user: o,
                                  expires_at: c,
                                  identity_id: l,
                                })
                              );
                            } catch (e) {
                              go.debug(
                                'Failed to put federated info into auth storage',
                                e
                              );
                            }
                          }
                          return 'guest' !== t
                            ? [3, 2]
                            : [4, this._setGuestIdentityId(e.identityId)];
                        case 1:
                          f.sent(), (f.label = 2);
                        case 2:
                          return s(i._credentials), [2];
                      }
                    });
                  });
                }).catch(function (t) {
                  if (t)
                    return (
                      go.debug('Failed to load credentials', e),
                      go.debug('Error loading credentials', t),
                      void a(t)
                    );
                });
              });
            }),
            (e.prototype.set = function (e, t) {
              return 'session' === t
                ? this._setCredentialsFromSession(e)
                : 'federation' === t
                ? this._setCredentialsFromFederation(e)
                : 'guest' === t
                ? this._setCredentialsForGuest()
                : (go.debug('no source specified for setting credentials'),
                  Promise.reject('invalid source'));
            }),
            (e.prototype.clear = function () {
              return ho(this, void 0, void 0, function () {
                return po(this, function (e) {
                  return (
                    (this._credentials = null),
                    (this._credentials_source = null),
                    go.debug('removing aws-amplify-federatedInfo from storage'),
                    this._storage.removeItem('aws-amplify-federatedInfo'),
                    [2]
                  );
                });
              });
            }),
            (e.prototype._getGuestIdentityId = function () {
              return ho(this, void 0, void 0, function () {
                var e, t;
                return po(this, function (n) {
                  switch (n.label) {
                    case 0:
                      (e = this._config.identityPoolId), (n.label = 1);
                    case 1:
                      return n.trys.push([1, 3, , 4]), [4, this._storageSync];
                    case 2:
                      return (
                        n.sent(),
                        [
                          2,
                          this._storage.getItem(
                            this._getCognitoIdentityIdStorageKey(e)
                          ),
                        ]
                      );
                    case 3:
                      return (
                        (t = n.sent()),
                        go.debug(
                          'Failed to get the cached guest identityId',
                          t
                        ),
                        [3, 4]
                      );
                    case 4:
                      return [2];
                  }
                });
              });
            }),
            (e.prototype._setGuestIdentityId = function (e) {
              return ho(this, void 0, void 0, function () {
                var t, n;
                return po(this, function (r) {
                  switch (r.label) {
                    case 0:
                      (t = this._config.identityPoolId), (r.label = 1);
                    case 1:
                      return r.trys.push([1, 3, , 4]), [4, this._storageSync];
                    case 2:
                      return (
                        r.sent(),
                        this._storage.setItem(
                          this._getCognitoIdentityIdStorageKey(t),
                          e
                        ),
                        [3, 4]
                      );
                    case 3:
                      return (
                        (n = r.sent()),
                        go.debug('Failed to cache guest identityId', n),
                        [3, 4]
                      );
                    case 4:
                      return [2];
                  }
                });
              });
            }),
            (e.prototype._removeGuestIdentityId = function () {
              return ho(this, void 0, void 0, function () {
                var e;
                return po(this, function (t) {
                  return (
                    (e = this._config.identityPoolId),
                    go.debug(
                      'removing ' +
                        this._getCognitoIdentityIdStorageKey(e) +
                        ' from storage'
                    ),
                    this._storage.removeItem(
                      this._getCognitoIdentityIdStorageKey(e)
                    ),
                    [2]
                  );
                });
              });
            }),
            (e.prototype.shear = function (e) {
              return {
                accessKeyId: e.accessKeyId,
                sessionToken: e.sessionToken,
                secretAccessKey: e.secretAccessKey,
                identityId: e.identityId,
                authenticated: e.authenticated,
              };
            }),
            e
          );
        })(),
        yo = new vo(null);
      ne.register(yo);
      var mo = function () {
          return (
            (mo =
              Object.assign ||
              function (e) {
                for (var t, n = 1, r = arguments.length; n < r; n++)
                  for (var o in (t = arguments[n]))
                    Object.prototype.hasOwnProperty.call(t, o) && (e[o] = t[o]);
                return e;
              }),
            mo.apply(this, arguments)
          );
        },
        bo = new f('Parser'),
        wo = function (e) {
          var t,
            n = {};
          if (e.aws_mobile_analytics_app_id) {
            var r = {
              AWSPinpoint: {
                appId: e.aws_mobile_analytics_app_id,
                region: e.aws_mobile_analytics_app_region,
              },
            };
            n.Analytics = r;
          }
          return (
            (e.aws_cognito_identity_pool_id || e.aws_user_pools_id) &&
              (n.Auth = {
                userPoolId: e.aws_user_pools_id,
                userPoolWebClientId: e.aws_user_pools_web_client_id,
                region: e.aws_cognito_region,
                identityPoolId: e.aws_cognito_identity_pool_id,
                identityPoolRegion: e.aws_cognito_region,
                mandatorySignIn: 'enable' === e.aws_mandatory_sign_in,
              }),
            (t = e.aws_user_files_s3_bucket
              ? {
                  AWSS3: {
                    bucket: e.aws_user_files_s3_bucket,
                    region: e.aws_user_files_s3_bucket_region,
                    dangerouslyConnectToHttpEndpointForTesting:
                      e.aws_user_files_s3_dangerously_connect_to_http_endpoint_for_testing,
                  },
                }
              : e
              ? e.Storage || e
              : {}),
            e.Logging &&
              (n.Logging = mo(mo({}, e.Logging), {
                region: e.aws_project_region,
              })),
            e.geo &&
              ((n.Geo = Object.assign({}, e.geo)),
              e.geo.amazon_location_service &&
                (n.Geo = {
                  AmazonLocationService: e.geo.amazon_location_service,
                })),
            (n.Analytics = Object.assign({}, n.Analytics, e.Analytics)),
            (n.Auth = Object.assign({}, n.Auth, e.Auth)),
            (n.Storage = Object.assign({}, t)),
            (n.Logging = Object.assign({}, n.Logging, e.Logging)),
            bo.debug('parse config', e, 'to amplifyconfig', n),
            n
          );
        },
        So = (function () {
          function e() {}
          return (e.parseMobilehubConfig = wo), e;
        })(),
        _o = n(3421);
      function Ao(e, t) {
        void 0 === t && (t = {});
        var n = (function (e) {
          return e && 'j' === e[0] && ':' === e[1] ? e.substr(2) : e;
        })(e);
        if (
          (function (e, t) {
            return (
              void 0 === t &&
                (t = !e || ('{' !== e[0] && '[' !== e[0] && '"' !== e[0])),
              !t
            );
          })(n, t.doNotParse)
        )
          try {
            return JSON.parse(n);
          } catch (e) {}
        return e;
      }
      var Eo = function () {
          return (
            (Eo =
              Object.assign ||
              function (e) {
                for (var t, n = 1, r = arguments.length; n < r; n++)
                  for (var o in (t = arguments[n]))
                    Object.prototype.hasOwnProperty.call(t, o) && (e[o] = t[o]);
                return e;
              }),
            Eo.apply(this, arguments)
          );
        },
        Co = (function () {
          function e(e, t) {
            var n = this;
            (this.changeListeners = []),
              (this.HAS_DOCUMENT_COOKIE = !1),
              (this.cookies = (function (e, t) {
                return 'string' == typeof e
                  ? _o.Q(e, t)
                  : 'object' == typeof e && null !== e
                  ? e
                  : {};
              })(e, t)),
              new Promise(function () {
                n.HAS_DOCUMENT_COOKIE =
                  'object' == typeof document &&
                  'string' == typeof document.cookie;
              }).catch(function () {});
          }
          return (
            (e.prototype._updateBrowserValues = function (e) {
              this.HAS_DOCUMENT_COOKIE &&
                (this.cookies = _o.Q(document.cookie, e));
            }),
            (e.prototype._emitChange = function (e) {
              for (var t = 0; t < this.changeListeners.length; ++t)
                this.changeListeners[t](e);
            }),
            (e.prototype.get = function (e, t, n) {
              return (
                void 0 === t && (t = {}),
                this._updateBrowserValues(n),
                Ao(this.cookies[e], t)
              );
            }),
            (e.prototype.getAll = function (e, t) {
              void 0 === e && (e = {}), this._updateBrowserValues(t);
              var n = {};
              for (var r in this.cookies) n[r] = Ao(this.cookies[r], e);
              return n;
            }),
            (e.prototype.set = function (e, t, n) {
              var r;
              'object' == typeof t && (t = JSON.stringify(t)),
                (this.cookies = Eo(
                  Eo({}, this.cookies),
                  (((r = {})[e] = t), r)
                )),
                this.HAS_DOCUMENT_COOKIE && (document.cookie = _o.q(e, t, n)),
                this._emitChange({ name: e, value: t, options: n });
            }),
            (e.prototype.remove = function (e, t) {
              var n = (t = Eo(Eo({}, t), {
                expires: new Date(1970, 1, 1, 0, 0, 1),
                maxAge: 0,
              }));
              (this.cookies = Eo({}, this.cookies)),
                delete this.cookies[e],
                this.HAS_DOCUMENT_COOKIE && (document.cookie = _o.q(e, '', n)),
                this._emitChange({ name: e, value: void 0, options: t });
            }),
            (e.prototype.addChangeListener = function (e) {
              this.changeListeners.push(e);
            }),
            (e.prototype.removeChangeListener = function (e) {
              var t = this.changeListeners.indexOf(e);
              t >= 0 && this.changeListeners.splice(t, 1);
            }),
            e
          );
        })();
      const Io = Co;
      var Po,
        Oo = U().isBrowser,
        To = (function () {
          function e(e) {
            void 0 === e && (e = {}),
              (this.cookies = new Io()),
              (this.store = Oo ? window.localStorage : Object.create(null)),
              (this.cookies = e.req ? new Io(e.req.headers.cookie) : new Io()),
              Object.assign(this.store, this.cookies.getAll());
          }
          return (
            Object.defineProperty(e.prototype, 'length', {
              get: function () {
                return Object.entries(this.store).length;
              },
              enumerable: !0,
              configurable: !0,
            }),
            (e.prototype.clear = function () {
              var e = this;
              Array.from(new Array(this.length))
                .map(function (t, n) {
                  return e.key(n);
                })
                .forEach(function (t) {
                  return e.removeItem(t);
                });
            }),
            (e.prototype.getItem = function (e) {
              return this.getLocalItem(e);
            }),
            (e.prototype.getLocalItem = function (e) {
              return Object.prototype.hasOwnProperty.call(this.store, e)
                ? this.store[e]
                : null;
            }),
            (e.prototype.getUniversalItem = function (e) {
              return this.cookies.get(e);
            }),
            (e.prototype.key = function (e) {
              return Object.keys(this.store)[e];
            }),
            (e.prototype.removeItem = function (e) {
              this.removeLocalItem(e), this.removeUniversalItem(e);
            }),
            (e.prototype.removeLocalItem = function (e) {
              delete this.store[e];
            }),
            (e.prototype.removeUniversalItem = function (e) {
              this.cookies.remove(e, { path: '/' });
            }),
            (e.prototype.setItem = function (e, t) {
              switch ((this.setLocalItem(e, t), e.split('.').pop())) {
                case 'LastAuthUser':
                case 'accessToken':
                case 'refreshToken':
                case 'idToken':
                  Oo ? this.setUniversalItem(e, t) : this.setLocalItem(e, t);
              }
            }),
            (e.prototype.setLocalItem = function (e, t) {
              this.store[e] = t;
            }),
            (e.prototype.setUniversalItem = function (e, t) {
              this.cookies.set(e, t, {
                path: '/',
                sameSite: !0,
                secure: 'localhost' !== window.location.hostname,
              });
            }),
            e
          );
        })(),
        xo = (function () {
          function e(e) {
            var t = e || {},
              n = t.ValidationData,
              r = t.Username,
              o = t.Password,
              i = t.AuthParameters,
              s = t.ClientMetadata;
            (this.validationData = n || {}),
              (this.authParameters = i || {}),
              (this.clientMetadata = s || {}),
              (this.username = r),
              (this.password = o);
          }
          var t = e.prototype;
          return (
            (t.getUsername = function () {
              return this.username;
            }),
            (t.getPassword = function () {
              return this.password;
            }),
            (t.getValidationData = function () {
              return this.validationData;
            }),
            (t.getAuthParameters = function () {
              return this.authParameters;
            }),
            (t.getClientMetadata = function () {
              return this.clientMetadata;
            }),
            e
          );
        })(),
        Uo = n(8834),
        ko = n(7359),
        Mo = n.n(ko),
        Ro = (n(1816), n(1093)),
        No = n.n(Ro),
        Do = n(6061),
        jo = n.n(Do);
      if (
        ('undefined' != typeof window && window.crypto && (Po = window.crypto),
        !Po &&
          'undefined' != typeof window &&
          window.msCrypto &&
          (Po = window.msCrypto),
        !Po && void 0 !== n.g && n.g.crypto && (Po = n.g.crypto),
        !Po)
      )
        try {
          Po = n(6538);
        } catch (e) {}
      function Fo() {
        if (Po) {
          if ('function' == typeof Po.getRandomValues)
            try {
              return Po.getRandomValues(new Uint32Array(1))[0];
            } catch (e) {}
          if ('function' == typeof Po.randomBytes)
            try {
              return Po.randomBytes(4).readInt32LE();
            } catch (e) {}
        }
        throw new Error(
          'Native crypto module could not be used to get secure random number.'
        );
      }
      var Lo = (function () {
        function e(e, t) {
          (e = this.words = e || []),
            (this.sigBytes = null != t ? t : 4 * e.length);
        }
        var t = e.prototype;
        return (
          (t.random = function (t) {
            for (var n = [], r = 0; r < t; r += 4) n.push(Fo());
            return new e(n, t);
          }),
          (t.toString = function () {
            return (function (e) {
              for (var t = e.words, n = e.sigBytes, r = [], o = 0; o < n; o++) {
                var i = (t[o >>> 2] >>> (24 - (o % 4) * 8)) & 255;
                r.push((i >>> 4).toString(16)), r.push((15 & i).toString(16));
              }
              return r.join('');
            })(this);
          }),
          e
        );
      })();
      const Bo = Vo;
      function Vo(e, t) {
        null != e && this.fromString(e, t);
      }
      function qo() {
        return new Vo(null);
      }
      var zo,
        Ko = 'undefined' != typeof navigator;
      Ko && 'Microsoft Internet Explorer' == navigator.appName
        ? ((Vo.prototype.am = function (e, t, n, r, o, i) {
            for (var s = 32767 & t, a = t >> 15; --i >= 0; ) {
              var u = 32767 & this[e],
                c = this[e++] >> 15,
                l = a * u + c * s;
              (o =
                ((u = s * u + ((32767 & l) << 15) + n[r] + (1073741823 & o)) >>>
                  30) +
                (l >>> 15) +
                a * c +
                (o >>> 30)),
                (n[r++] = 1073741823 & u);
            }
            return o;
          }),
          (zo = 30))
        : Ko && 'Netscape' != navigator.appName
        ? ((Vo.prototype.am = function (e, t, n, r, o, i) {
            for (; --i >= 0; ) {
              var s = t * this[e++] + n[r] + o;
              (o = Math.floor(s / 67108864)), (n[r++] = 67108863 & s);
            }
            return o;
          }),
          (zo = 26))
        : ((Vo.prototype.am = function (e, t, n, r, o, i) {
            for (var s = 16383 & t, a = t >> 14; --i >= 0; ) {
              var u = 16383 & this[e],
                c = this[e++] >> 14,
                l = a * u + c * s;
              (o =
                ((u = s * u + ((16383 & l) << 14) + n[r] + o) >> 28) +
                (l >> 14) +
                a * c),
                (n[r++] = 268435455 & u);
            }
            return o;
          }),
          (zo = 28)),
        (Vo.prototype.DB = zo),
        (Vo.prototype.DM = (1 << zo) - 1),
        (Vo.prototype.DV = 1 << zo),
        (Vo.prototype.FV = Math.pow(2, 52)),
        (Vo.prototype.F1 = 52 - zo),
        (Vo.prototype.F2 = 2 * zo - 52);
      var Ho,
        Wo,
        Go = new Array();
      for (Ho = '0'.charCodeAt(0), Wo = 0; Wo <= 9; ++Wo) Go[Ho++] = Wo;
      for (Ho = 'a'.charCodeAt(0), Wo = 10; Wo < 36; ++Wo) Go[Ho++] = Wo;
      for (Ho = 'A'.charCodeAt(0), Wo = 10; Wo < 36; ++Wo) Go[Ho++] = Wo;
      function Yo(e) {
        return '0123456789abcdefghijklmnopqrstuvwxyz'.charAt(e);
      }
      function $o(e, t) {
        var n = Go[e.charCodeAt(t)];
        return null == n ? -1 : n;
      }
      function Jo(e) {
        var t = qo();
        return t.fromInt(e), t;
      }
      function Zo(e) {
        var t,
          n = 1;
        return (
          0 != (t = e >>> 16) && ((e = t), (n += 16)),
          0 != (t = e >> 8) && ((e = t), (n += 8)),
          0 != (t = e >> 4) && ((e = t), (n += 4)),
          0 != (t = e >> 2) && ((e = t), (n += 2)),
          0 != (t = e >> 1) && ((e = t), (n += 1)),
          n
        );
      }
      function Qo(e) {
        (this.m = e),
          (this.mp = e.invDigit()),
          (this.mpl = 32767 & this.mp),
          (this.mph = this.mp >> 15),
          (this.um = (1 << (e.DB - 15)) - 1),
          (this.mt2 = 2 * e.t);
      }
      function Xo(e) {
        return Uo.lW.from(new Lo().random(e).toString(), 'hex');
      }
      (Qo.prototype.convert = function (e) {
        var t = qo();
        return (
          e.abs().dlShiftTo(this.m.t, t),
          t.divRemTo(this.m, null, t),
          e.s < 0 && t.compareTo(Vo.ZERO) > 0 && this.m.subTo(t, t),
          t
        );
      }),
        (Qo.prototype.revert = function (e) {
          var t = qo();
          return e.copyTo(t), this.reduce(t), t;
        }),
        (Qo.prototype.reduce = function (e) {
          for (; e.t <= this.mt2; ) e[e.t++] = 0;
          for (var t = 0; t < this.m.t; ++t) {
            var n = 32767 & e[t],
              r =
                (n * this.mpl +
                  (((n * this.mph + (e[t] >> 15) * this.mpl) & this.um) <<
                    15)) &
                e.DM;
            for (
              e[(n = t + this.m.t)] += this.m.am(0, r, e, t, 0, this.m.t);
              e[n] >= e.DV;

            )
              (e[n] -= e.DV), e[++n]++;
          }
          e.clamp(),
            e.drShiftTo(this.m.t, e),
            e.compareTo(this.m) >= 0 && e.subTo(this.m, e);
        }),
        (Qo.prototype.mulTo = function (e, t, n) {
          e.multiplyTo(t, n), this.reduce(n);
        }),
        (Qo.prototype.sqrTo = function (e, t) {
          e.squareTo(t), this.reduce(t);
        }),
        (Vo.prototype.copyTo = function (e) {
          for (var t = this.t - 1; t >= 0; --t) e[t] = this[t];
          (e.t = this.t), (e.s = this.s);
        }),
        (Vo.prototype.fromInt = function (e) {
          (this.t = 1),
            (this.s = e < 0 ? -1 : 0),
            e > 0
              ? (this[0] = e)
              : e < -1
              ? (this[0] = e + this.DV)
              : (this.t = 0);
        }),
        (Vo.prototype.fromString = function (e, t) {
          var n;
          if (16 == t) n = 4;
          else if (8 == t) n = 3;
          else if (2 == t) n = 1;
          else if (32 == t) n = 5;
          else {
            if (4 != t)
              throw new Error('Only radix 2, 4, 8, 16, 32 are supported');
            n = 2;
          }
          (this.t = 0), (this.s = 0);
          for (var r = e.length, o = !1, i = 0; --r >= 0; ) {
            var s = $o(e, r);
            s < 0
              ? '-' == e.charAt(r) && (o = !0)
              : ((o = !1),
                0 == i
                  ? (this[this.t++] = s)
                  : i + n > this.DB
                  ? ((this[this.t - 1] |=
                      (s & ((1 << (this.DB - i)) - 1)) << i),
                    (this[this.t++] = s >> (this.DB - i)))
                  : (this[this.t - 1] |= s << i),
                (i += n) >= this.DB && (i -= this.DB));
          }
          this.clamp(), o && Vo.ZERO.subTo(this, this);
        }),
        (Vo.prototype.clamp = function () {
          for (var e = this.s & this.DM; this.t > 0 && this[this.t - 1] == e; )
            --this.t;
        }),
        (Vo.prototype.dlShiftTo = function (e, t) {
          var n;
          for (n = this.t - 1; n >= 0; --n) t[n + e] = this[n];
          for (n = e - 1; n >= 0; --n) t[n] = 0;
          (t.t = this.t + e), (t.s = this.s);
        }),
        (Vo.prototype.drShiftTo = function (e, t) {
          for (var n = e; n < this.t; ++n) t[n - e] = this[n];
          (t.t = Math.max(this.t - e, 0)), (t.s = this.s);
        }),
        (Vo.prototype.lShiftTo = function (e, t) {
          var n,
            r = e % this.DB,
            o = this.DB - r,
            i = (1 << o) - 1,
            s = Math.floor(e / this.DB),
            a = (this.s << r) & this.DM;
          for (n = this.t - 1; n >= 0; --n)
            (t[n + s + 1] = (this[n] >> o) | a), (a = (this[n] & i) << r);
          for (n = s - 1; n >= 0; --n) t[n] = 0;
          (t[s] = a), (t.t = this.t + s + 1), (t.s = this.s), t.clamp();
        }),
        (Vo.prototype.rShiftTo = function (e, t) {
          t.s = this.s;
          var n = Math.floor(e / this.DB);
          if (n >= this.t) t.t = 0;
          else {
            var r = e % this.DB,
              o = this.DB - r,
              i = (1 << r) - 1;
            t[0] = this[n] >> r;
            for (var s = n + 1; s < this.t; ++s)
              (t[s - n - 1] |= (this[s] & i) << o), (t[s - n] = this[s] >> r);
            r > 0 && (t[this.t - n - 1] |= (this.s & i) << o),
              (t.t = this.t - n),
              t.clamp();
          }
        }),
        (Vo.prototype.subTo = function (e, t) {
          for (var n = 0, r = 0, o = Math.min(e.t, this.t); n < o; )
            (r += this[n] - e[n]), (t[n++] = r & this.DM), (r >>= this.DB);
          if (e.t < this.t) {
            for (r -= e.s; n < this.t; )
              (r += this[n]), (t[n++] = r & this.DM), (r >>= this.DB);
            r += this.s;
          } else {
            for (r += this.s; n < e.t; )
              (r -= e[n]), (t[n++] = r & this.DM), (r >>= this.DB);
            r -= e.s;
          }
          (t.s = r < 0 ? -1 : 0),
            r < -1 ? (t[n++] = this.DV + r) : r > 0 && (t[n++] = r),
            (t.t = n),
            t.clamp();
        }),
        (Vo.prototype.multiplyTo = function (e, t) {
          var n = this.abs(),
            r = e.abs(),
            o = n.t;
          for (t.t = o + r.t; --o >= 0; ) t[o] = 0;
          for (o = 0; o < r.t; ++o) t[o + n.t] = n.am(0, r[o], t, o, 0, n.t);
          (t.s = 0), t.clamp(), this.s != e.s && Vo.ZERO.subTo(t, t);
        }),
        (Vo.prototype.squareTo = function (e) {
          for (var t = this.abs(), n = (e.t = 2 * t.t); --n >= 0; ) e[n] = 0;
          for (n = 0; n < t.t - 1; ++n) {
            var r = t.am(n, t[n], e, 2 * n, 0, 1);
            (e[n + t.t] += t.am(
              n + 1,
              2 * t[n],
              e,
              2 * n + 1,
              r,
              t.t - n - 1
            )) >= t.DV && ((e[n + t.t] -= t.DV), (e[n + t.t + 1] = 1));
          }
          e.t > 0 && (e[e.t - 1] += t.am(n, t[n], e, 2 * n, 0, 1)),
            (e.s = 0),
            e.clamp();
        }),
        (Vo.prototype.divRemTo = function (e, t, n) {
          var r = e.abs();
          if (!(r.t <= 0)) {
            var o = this.abs();
            if (o.t < r.t)
              return (
                null != t && t.fromInt(0), void (null != n && this.copyTo(n))
              );
            null == n && (n = qo());
            var i = qo(),
              s = this.s,
              a = e.s,
              u = this.DB - Zo(r[r.t - 1]);
            u > 0
              ? (r.lShiftTo(u, i), o.lShiftTo(u, n))
              : (r.copyTo(i), o.copyTo(n));
            var c = i.t,
              l = i[c - 1];
            if (0 != l) {
              var f = l * (1 << this.F1) + (c > 1 ? i[c - 2] >> this.F2 : 0),
                h = this.FV / f,
                d = (1 << this.F1) / f,
                p = 1 << this.F2,
                g = n.t,
                v = g - c,
                y = null == t ? qo() : t;
              for (
                i.dlShiftTo(v, y),
                  n.compareTo(y) >= 0 && ((n[n.t++] = 1), n.subTo(y, n)),
                  Vo.ONE.dlShiftTo(c, y),
                  y.subTo(i, i);
                i.t < c;

              )
                i[i.t++] = 0;
              for (; --v >= 0; ) {
                var m =
                  n[--g] == l
                    ? this.DM
                    : Math.floor(n[g] * h + (n[g - 1] + p) * d);
                if ((n[g] += i.am(0, m, n, v, 0, c)) < m)
                  for (i.dlShiftTo(v, y), n.subTo(y, n); n[g] < --m; )
                    n.subTo(y, n);
              }
              null != t && (n.drShiftTo(c, t), s != a && Vo.ZERO.subTo(t, t)),
                (n.t = c),
                n.clamp(),
                u > 0 && n.rShiftTo(u, n),
                s < 0 && Vo.ZERO.subTo(n, n);
            }
          }
        }),
        (Vo.prototype.invDigit = function () {
          if (this.t < 1) return 0;
          var e = this[0];
          if (0 == (1 & e)) return 0;
          var t = 3 & e;
          return (t =
            ((t =
              ((t =
                ((t = (t * (2 - (15 & e) * t)) & 15) * (2 - (255 & e) * t)) &
                255) *
                (2 - (((65535 & e) * t) & 65535))) &
              65535) *
              (2 - ((e * t) % this.DV))) %
            this.DV) > 0
            ? this.DV - t
            : -t;
        }),
        (Vo.prototype.addTo = function (e, t) {
          for (var n = 0, r = 0, o = Math.min(e.t, this.t); n < o; )
            (r += this[n] + e[n]), (t[n++] = r & this.DM), (r >>= this.DB);
          if (e.t < this.t) {
            for (r += e.s; n < this.t; )
              (r += this[n]), (t[n++] = r & this.DM), (r >>= this.DB);
            r += this.s;
          } else {
            for (r += this.s; n < e.t; )
              (r += e[n]), (t[n++] = r & this.DM), (r >>= this.DB);
            r += e.s;
          }
          (t.s = r < 0 ? -1 : 0),
            r > 0 ? (t[n++] = r) : r < -1 && (t[n++] = this.DV + r),
            (t.t = n),
            t.clamp();
        }),
        (Vo.prototype.toString = function (e) {
          if (this.s < 0) return '-' + this.negate().toString(e);
          var t;
          if (16 == e) t = 4;
          else if (8 == e) t = 3;
          else if (2 == e) t = 1;
          else if (32 == e) t = 5;
          else {
            if (4 != e)
              throw new Error('Only radix 2, 4, 8, 16, 32 are supported');
            t = 2;
          }
          var n,
            r = (1 << t) - 1,
            o = !1,
            i = '',
            s = this.t,
            a = this.DB - ((s * this.DB) % t);
          if (s-- > 0)
            for (
              a < this.DB && (n = this[s] >> a) > 0 && ((o = !0), (i = Yo(n)));
              s >= 0;

            )
              a < t
                ? ((n = (this[s] & ((1 << a) - 1)) << (t - a)),
                  (n |= this[--s] >> (a += this.DB - t)))
                : ((n = (this[s] >> (a -= t)) & r),
                  a <= 0 && ((a += this.DB), --s)),
                n > 0 && (o = !0),
                o && (i += Yo(n));
          return o ? i : '0';
        }),
        (Vo.prototype.negate = function () {
          var e = qo();
          return Vo.ZERO.subTo(this, e), e;
        }),
        (Vo.prototype.abs = function () {
          return this.s < 0 ? this.negate() : this;
        }),
        (Vo.prototype.compareTo = function (e) {
          var t = this.s - e.s;
          if (0 != t) return t;
          var n = this.t;
          if (0 != (t = n - e.t)) return this.s < 0 ? -t : t;
          for (; --n >= 0; ) if (0 != (t = this[n] - e[n])) return t;
          return 0;
        }),
        (Vo.prototype.bitLength = function () {
          return this.t <= 0
            ? 0
            : this.DB * (this.t - 1) +
                Zo(this[this.t - 1] ^ (this.s & this.DM));
        }),
        (Vo.prototype.mod = function (e) {
          var t = qo();
          return (
            this.abs().divRemTo(e, null, t),
            this.s < 0 && t.compareTo(Vo.ZERO) > 0 && e.subTo(t, t),
            t
          );
        }),
        (Vo.prototype.equals = function (e) {
          return 0 == this.compareTo(e);
        }),
        (Vo.prototype.add = function (e) {
          var t = qo();
          return this.addTo(e, t), t;
        }),
        (Vo.prototype.subtract = function (e) {
          var t = qo();
          return this.subTo(e, t), t;
        }),
        (Vo.prototype.multiply = function (e) {
          var t = qo();
          return this.multiplyTo(e, t), t;
        }),
        (Vo.prototype.divide = function (e) {
          var t = qo();
          return this.divRemTo(e, t, null), t;
        }),
        (Vo.prototype.modPow = function (e, t, n) {
          var r,
            o = e.bitLength(),
            i = Jo(1),
            s = new Qo(t);
          if (o <= 0) return i;
          r = o < 18 ? 1 : o < 48 ? 3 : o < 144 ? 4 : o < 768 ? 5 : 6;
          var a = new Array(),
            u = 3,
            c = r - 1,
            l = (1 << r) - 1;
          if (((a[1] = s.convert(this)), r > 1)) {
            var f = qo();
            for (s.sqrTo(a[1], f); u <= l; )
              (a[u] = qo()), s.mulTo(f, a[u - 2], a[u]), (u += 2);
          }
          var h,
            d,
            p = e.t - 1,
            g = !0,
            v = qo();
          for (o = Zo(e[p]) - 1; p >= 0; ) {
            for (
              o >= c
                ? (h = (e[p] >> (o - c)) & l)
                : ((h = (e[p] & ((1 << (o + 1)) - 1)) << (c - o)),
                  p > 0 && (h |= e[p - 1] >> (this.DB + o - c))),
                u = r;
              0 == (1 & h);

            )
              (h >>= 1), --u;
            if (((o -= u) < 0 && ((o += this.DB), --p), g))
              a[h].copyTo(i), (g = !1);
            else {
              for (; u > 1; ) s.sqrTo(i, v), s.sqrTo(v, i), (u -= 2);
              u > 0 ? s.sqrTo(i, v) : ((d = i), (i = v), (v = d)),
                s.mulTo(v, a[h], i);
            }
            for (; p >= 0 && 0 == (e[p] & (1 << o)); )
              s.sqrTo(i, v),
                (d = i),
                (i = v),
                (v = d),
                --o < 0 && ((o = this.DB - 1), --p);
          }
          var y = s.revert(i);
          return n(null, y), y;
        }),
        (Vo.ZERO = Jo(0)),
        (Vo.ONE = Jo(1));
      var ei = /^[89a-f]/i,
        ti = (function () {
          function e(e) {
            (this.N = new Bo(
              'FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3DC2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F83655D23DCA3AD961C62F356208552BB9ED529077096966D670C354E4ABC9804F1746C08CA18217C32905E462E36CE3BE39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9DE2BCBF6955817183995497CEA956AE515D2261898FA051015728E5A8AAAC42DAD33170D04507A33A85521ABDF1CBA64ECFB850458DBEF0A8AEA71575D060C7DB3970F85A6E1E4C7ABF5AE8CDB0933D71E8C94E04A25619DCEE3D2261AD2EE6BF12FFA06D98A0864D87602733EC86A64521F2B18177B200CBBE117577A615D6C770988C0BAD946E208E24FA074E5AB3143DB5BFCE0FD108E4B82D120A93AD2CAFFFFFFFFFFFFFFFF',
              16
            )),
              (this.g = new Bo('2', 16)),
              (this.k = new Bo(
                this.hexHash('' + this.padHex(this.N) + this.padHex(this.g)),
                16
              )),
              (this.smallAValue = this.generateRandomSmallA()),
              this.getLargeAValue(function () {}),
              (this.infoBits = Uo.lW.from('Caldera Derived Key', 'utf8')),
              (this.poolName = e);
          }
          var t = e.prototype;
          return (
            (t.getSmallAValue = function () {
              return this.smallAValue;
            }),
            (t.getLargeAValue = function (e) {
              var t = this;
              this.largeAValue
                ? e(null, this.largeAValue)
                : this.calculateA(this.smallAValue, function (n, r) {
                    n && e(n, null),
                      (t.largeAValue = r),
                      e(null, t.largeAValue);
                  });
            }),
            (t.generateRandomSmallA = function () {
              var e = Xo(128).toString('hex');
              return new Bo(e, 16);
            }),
            (t.generateRandomString = function () {
              return Xo(40).toString('base64');
            }),
            (t.getRandomPassword = function () {
              return this.randomPassword;
            }),
            (t.getSaltDevices = function () {
              return this.SaltToHashDevices;
            }),
            (t.getVerifierDevices = function () {
              return this.verifierDevices;
            }),
            (t.generateHashDevice = function (e, t, n) {
              var r = this;
              this.randomPassword = this.generateRandomString();
              var o = '' + e + t + ':' + this.randomPassword,
                i = this.hash(o),
                s = Xo(16).toString('hex');
              (this.SaltToHashDevices = this.padHex(new Bo(s, 16))),
                this.g.modPow(
                  new Bo(this.hexHash(this.SaltToHashDevices + i), 16),
                  this.N,
                  function (e, t) {
                    e && n(e, null),
                      (r.verifierDevices = r.padHex(t)),
                      n(null, null);
                  }
                );
            }),
            (t.calculateA = function (e, t) {
              var n = this;
              this.g.modPow(e, this.N, function (e, r) {
                e && t(e, null),
                  r.mod(n.N).equals(Bo.ZERO) &&
                    t(
                      new Error('Illegal paramater. A mod N cannot be 0.'),
                      null
                    ),
                  t(null, r);
              });
            }),
            (t.calculateU = function (e, t) {
              return (
                (this.UHexHash = this.hexHash(this.padHex(e) + this.padHex(t))),
                new Bo(this.UHexHash, 16)
              );
            }),
            (t.hash = function (e) {
              var t = e instanceof Uo.lW ? Mo().lib.WordArray.create(e) : e,
                n = No()(t).toString();
              return new Array(64 - n.length).join('0') + n;
            }),
            (t.hexHash = function (e) {
              return this.hash(Uo.lW.from(e, 'hex'));
            }),
            (t.computehkdf = function (e, t) {
              var n = Mo().lib.WordArray.create(
                  Uo.lW.concat([
                    this.infoBits,
                    Uo.lW.from(String.fromCharCode(1), 'utf8'),
                  ])
                ),
                r = e instanceof Uo.lW ? Mo().lib.WordArray.create(e) : e,
                o = t instanceof Uo.lW ? Mo().lib.WordArray.create(t) : t,
                i = jo()(r, o),
                s = jo()(n, i);
              return Uo.lW.from(s.toString(), 'hex').slice(0, 16);
            }),
            (t.getPasswordAuthenticationKey = function (e, t, n, r, o) {
              var i = this;
              if (n.mod(this.N).equals(Bo.ZERO))
                throw new Error('B cannot be zero.');
              if (
                ((this.UValue = this.calculateU(this.largeAValue, n)),
                this.UValue.equals(Bo.ZERO))
              )
                throw new Error('U cannot be zero.');
              var s = '' + this.poolName + e + ':' + t,
                a = this.hash(s),
                u = new Bo(this.hexHash(this.padHex(r) + a), 16);
              this.calculateS(u, n, function (e, t) {
                e && o(e, null);
                var n = i.computehkdf(
                  Uo.lW.from(i.padHex(t), 'hex'),
                  Uo.lW.from(i.padHex(i.UValue), 'hex')
                );
                o(null, n);
              });
            }),
            (t.calculateS = function (e, t, n) {
              var r = this;
              this.g.modPow(e, this.N, function (o, i) {
                o && n(o, null),
                  t
                    .subtract(r.k.multiply(i))
                    .modPow(
                      r.smallAValue.add(r.UValue.multiply(e)),
                      r.N,
                      function (e, t) {
                        e && n(e, null), n(null, t.mod(r.N));
                      }
                    );
              });
            }),
            (t.getNewPasswordRequiredChallengeUserAttributePrefix =
              function () {
                return 'userAttributes.';
              }),
            (t.padHex = function (e) {
              if (!(e instanceof Bo)) throw new Error('Not a BigInteger');
              var t = e.compareTo(Bo.ZERO) < 0,
                n = e.abs().toString(16);
              if (
                ((n = n.length % 2 != 0 ? '0' + n : n),
                (n = ei.test(n) ? '00' + n : n),
                t)
              ) {
                var r = n
                  .split('')
                  .map(function (e) {
                    var t = 15 & ~parseInt(e, 16);
                    return '0123456789ABCDEF'.charAt(t);
                  })
                  .join('');
                (n = new Bo(r, 16).add(Bo.ONE).toString(16))
                  .toUpperCase()
                  .startsWith('FF8') && (n = n.substring(2));
              }
              return n;
            }),
            e
          );
        })(),
        ni = (function () {
          function e(e) {
            (this.jwtToken = e || ''), (this.payload = this.decodePayload());
          }
          var t = e.prototype;
          return (
            (t.getJwtToken = function () {
              return this.jwtToken;
            }),
            (t.getExpiration = function () {
              return this.payload.exp;
            }),
            (t.getIssuedAt = function () {
              return this.payload.iat;
            }),
            (t.decodePayload = function () {
              var e = this.jwtToken.split('.')[1];
              try {
                return JSON.parse(Uo.lW.from(e, 'base64').toString('utf8'));
              } catch (e) {
                return {};
              }
            }),
            e
          );
        })();
      function ri(e, t) {
        return (
          (ri = Object.setPrototypeOf
            ? Object.setPrototypeOf.bind()
            : function (e, t) {
                return (e.__proto__ = t), e;
              }),
          ri(e, t)
        );
      }
      var oi = (function (e) {
        var t, n;
        function r(t) {
          var n = (void 0 === t ? {} : t).AccessToken;
          return e.call(this, n || '') || this;
        }
        return (
          (n = e),
          ((t = r).prototype = Object.create(n.prototype)),
          (t.prototype.constructor = t),
          ri(t, n),
          r
        );
      })(ni);
      function ii(e, t) {
        return (
          (ii = Object.setPrototypeOf
            ? Object.setPrototypeOf.bind()
            : function (e, t) {
                return (e.__proto__ = t), e;
              }),
          ii(e, t)
        );
      }
      var si = (function (e) {
          var t, n;
          function r(t) {
            var n = (void 0 === t ? {} : t).IdToken;
            return e.call(this, n || '') || this;
          }
          return (
            (n = e),
            ((t = r).prototype = Object.create(n.prototype)),
            (t.prototype.constructor = t),
            ii(t, n),
            r
          );
        })(ni),
        ai = (function () {
          function e(e) {
            var t = (void 0 === e ? {} : e).RefreshToken;
            this.token = t || '';
          }
          return (
            (e.prototype.getToken = function () {
              return this.token;
            }),
            e
          );
        })(),
        ui = n(8139),
        ci = n.n(ui),
        li = (function () {
          function e(e) {
            var t = void 0 === e ? {} : e,
              n = t.IdToken,
              r = t.RefreshToken,
              o = t.AccessToken,
              i = t.ClockDrift;
            if (null == o || null == n)
              throw new Error('Id token and Access Token must be present.');
            (this.idToken = n),
              (this.refreshToken = r),
              (this.accessToken = o),
              (this.clockDrift = void 0 === i ? this.calculateClockDrift() : i);
          }
          var t = e.prototype;
          return (
            (t.getIdToken = function () {
              return this.idToken;
            }),
            (t.getRefreshToken = function () {
              return this.refreshToken;
            }),
            (t.getAccessToken = function () {
              return this.accessToken;
            }),
            (t.getClockDrift = function () {
              return this.clockDrift;
            }),
            (t.calculateClockDrift = function () {
              return (
                Math.floor(new Date() / 1e3) -
                Math.min(
                  this.accessToken.getIssuedAt(),
                  this.idToken.getIssuedAt()
                )
              );
            }),
            (t.isValid = function () {
              var e = Math.floor(new Date() / 1e3) - this.clockDrift;
              return (
                e < this.accessToken.getExpiration() &&
                e < this.idToken.getExpiration()
              );
            }),
            e
          );
        })(),
        fi = [
          'Jan',
          'Feb',
          'Mar',
          'Apr',
          'May',
          'Jun',
          'Jul',
          'Aug',
          'Sep',
          'Oct',
          'Nov',
          'Dec',
        ],
        hi = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
        di = (function () {
          function e() {}
          return (
            (e.prototype.getNowString = function () {
              var e = new Date(),
                t = hi[e.getUTCDay()],
                n = fi[e.getUTCMonth()],
                r = e.getUTCDate(),
                o = e.getUTCHours();
              o < 10 && (o = '0' + o);
              var i = e.getUTCMinutes();
              i < 10 && (i = '0' + i);
              var s = e.getUTCSeconds();
              return (
                s < 10 && (s = '0' + s),
                t +
                  ' ' +
                  n +
                  ' ' +
                  r +
                  ' ' +
                  o +
                  ':' +
                  i +
                  ':' +
                  s +
                  ' UTC ' +
                  e.getUTCFullYear()
              );
            }),
            e
          );
        })(),
        pi = (function () {
          function e(e) {
            var t = void 0 === e ? {} : e,
              n = t.Name,
              r = t.Value;
            (this.Name = n || ''), (this.Value = r || '');
          }
          var t = e.prototype;
          return (
            (t.getValue = function () {
              return this.Value;
            }),
            (t.setValue = function (e) {
              return (this.Value = e), this;
            }),
            (t.getName = function () {
              return this.Name;
            }),
            (t.setName = function (e) {
              return (this.Name = e), this;
            }),
            (t.toString = function () {
              return JSON.stringify(this);
            }),
            (t.toJSON = function () {
              return { Name: this.Name, Value: this.Value };
            }),
            e
          );
        })(),
        gi = {},
        vi = (function () {
          function e() {}
          return (
            (e.setItem = function (e, t) {
              return (gi[e] = t), gi[e];
            }),
            (e.getItem = function (e) {
              return Object.prototype.hasOwnProperty.call(gi, e)
                ? gi[e]
                : void 0;
            }),
            (e.removeItem = function (e) {
              return delete gi[e];
            }),
            (e.clear = function () {
              return (gi = {});
            }),
            e
          );
        })(),
        yi = (function () {
          function e() {
            try {
              (this.storageWindow = window.localStorage),
                this.storageWindow.setItem('aws.cognito.test-ls', 1),
                this.storageWindow.removeItem('aws.cognito.test-ls');
            } catch (e) {
              this.storageWindow = vi;
            }
          }
          return (
            (e.prototype.getStorage = function () {
              return this.storageWindow;
            }),
            e
          );
        })(),
        mi = 'undefined' != typeof navigator ? navigator.userAgent : 'nodejs',
        bi = (function () {
          function e(e) {
            if (null == e || null == e.Username || null == e.Pool)
              throw new Error('Username and Pool information are required.');
            (this.username = e.Username || ''),
              (this.pool = e.Pool),
              (this.Session = null),
              (this.client = e.Pool.client),
              (this.signInUserSession = null),
              (this.authenticationFlowType = 'USER_SRP_AUTH'),
              (this.storage = e.Storage || new yi().getStorage()),
              (this.keyPrefix =
                'CognitoIdentityServiceProvider.' + this.pool.getClientId()),
              (this.userDataKey =
                this.keyPrefix + '.' + this.username + '.userData');
          }
          var t = e.prototype;
          return (
            (t.setSignInUserSession = function (e) {
              this.clearCachedUserData(),
                (this.signInUserSession = e),
                this.cacheTokens();
            }),
            (t.getSignInUserSession = function () {
              return this.signInUserSession;
            }),
            (t.getUsername = function () {
              return this.username;
            }),
            (t.getAuthenticationFlowType = function () {
              return this.authenticationFlowType;
            }),
            (t.setAuthenticationFlowType = function (e) {
              this.authenticationFlowType = e;
            }),
            (t.initiateAuth = function (e, t) {
              var n = this,
                r = e.getAuthParameters();
              r.USERNAME = this.username;
              var o =
                  0 !== Object.keys(e.getValidationData()).length
                    ? e.getValidationData()
                    : e.getClientMetadata(),
                i = {
                  AuthFlow: 'CUSTOM_AUTH',
                  ClientId: this.pool.getClientId(),
                  AuthParameters: r,
                  ClientMetadata: o,
                };
              this.getUserContextData() &&
                (i.UserContextData = this.getUserContextData()),
                this.client.request('InitiateAuth', i, function (e, r) {
                  if (e) return t.onFailure(e);
                  var o = r.ChallengeName,
                    i = r.ChallengeParameters;
                  return 'CUSTOM_CHALLENGE' === o
                    ? ((n.Session = r.Session), t.customChallenge(i))
                    : ((n.signInUserSession = n.getCognitoUserSession(
                        r.AuthenticationResult
                      )),
                      n.cacheTokens(),
                      t.onSuccess(n.signInUserSession));
                });
            }),
            (t.authenticateUser = function (e, t) {
              return 'USER_PASSWORD_AUTH' === this.authenticationFlowType
                ? this.authenticateUserPlainUsernamePassword(e, t)
                : 'USER_SRP_AUTH' === this.authenticationFlowType ||
                  'CUSTOM_AUTH' === this.authenticationFlowType
                ? this.authenticateUserDefaultAuth(e, t)
                : t.onFailure(
                    new Error('Authentication flow type is invalid.')
                  );
            }),
            (t.authenticateUserDefaultAuth = function (e, t) {
              var n,
                r,
                o = this,
                i = new ti(this.pool.getUserPoolId().split('_')[1]),
                s = new di(),
                a = {};
              null != this.deviceKey && (a.DEVICE_KEY = this.deviceKey),
                (a.USERNAME = this.username),
                i.getLargeAValue(function (u, c) {
                  u && t.onFailure(u),
                    (a.SRP_A = c.toString(16)),
                    'CUSTOM_AUTH' === o.authenticationFlowType &&
                      (a.CHALLENGE_NAME = 'SRP_A');
                  var l =
                      0 !== Object.keys(e.getValidationData()).length
                        ? e.getValidationData()
                        : e.getClientMetadata(),
                    f = {
                      AuthFlow: o.authenticationFlowType,
                      ClientId: o.pool.getClientId(),
                      AuthParameters: a,
                      ClientMetadata: l,
                    };
                  o.getUserContextData(o.username) &&
                    (f.UserContextData = o.getUserContextData(o.username)),
                    o.client.request('InitiateAuth', f, function (a, u) {
                      if (a) return t.onFailure(a);
                      var c = u.ChallengeParameters;
                      (o.username = c.USER_ID_FOR_SRP),
                        (o.userDataKey =
                          o.keyPrefix + '.' + o.username + '.userData'),
                        (n = new Bo(c.SRP_B, 16)),
                        (r = new Bo(c.SALT, 16)),
                        o.getCachedDeviceKeyAndPassword(),
                        i.getPasswordAuthenticationKey(
                          o.username,
                          e.getPassword(),
                          n,
                          r,
                          function (e, n) {
                            e && t.onFailure(e);
                            var r = s.getNowString(),
                              a = Mo().lib.WordArray.create(
                                Uo.lW.concat([
                                  Uo.lW.from(
                                    o.pool.getUserPoolId().split('_')[1],
                                    'utf8'
                                  ),
                                  Uo.lW.from(o.username, 'utf8'),
                                  Uo.lW.from(c.SECRET_BLOCK, 'base64'),
                                  Uo.lW.from(r, 'utf8'),
                                ])
                              ),
                              f = Mo().lib.WordArray.create(n),
                              h = ci().stringify(jo()(a, f)),
                              d = {};
                            (d.USERNAME = o.username),
                              (d.PASSWORD_CLAIM_SECRET_BLOCK = c.SECRET_BLOCK),
                              (d.TIMESTAMP = r),
                              (d.PASSWORD_CLAIM_SIGNATURE = h),
                              null != o.deviceKey &&
                                (d.DEVICE_KEY = o.deviceKey);
                            var p = {
                              ChallengeName: 'PASSWORD_VERIFIER',
                              ClientId: o.pool.getClientId(),
                              ChallengeResponses: d,
                              Session: u.Session,
                              ClientMetadata: l,
                            };
                            o.getUserContextData() &&
                              (p.UserContextData = o.getUserContextData()),
                              (function e(t, n) {
                                return o.client.request(
                                  'RespondToAuthChallenge',
                                  t,
                                  function (r, i) {
                                    return r &&
                                      'ResourceNotFoundException' === r.code &&
                                      -1 !==
                                        r.message
                                          .toLowerCase()
                                          .indexOf('device')
                                      ? ((d.DEVICE_KEY = null),
                                        (o.deviceKey = null),
                                        (o.randomPassword = null),
                                        (o.deviceGroupKey = null),
                                        o.clearCachedDeviceKeyAndPassword(),
                                        e(t, n))
                                      : n(r, i);
                                  }
                                );
                              })(p, function (e, n) {
                                return e
                                  ? t.onFailure(e)
                                  : o.authenticateUserInternal(n, i, t);
                              });
                          }
                        );
                    });
                });
            }),
            (t.authenticateUserPlainUsernamePassword = function (e, t) {
              var n = this,
                r = {};
              if (
                ((r.USERNAME = this.username),
                (r.PASSWORD = e.getPassword()),
                r.PASSWORD)
              ) {
                var o = new ti(this.pool.getUserPoolId().split('_')[1]);
                this.getCachedDeviceKeyAndPassword(),
                  null != this.deviceKey && (r.DEVICE_KEY = this.deviceKey);
                var i =
                    0 !== Object.keys(e.getValidationData()).length
                      ? e.getValidationData()
                      : e.getClientMetadata(),
                  s = {
                    AuthFlow: 'USER_PASSWORD_AUTH',
                    ClientId: this.pool.getClientId(),
                    AuthParameters: r,
                    ClientMetadata: i,
                  };
                this.getUserContextData(this.username) &&
                  (s.UserContextData = this.getUserContextData(this.username)),
                  this.client.request('InitiateAuth', s, function (e, r) {
                    return e
                      ? t.onFailure(e)
                      : n.authenticateUserInternal(r, o, t);
                  });
              } else t.onFailure(new Error('PASSWORD parameter is required'));
            }),
            (t.authenticateUserInternal = function (e, t, n) {
              var r = this,
                o = e.ChallengeName,
                i = e.ChallengeParameters;
              if ('SMS_MFA' === o)
                return (this.Session = e.Session), n.mfaRequired(o, i);
              if ('SELECT_MFA_TYPE' === o)
                return (this.Session = e.Session), n.selectMFAType(o, i);
              if ('MFA_SETUP' === o)
                return (this.Session = e.Session), n.mfaSetup(o, i);
              if ('SOFTWARE_TOKEN_MFA' === o)
                return (this.Session = e.Session), n.totpRequired(o, i);
              if ('CUSTOM_CHALLENGE' === o)
                return (this.Session = e.Session), n.customChallenge(i);
              if ('NEW_PASSWORD_REQUIRED' === o) {
                this.Session = e.Session;
                var s = null,
                  a = null,
                  u = [],
                  c = t.getNewPasswordRequiredChallengeUserAttributePrefix();
                if (
                  (i &&
                    ((s = JSON.parse(e.ChallengeParameters.userAttributes)),
                    (a = JSON.parse(e.ChallengeParameters.requiredAttributes))),
                  a)
                )
                  for (var l = 0; l < a.length; l++)
                    u[l] = a[l].substr(c.length);
                return n.newPasswordRequired(s, u);
              }
              if ('DEVICE_SRP_AUTH' === o)
                return (
                  (this.Session = e.Session), void this.getDeviceResponse(n)
                );
              (this.signInUserSession = this.getCognitoUserSession(
                e.AuthenticationResult
              )),
                (this.challengeName = o),
                this.cacheTokens();
              var f = e.AuthenticationResult.NewDeviceMetadata;
              if (null == f) return n.onSuccess(this.signInUserSession);
              t.generateHashDevice(
                e.AuthenticationResult.NewDeviceMetadata.DeviceGroupKey,
                e.AuthenticationResult.NewDeviceMetadata.DeviceKey,
                function (o) {
                  if (o) return n.onFailure(o);
                  var i = {
                    Salt: Uo.lW
                      .from(t.getSaltDevices(), 'hex')
                      .toString('base64'),
                    PasswordVerifier: Uo.lW
                      .from(t.getVerifierDevices(), 'hex')
                      .toString('base64'),
                  };
                  (r.verifierDevices = i.PasswordVerifier),
                    (r.deviceGroupKey = f.DeviceGroupKey),
                    (r.randomPassword = t.getRandomPassword()),
                    r.client.request(
                      'ConfirmDevice',
                      {
                        DeviceKey: f.DeviceKey,
                        AccessToken: r.signInUserSession
                          .getAccessToken()
                          .getJwtToken(),
                        DeviceSecretVerifierConfig: i,
                        DeviceName: mi,
                      },
                      function (t, o) {
                        return t
                          ? n.onFailure(t)
                          : ((r.deviceKey =
                              e.AuthenticationResult.NewDeviceMetadata.DeviceKey),
                            r.cacheDeviceKeyAndPassword(),
                            !0 === o.UserConfirmationNecessary
                              ? n.onSuccess(
                                  r.signInUserSession,
                                  o.UserConfirmationNecessary
                                )
                              : n.onSuccess(r.signInUserSession));
                      }
                    );
                }
              );
            }),
            (t.completeNewPasswordChallenge = function (e, t, n, r) {
              var o = this;
              if (!e)
                return n.onFailure(new Error('New password is required.'));
              var i = new ti(this.pool.getUserPoolId().split('_')[1]),
                s = i.getNewPasswordRequiredChallengeUserAttributePrefix(),
                a = {};
              t &&
                Object.keys(t).forEach(function (e) {
                  a[s + e] = t[e];
                }),
                (a.NEW_PASSWORD = e),
                (a.USERNAME = this.username);
              var u = {
                ChallengeName: 'NEW_PASSWORD_REQUIRED',
                ClientId: this.pool.getClientId(),
                ChallengeResponses: a,
                Session: this.Session,
                ClientMetadata: r,
              };
              this.getUserContextData() &&
                (u.UserContextData = this.getUserContextData()),
                this.client.request(
                  'RespondToAuthChallenge',
                  u,
                  function (e, t) {
                    return e
                      ? n.onFailure(e)
                      : o.authenticateUserInternal(t, i, n);
                  }
                );
            }),
            (t.getDeviceResponse = function (e, t) {
              var n = this,
                r = new ti(this.deviceGroupKey),
                o = new di(),
                i = {};
              (i.USERNAME = this.username),
                (i.DEVICE_KEY = this.deviceKey),
                r.getLargeAValue(function (s, a) {
                  s && e.onFailure(s), (i.SRP_A = a.toString(16));
                  var u = {
                    ChallengeName: 'DEVICE_SRP_AUTH',
                    ClientId: n.pool.getClientId(),
                    ChallengeResponses: i,
                    ClientMetadata: t,
                    Session: n.Session,
                  };
                  n.getUserContextData() &&
                    (u.UserContextData = n.getUserContextData()),
                    n.client.request(
                      'RespondToAuthChallenge',
                      u,
                      function (t, i) {
                        if (t) return e.onFailure(t);
                        var s = i.ChallengeParameters,
                          a = new Bo(s.SRP_B, 16),
                          u = new Bo(s.SALT, 16);
                        r.getPasswordAuthenticationKey(
                          n.deviceKey,
                          n.randomPassword,
                          a,
                          u,
                          function (t, r) {
                            if (t) return e.onFailure(t);
                            var a = o.getNowString(),
                              u = Mo().lib.WordArray.create(
                                Uo.lW.concat([
                                  Uo.lW.from(n.deviceGroupKey, 'utf8'),
                                  Uo.lW.from(n.deviceKey, 'utf8'),
                                  Uo.lW.from(s.SECRET_BLOCK, 'base64'),
                                  Uo.lW.from(a, 'utf8'),
                                ])
                              ),
                              c = Mo().lib.WordArray.create(r),
                              l = ci().stringify(jo()(u, c)),
                              f = {};
                            (f.USERNAME = n.username),
                              (f.PASSWORD_CLAIM_SECRET_BLOCK = s.SECRET_BLOCK),
                              (f.TIMESTAMP = a),
                              (f.PASSWORD_CLAIM_SIGNATURE = l),
                              (f.DEVICE_KEY = n.deviceKey);
                            var h = {
                              ChallengeName: 'DEVICE_PASSWORD_VERIFIER',
                              ClientId: n.pool.getClientId(),
                              ChallengeResponses: f,
                              Session: i.Session,
                            };
                            n.getUserContextData() &&
                              (h.UserContextData = n.getUserContextData()),
                              n.client.request(
                                'RespondToAuthChallenge',
                                h,
                                function (t, r) {
                                  return t
                                    ? e.onFailure(t)
                                    : ((n.signInUserSession =
                                        n.getCognitoUserSession(
                                          r.AuthenticationResult
                                        )),
                                      n.cacheTokens(),
                                      e.onSuccess(n.signInUserSession));
                                }
                              );
                          }
                        );
                      }
                    );
                });
            }),
            (t.confirmRegistration = function (e, t, n, r) {
              var o = {
                ClientId: this.pool.getClientId(),
                ConfirmationCode: e,
                Username: this.username,
                ForceAliasCreation: t,
                ClientMetadata: r,
              };
              this.getUserContextData() &&
                (o.UserContextData = this.getUserContextData()),
                this.client.request('ConfirmSignUp', o, function (e) {
                  return e ? n(e, null) : n(null, 'SUCCESS');
                });
            }),
            (t.sendCustomChallengeAnswer = function (e, t, n) {
              var r = this,
                o = {};
              (o.USERNAME = this.username), (o.ANSWER = e);
              var i = new ti(this.pool.getUserPoolId().split('_')[1]);
              this.getCachedDeviceKeyAndPassword(),
                null != this.deviceKey && (o.DEVICE_KEY = this.deviceKey);
              var s = {
                ChallengeName: 'CUSTOM_CHALLENGE',
                ChallengeResponses: o,
                ClientId: this.pool.getClientId(),
                Session: this.Session,
                ClientMetadata: n,
              };
              this.getUserContextData() &&
                (s.UserContextData = this.getUserContextData()),
                this.client.request(
                  'RespondToAuthChallenge',
                  s,
                  function (e, n) {
                    return e
                      ? t.onFailure(e)
                      : r.authenticateUserInternal(n, i, t);
                  }
                );
            }),
            (t.sendMFACode = function (e, t, n, r) {
              var o = this,
                i = {};
              (i.USERNAME = this.username), (i.SMS_MFA_CODE = e);
              var s = n || 'SMS_MFA';
              'SOFTWARE_TOKEN_MFA' === s && (i.SOFTWARE_TOKEN_MFA_CODE = e),
                null != this.deviceKey && (i.DEVICE_KEY = this.deviceKey);
              var a = {
                ChallengeName: s,
                ChallengeResponses: i,
                ClientId: this.pool.getClientId(),
                Session: this.Session,
                ClientMetadata: r,
              };
              this.getUserContextData() &&
                (a.UserContextData = this.getUserContextData()),
                this.client.request(
                  'RespondToAuthChallenge',
                  a,
                  function (e, n) {
                    if (e) return t.onFailure(e);
                    if ('DEVICE_SRP_AUTH' !== n.ChallengeName) {
                      if (
                        ((o.signInUserSession = o.getCognitoUserSession(
                          n.AuthenticationResult
                        )),
                        o.cacheTokens(),
                        null == n.AuthenticationResult.NewDeviceMetadata)
                      )
                        return t.onSuccess(o.signInUserSession);
                      var r = new ti(o.pool.getUserPoolId().split('_')[1]);
                      r.generateHashDevice(
                        n.AuthenticationResult.NewDeviceMetadata.DeviceGroupKey,
                        n.AuthenticationResult.NewDeviceMetadata.DeviceKey,
                        function (e) {
                          if (e) return t.onFailure(e);
                          var i = {
                            Salt: Uo.lW
                              .from(r.getSaltDevices(), 'hex')
                              .toString('base64'),
                            PasswordVerifier: Uo.lW
                              .from(r.getVerifierDevices(), 'hex')
                              .toString('base64'),
                          };
                          (o.verifierDevices = i.PasswordVerifier),
                            (o.deviceGroupKey =
                              n.AuthenticationResult.NewDeviceMetadata.DeviceGroupKey),
                            (o.randomPassword = r.getRandomPassword()),
                            o.client.request(
                              'ConfirmDevice',
                              {
                                DeviceKey:
                                  n.AuthenticationResult.NewDeviceMetadata
                                    .DeviceKey,
                                AccessToken: o.signInUserSession
                                  .getAccessToken()
                                  .getJwtToken(),
                                DeviceSecretVerifierConfig: i,
                                DeviceName: mi,
                              },
                              function (e, r) {
                                return e
                                  ? t.onFailure(e)
                                  : ((o.deviceKey =
                                      n.AuthenticationResult.NewDeviceMetadata.DeviceKey),
                                    o.cacheDeviceKeyAndPassword(),
                                    !0 === r.UserConfirmationNecessary
                                      ? t.onSuccess(
                                          o.signInUserSession,
                                          r.UserConfirmationNecessary
                                        )
                                      : t.onSuccess(o.signInUserSession));
                              }
                            );
                        }
                      );
                    } else o.getDeviceResponse(t);
                  }
                );
            }),
            (t.changePassword = function (e, t, n, r) {
              if (
                null == this.signInUserSession ||
                !this.signInUserSession.isValid()
              )
                return n(new Error('User is not authenticated'), null);
              this.client.request(
                'ChangePassword',
                {
                  PreviousPassword: e,
                  ProposedPassword: t,
                  AccessToken: this.signInUserSession
                    .getAccessToken()
                    .getJwtToken(),
                  ClientMetadata: r,
                },
                function (e) {
                  return e ? n(e, null) : n(null, 'SUCCESS');
                }
              );
            }),
            (t.enableMFA = function (e) {
              if (
                null == this.signInUserSession ||
                !this.signInUserSession.isValid()
              )
                return e(new Error('User is not authenticated'), null);
              var t = [];
              t.push({ DeliveryMedium: 'SMS', AttributeName: 'phone_number' }),
                this.client.request(
                  'SetUserSettings',
                  {
                    MFAOptions: t,
                    AccessToken: this.signInUserSession
                      .getAccessToken()
                      .getJwtToken(),
                  },
                  function (t) {
                    return t ? e(t, null) : e(null, 'SUCCESS');
                  }
                );
            }),
            (t.setUserMfaPreference = function (e, t, n) {
              if (
                null == this.signInUserSession ||
                !this.signInUserSession.isValid()
              )
                return n(new Error('User is not authenticated'), null);
              this.client.request(
                'SetUserMFAPreference',
                {
                  SMSMfaSettings: e,
                  SoftwareTokenMfaSettings: t,
                  AccessToken: this.signInUserSession
                    .getAccessToken()
                    .getJwtToken(),
                },
                function (e) {
                  return e ? n(e, null) : n(null, 'SUCCESS');
                }
              );
            }),
            (t.disableMFA = function (e) {
              if (
                null == this.signInUserSession ||
                !this.signInUserSession.isValid()
              )
                return e(new Error('User is not authenticated'), null);
              this.client.request(
                'SetUserSettings',
                {
                  MFAOptions: [],
                  AccessToken: this.signInUserSession
                    .getAccessToken()
                    .getJwtToken(),
                },
                function (t) {
                  return t ? e(t, null) : e(null, 'SUCCESS');
                }
              );
            }),
            (t.deleteUser = function (e, t) {
              var n = this;
              if (
                null == this.signInUserSession ||
                !this.signInUserSession.isValid()
              )
                return e(new Error('User is not authenticated'), null);
              this.client.request(
                'DeleteUser',
                {
                  AccessToken: this.signInUserSession
                    .getAccessToken()
                    .getJwtToken(),
                  ClientMetadata: t,
                },
                function (t) {
                  return t
                    ? e(t, null)
                    : (n.clearCachedUser(), e(null, 'SUCCESS'));
                }
              );
            }),
            (t.updateAttributes = function (e, t, n) {
              var r = this;
              if (
                null == this.signInUserSession ||
                !this.signInUserSession.isValid()
              )
                return t(new Error('User is not authenticated'), null);
              this.client.request(
                'UpdateUserAttributes',
                {
                  AccessToken: this.signInUserSession
                    .getAccessToken()
                    .getJwtToken(),
                  UserAttributes: e,
                  ClientMetadata: n,
                },
                function (e) {
                  return e
                    ? t(e, null)
                    : r.getUserData(
                        function () {
                          return t(null, 'SUCCESS');
                        },
                        { bypassCache: !0 }
                      );
                }
              );
            }),
            (t.getUserAttributes = function (e) {
              if (
                null == this.signInUserSession ||
                !this.signInUserSession.isValid()
              )
                return e(new Error('User is not authenticated'), null);
              this.client.request(
                'GetUser',
                {
                  AccessToken: this.signInUserSession
                    .getAccessToken()
                    .getJwtToken(),
                },
                function (t, n) {
                  if (t) return e(t, null);
                  for (var r = [], o = 0; o < n.UserAttributes.length; o++) {
                    var i = {
                        Name: n.UserAttributes[o].Name,
                        Value: n.UserAttributes[o].Value,
                      },
                      s = new pi(i);
                    r.push(s);
                  }
                  return e(null, r);
                }
              );
            }),
            (t.getMFAOptions = function (e) {
              if (
                null == this.signInUserSession ||
                !this.signInUserSession.isValid()
              )
                return e(new Error('User is not authenticated'), null);
              this.client.request(
                'GetUser',
                {
                  AccessToken: this.signInUserSession
                    .getAccessToken()
                    .getJwtToken(),
                },
                function (t, n) {
                  return t ? e(t, null) : e(null, n.MFAOptions);
                }
              );
            }),
            (t.createGetUserRequest = function () {
              return this.client.promisifyRequest('GetUser', {
                AccessToken: this.signInUserSession
                  .getAccessToken()
                  .getJwtToken(),
              });
            }),
            (t.refreshSessionIfPossible = function (e) {
              var t = this;
              return (
                void 0 === e && (e = {}),
                new Promise(function (n) {
                  var r = t.signInUserSession.getRefreshToken();
                  r && r.getToken()
                    ? t.refreshSession(r, n, e.clientMetadata)
                    : n();
                })
              );
            }),
            (t.getUserData = function (e, t) {
              var n = this;
              if (
                null == this.signInUserSession ||
                !this.signInUserSession.isValid()
              )
                return (
                  this.clearCachedUserData(),
                  e(new Error('User is not authenticated'), null)
                );
              var r = this.getUserDataFromCache();
              if (r)
                if (this.isFetchUserDataAndTokenRequired(t))
                  this.fetchUserData()
                    .then(function (e) {
                      return n.refreshSessionIfPossible(t).then(function () {
                        return e;
                      });
                    })
                    .then(function (t) {
                      return e(null, t);
                    })
                    .catch(e);
                else
                  try {
                    return void e(null, JSON.parse(r));
                  } catch (t) {
                    return this.clearCachedUserData(), void e(t, null);
                  }
              else
                this.fetchUserData()
                  .then(function (t) {
                    e(null, t);
                  })
                  .catch(e);
            }),
            (t.getUserDataFromCache = function () {
              return this.storage.getItem(this.userDataKey);
            }),
            (t.isFetchUserDataAndTokenRequired = function (e) {
              var t = (e || {}).bypassCache;
              return void 0 !== t && t;
            }),
            (t.fetchUserData = function () {
              var e = this;
              return this.createGetUserRequest().then(function (t) {
                return e.cacheUserData(t), t;
              });
            }),
            (t.deleteAttributes = function (e, t) {
              var n = this;
              if (
                null == this.signInUserSession ||
                !this.signInUserSession.isValid()
              )
                return t(new Error('User is not authenticated'), null);
              this.client.request(
                'DeleteUserAttributes',
                {
                  UserAttributeNames: e,
                  AccessToken: this.signInUserSession
                    .getAccessToken()
                    .getJwtToken(),
                },
                function (e) {
                  return e
                    ? t(e, null)
                    : n.getUserData(
                        function () {
                          return t(null, 'SUCCESS');
                        },
                        { bypassCache: !0 }
                      );
                }
              );
            }),
            (t.resendConfirmationCode = function (e, t) {
              var n = {
                ClientId: this.pool.getClientId(),
                Username: this.username,
                ClientMetadata: t,
              };
              this.client.request('ResendConfirmationCode', n, function (t, n) {
                return t ? e(t, null) : e(null, n);
              });
            }),
            (t.getSession = function (e, t) {
              if ((void 0 === t && (t = {}), null == this.username))
                return e(
                  new Error('Username is null. Cannot retrieve a new session'),
                  null
                );
              if (
                null != this.signInUserSession &&
                this.signInUserSession.isValid()
              )
                return e(null, this.signInUserSession);
              var n =
                  'CognitoIdentityServiceProvider.' +
                  this.pool.getClientId() +
                  '.' +
                  this.username,
                r = n + '.idToken',
                o = n + '.accessToken',
                i = n + '.refreshToken',
                s = n + '.clockDrift';
              if (this.storage.getItem(r)) {
                var a = new si({ IdToken: this.storage.getItem(r) }),
                  u = new oi({ AccessToken: this.storage.getItem(o) }),
                  c = new ai({ RefreshToken: this.storage.getItem(i) }),
                  l = parseInt(this.storage.getItem(s), 0) || 0,
                  f = new li({
                    IdToken: a,
                    AccessToken: u,
                    RefreshToken: c,
                    ClockDrift: l,
                  });
                if (f.isValid())
                  return (
                    (this.signInUserSession = f),
                    e(null, this.signInUserSession)
                  );
                if (!c.getToken())
                  return e(
                    new Error(
                      'Cannot retrieve a new session. Please authenticate.'
                    ),
                    null
                  );
                this.refreshSession(c, e, t.clientMetadata);
              } else
                e(
                  new Error(
                    'Local storage is missing an ID Token, Please authenticate'
                  ),
                  null
                );
            }),
            (t.refreshSession = function (e, t, n) {
              var r = this,
                o = this.pool.wrapRefreshSessionCallback
                  ? this.pool.wrapRefreshSessionCallback(t)
                  : t,
                i = {};
              i.REFRESH_TOKEN = e.getToken();
              var s =
                  'CognitoIdentityServiceProvider.' + this.pool.getClientId(),
                a = s + '.LastAuthUser';
              if (this.storage.getItem(a)) {
                this.username = this.storage.getItem(a);
                var u = s + '.' + this.username + '.deviceKey';
                (this.deviceKey = this.storage.getItem(u)),
                  (i.DEVICE_KEY = this.deviceKey);
              }
              var c = {
                ClientId: this.pool.getClientId(),
                AuthFlow: 'REFRESH_TOKEN_AUTH',
                AuthParameters: i,
                ClientMetadata: n,
              };
              this.getUserContextData() &&
                (c.UserContextData = this.getUserContextData()),
                this.client.request('InitiateAuth', c, function (t, n) {
                  if (t)
                    return (
                      'NotAuthorizedException' === t.code &&
                        r.clearCachedUser(),
                      o(t, null)
                    );
                  if (n) {
                    var i = n.AuthenticationResult;
                    return (
                      Object.prototype.hasOwnProperty.call(i, 'RefreshToken') ||
                        (i.RefreshToken = e.getToken()),
                      (r.signInUserSession = r.getCognitoUserSession(i)),
                      r.cacheTokens(),
                      o(null, r.signInUserSession)
                    );
                  }
                });
            }),
            (t.cacheTokens = function () {
              var e =
                  'CognitoIdentityServiceProvider.' + this.pool.getClientId(),
                t = e + '.' + this.username + '.idToken',
                n = e + '.' + this.username + '.accessToken',
                r = e + '.' + this.username + '.refreshToken',
                o = e + '.' + this.username + '.clockDrift',
                i = e + '.LastAuthUser';
              this.storage.setItem(
                t,
                this.signInUserSession.getIdToken().getJwtToken()
              ),
                this.storage.setItem(
                  n,
                  this.signInUserSession.getAccessToken().getJwtToken()
                ),
                this.storage.setItem(
                  r,
                  this.signInUserSession.getRefreshToken().getToken()
                ),
                this.storage.setItem(
                  o,
                  '' + this.signInUserSession.getClockDrift()
                ),
                this.storage.setItem(i, this.username);
            }),
            (t.cacheUserData = function (e) {
              this.storage.setItem(this.userDataKey, JSON.stringify(e));
            }),
            (t.clearCachedUserData = function () {
              this.storage.removeItem(this.userDataKey);
            }),
            (t.clearCachedUser = function () {
              this.clearCachedTokens(), this.clearCachedUserData();
            }),
            (t.cacheDeviceKeyAndPassword = function () {
              var e =
                  'CognitoIdentityServiceProvider.' +
                  this.pool.getClientId() +
                  '.' +
                  this.username,
                t = e + '.deviceKey',
                n = e + '.randomPasswordKey',
                r = e + '.deviceGroupKey';
              this.storage.setItem(t, this.deviceKey),
                this.storage.setItem(n, this.randomPassword),
                this.storage.setItem(r, this.deviceGroupKey);
            }),
            (t.getCachedDeviceKeyAndPassword = function () {
              var e =
                  'CognitoIdentityServiceProvider.' +
                  this.pool.getClientId() +
                  '.' +
                  this.username,
                t = e + '.deviceKey',
                n = e + '.randomPasswordKey',
                r = e + '.deviceGroupKey';
              this.storage.getItem(t) &&
                ((this.deviceKey = this.storage.getItem(t)),
                (this.randomPassword = this.storage.getItem(n)),
                (this.deviceGroupKey = this.storage.getItem(r)));
            }),
            (t.clearCachedDeviceKeyAndPassword = function () {
              var e =
                  'CognitoIdentityServiceProvider.' +
                  this.pool.getClientId() +
                  '.' +
                  this.username,
                t = e + '.deviceKey',
                n = e + '.randomPasswordKey',
                r = e + '.deviceGroupKey';
              this.storage.removeItem(t),
                this.storage.removeItem(n),
                this.storage.removeItem(r);
            }),
            (t.clearCachedTokens = function () {
              var e =
                  'CognitoIdentityServiceProvider.' + this.pool.getClientId(),
                t = e + '.' + this.username + '.idToken',
                n = e + '.' + this.username + '.accessToken',
                r = e + '.' + this.username + '.refreshToken',
                o = e + '.LastAuthUser',
                i = e + '.' + this.username + '.clockDrift';
              this.storage.removeItem(t),
                this.storage.removeItem(n),
                this.storage.removeItem(r),
                this.storage.removeItem(o),
                this.storage.removeItem(i);
            }),
            (t.getCognitoUserSession = function (e) {
              var t = new si(e),
                n = new oi(e),
                r = new ai(e);
              return new li({ IdToken: t, AccessToken: n, RefreshToken: r });
            }),
            (t.forgotPassword = function (e, t) {
              var n = {
                ClientId: this.pool.getClientId(),
                Username: this.username,
                ClientMetadata: t,
              };
              this.getUserContextData() &&
                (n.UserContextData = this.getUserContextData()),
                this.client.request('ForgotPassword', n, function (t, n) {
                  return t
                    ? e.onFailure(t)
                    : 'function' == typeof e.inputVerificationCode
                    ? e.inputVerificationCode(n)
                    : e.onSuccess(n);
                });
            }),
            (t.confirmPassword = function (e, t, n, r) {
              var o = {
                ClientId: this.pool.getClientId(),
                Username: this.username,
                ConfirmationCode: e,
                Password: t,
                ClientMetadata: r,
              };
              this.getUserContextData() &&
                (o.UserContextData = this.getUserContextData()),
                this.client.request('ConfirmForgotPassword', o, function (e) {
                  return e ? n.onFailure(e) : n.onSuccess('SUCCESS');
                });
            }),
            (t.getAttributeVerificationCode = function (e, t, n) {
              if (
                null == this.signInUserSession ||
                !this.signInUserSession.isValid()
              )
                return t.onFailure(new Error('User is not authenticated'));
              this.client.request(
                'GetUserAttributeVerificationCode',
                {
                  AttributeName: e,
                  AccessToken: this.signInUserSession
                    .getAccessToken()
                    .getJwtToken(),
                  ClientMetadata: n,
                },
                function (e, n) {
                  return e
                    ? t.onFailure(e)
                    : 'function' == typeof t.inputVerificationCode
                    ? t.inputVerificationCode(n)
                    : t.onSuccess('SUCCESS');
                }
              );
            }),
            (t.verifyAttribute = function (e, t, n) {
              if (
                null == this.signInUserSession ||
                !this.signInUserSession.isValid()
              )
                return n.onFailure(new Error('User is not authenticated'));
              this.client.request(
                'VerifyUserAttribute',
                {
                  AttributeName: e,
                  Code: t,
                  AccessToken: this.signInUserSession
                    .getAccessToken()
                    .getJwtToken(),
                },
                function (e) {
                  return e ? n.onFailure(e) : n.onSuccess('SUCCESS');
                }
              );
            }),
            (t.getDevice = function (e) {
              if (
                null == this.signInUserSession ||
                !this.signInUserSession.isValid()
              )
                return e.onFailure(new Error('User is not authenticated'));
              this.client.request(
                'GetDevice',
                {
                  AccessToken: this.signInUserSession
                    .getAccessToken()
                    .getJwtToken(),
                  DeviceKey: this.deviceKey,
                },
                function (t, n) {
                  return t ? e.onFailure(t) : e.onSuccess(n);
                }
              );
            }),
            (t.forgetSpecificDevice = function (e, t) {
              if (
                null == this.signInUserSession ||
                !this.signInUserSession.isValid()
              )
                return t.onFailure(new Error('User is not authenticated'));
              this.client.request(
                'ForgetDevice',
                {
                  AccessToken: this.signInUserSession
                    .getAccessToken()
                    .getJwtToken(),
                  DeviceKey: e,
                },
                function (e) {
                  return e ? t.onFailure(e) : t.onSuccess('SUCCESS');
                }
              );
            }),
            (t.forgetDevice = function (e) {
              var t = this;
              this.forgetSpecificDevice(this.deviceKey, {
                onFailure: e.onFailure,
                onSuccess: function (n) {
                  return (
                    (t.deviceKey = null),
                    (t.deviceGroupKey = null),
                    (t.randomPassword = null),
                    t.clearCachedDeviceKeyAndPassword(),
                    e.onSuccess(n)
                  );
                },
              });
            }),
            (t.setDeviceStatusRemembered = function (e) {
              if (
                null == this.signInUserSession ||
                !this.signInUserSession.isValid()
              )
                return e.onFailure(new Error('User is not authenticated'));
              this.client.request(
                'UpdateDeviceStatus',
                {
                  AccessToken: this.signInUserSession
                    .getAccessToken()
                    .getJwtToken(),
                  DeviceKey: this.deviceKey,
                  DeviceRememberedStatus: 'remembered',
                },
                function (t) {
                  return t ? e.onFailure(t) : e.onSuccess('SUCCESS');
                }
              );
            }),
            (t.setDeviceStatusNotRemembered = function (e) {
              if (
                null == this.signInUserSession ||
                !this.signInUserSession.isValid()
              )
                return e.onFailure(new Error('User is not authenticated'));
              this.client.request(
                'UpdateDeviceStatus',
                {
                  AccessToken: this.signInUserSession
                    .getAccessToken()
                    .getJwtToken(),
                  DeviceKey: this.deviceKey,
                  DeviceRememberedStatus: 'not_remembered',
                },
                function (t) {
                  return t ? e.onFailure(t) : e.onSuccess('SUCCESS');
                }
              );
            }),
            (t.listDevices = function (e, t, n) {
              if (
                null == this.signInUserSession ||
                !this.signInUserSession.isValid()
              )
                return n.onFailure(new Error('User is not authenticated'));
              var r = {
                AccessToken: this.signInUserSession
                  .getAccessToken()
                  .getJwtToken(),
                Limit: e,
              };
              t && (r.PaginationToken = t),
                this.client.request('ListDevices', r, function (e, t) {
                  return e ? n.onFailure(e) : n.onSuccess(t);
                });
            }),
            (t.globalSignOut = function (e) {
              var t = this;
              if (
                null == this.signInUserSession ||
                !this.signInUserSession.isValid()
              )
                return e.onFailure(new Error('User is not authenticated'));
              this.client.request(
                'GlobalSignOut',
                {
                  AccessToken: this.signInUserSession
                    .getAccessToken()
                    .getJwtToken(),
                },
                function (n) {
                  return n
                    ? e.onFailure(n)
                    : (t.clearCachedUser(), e.onSuccess('SUCCESS'));
                }
              );
            }),
            (t.signOut = function (e) {
              var t = this;
              e && 'function' == typeof e
                ? this.getSession(function (n, r) {
                    if (n) return e(n);
                    t.revokeTokens(function (n) {
                      t.cleanClientData(), e(n);
                    });
                  })
                : this.cleanClientData();
            }),
            (t.revokeTokens = function (e) {
              if (
                (void 0 === e && (e = function () {}), 'function' != typeof e)
              )
                throw new Error(
                  'Invalid revokeTokenCallback. It should be a function.'
                );
              if (!this.signInUserSession)
                return e(new Error('User is not authenticated'));
              if (!this.signInUserSession.getAccessToken())
                return e(new Error('No Access token available'));
              var t = this.signInUserSession.getRefreshToken().getToken(),
                n = this.signInUserSession.getAccessToken();
              if (this.isSessionRevocable(n) && t)
                return this.revokeToken({ token: t, callback: e });
              e();
            }),
            (t.isSessionRevocable = function (e) {
              if (e && 'function' == typeof e.decodePayload)
                try {
                  return !!e.decodePayload().origin_jti;
                } catch (e) {}
              return !1;
            }),
            (t.cleanClientData = function () {
              (this.signInUserSession = null), this.clearCachedUser();
            }),
            (t.revokeToken = function (e) {
              var t = e.token,
                n = e.callback;
              this.client.requestWithRetry(
                'RevokeToken',
                { Token: t, ClientId: this.pool.getClientId() },
                function (e) {
                  if (e) return n(e);
                  n();
                }
              );
            }),
            (t.sendMFASelectionAnswer = function (e, t) {
              var n = this,
                r = {};
              (r.USERNAME = this.username), (r.ANSWER = e);
              var o = {
                ChallengeName: 'SELECT_MFA_TYPE',
                ChallengeResponses: r,
                ClientId: this.pool.getClientId(),
                Session: this.Session,
              };
              this.getUserContextData() &&
                (o.UserContextData = this.getUserContextData()),
                this.client.request(
                  'RespondToAuthChallenge',
                  o,
                  function (r, o) {
                    return r
                      ? t.onFailure(r)
                      : ((n.Session = o.Session),
                        'SMS_MFA' === e
                          ? t.mfaRequired(
                              o.ChallengeName,
                              o.ChallengeParameters
                            )
                          : 'SOFTWARE_TOKEN_MFA' === e
                          ? t.totpRequired(
                              o.ChallengeName,
                              o.ChallengeParameters
                            )
                          : void 0);
                  }
                );
            }),
            (t.getUserContextData = function () {
              return this.pool.getUserContextData(this.username);
            }),
            (t.associateSoftwareToken = function (e) {
              var t = this;
              null != this.signInUserSession && this.signInUserSession.isValid()
                ? this.client.request(
                    'AssociateSoftwareToken',
                    {
                      AccessToken: this.signInUserSession
                        .getAccessToken()
                        .getJwtToken(),
                    },
                    function (t, n) {
                      return t
                        ? e.onFailure(t)
                        : e.associateSecretCode(n.SecretCode);
                    }
                  )
                : this.client.request(
                    'AssociateSoftwareToken',
                    { Session: this.Session },
                    function (n, r) {
                      return n
                        ? e.onFailure(n)
                        : ((t.Session = r.Session),
                          e.associateSecretCode(r.SecretCode));
                    }
                  );
            }),
            (t.verifySoftwareToken = function (e, t, n) {
              var r = this;
              null != this.signInUserSession && this.signInUserSession.isValid()
                ? this.client.request(
                    'VerifySoftwareToken',
                    {
                      AccessToken: this.signInUserSession
                        .getAccessToken()
                        .getJwtToken(),
                      UserCode: e,
                      FriendlyDeviceName: t,
                    },
                    function (e, t) {
                      return e ? n.onFailure(e) : n.onSuccess(t);
                    }
                  )
                : this.client.request(
                    'VerifySoftwareToken',
                    {
                      Session: this.Session,
                      UserCode: e,
                      FriendlyDeviceName: t,
                    },
                    function (e, t) {
                      if (e) return n.onFailure(e);
                      r.Session = t.Session;
                      var o = {};
                      o.USERNAME = r.username;
                      var i = {
                        ChallengeName: 'MFA_SETUP',
                        ClientId: r.pool.getClientId(),
                        ChallengeResponses: o,
                        Session: r.Session,
                      };
                      r.getUserContextData() &&
                        (i.UserContextData = r.getUserContextData()),
                        r.client.request(
                          'RespondToAuthChallenge',
                          i,
                          function (e, t) {
                            return e
                              ? n.onFailure(e)
                              : ((r.signInUserSession = r.getCognitoUserSession(
                                  t.AuthenticationResult
                                )),
                                r.cacheTokens(),
                                n.onSuccess(r.signInUserSession));
                          }
                        );
                    }
                  );
            }),
            e
          );
        })(),
        wi =
          (n(2405),
          {
            userAgent: 'aws-amplify/5.0.4 js',
            product: '',
            navigator: null,
            isReactNative: !1,
          });
      function Si() {}
      'undefined' != typeof navigator &&
        navigator.product &&
        ((wi.product = navigator.product || ''),
        (wi.navigator = navigator || null),
        'ReactNative' === navigator.product
          ? ((wi.userAgent = 'aws-amplify/5.0.4 react-native'),
            (wi.isReactNative = !0))
          : ((wi.userAgent = 'aws-amplify/5.0.4 js'), (wi.isReactNative = !1))),
        (Si.prototype.userAgent = wi.userAgent);
      const _i = Si;
      function Ai(e) {
        var t = 'function' == typeof Map ? new Map() : void 0;
        return (
          (Ai = function (e) {
            if (
              null === e ||
              ((n = e),
              -1 === Function.toString.call(n).indexOf('[native code]'))
            )
              return e;
            var n;
            if ('function' != typeof e)
              throw new TypeError(
                'Super expression must either be null or a function'
              );
            if (void 0 !== t) {
              if (t.has(e)) return t.get(e);
              t.set(e, r);
            }
            function r() {
              return Ei(e, arguments, Pi(this).constructor);
            }
            return (
              (r.prototype = Object.create(e.prototype, {
                constructor: {
                  value: r,
                  enumerable: !1,
                  writable: !0,
                  configurable: !0,
                },
              })),
              Ii(r, e)
            );
          }),
          Ai(e)
        );
      }
      function Ei(e, t, n) {
        return (
          (Ei = Ci()
            ? Reflect.construct.bind()
            : function (e, t, n) {
                var r = [null];
                r.push.apply(r, t);
                var o = new (Function.bind.apply(e, r))();
                return n && Ii(o, n.prototype), o;
              }),
          Ei.apply(null, arguments)
        );
      }
      function Ci() {
        if ('undefined' == typeof Reflect || !Reflect.construct) return !1;
        if (Reflect.construct.sham) return !1;
        if ('function' == typeof Proxy) return !0;
        try {
          return (
            Boolean.prototype.valueOf.call(
              Reflect.construct(Boolean, [], function () {})
            ),
            !0
          );
        } catch (e) {
          return !1;
        }
      }
      function Ii(e, t) {
        return (
          (Ii = Object.setPrototypeOf
            ? Object.setPrototypeOf.bind()
            : function (e, t) {
                return (e.__proto__ = t), e;
              }),
          Ii(e, t)
        );
      }
      function Pi(e) {
        return (
          (Pi = Object.setPrototypeOf
            ? Object.getPrototypeOf.bind()
            : function (e) {
                return e.__proto__ || Object.getPrototypeOf(e);
              }),
          Pi(e)
        );
      }
      var Oi = (function (e) {
          function t(t, n, r, o) {
            var i;
            return (
              ((i = e.call(this, t) || this).code = n),
              (i.name = r),
              (i.statusCode = o),
              i
            );
          }
          return (
            (r = e),
            ((n = t).prototype = Object.create(r.prototype)),
            (n.prototype.constructor = n),
            Ii(n, r),
            t
          );
          var n, r;
        })(Ai(Error)),
        Ti = (function () {
          function e(e, t, n) {
            this.endpoint = t || 'https://cognito-idp.' + e + '.amazonaws.com/';
            var r = (n || {}).credentials;
            this.fetchOptions = r ? { credentials: r } : {};
          }
          var t = e.prototype;
          return (
            (t.promisifyRequest = function (e, t) {
              var n = this;
              return new Promise(function (r, o) {
                n.request(e, t, function (e, t) {
                  e ? o(new Oi(e.message, e.code, e.name, e.statusCode)) : r(t);
                });
              });
            }),
            (t.requestWithRetry = function (e, t, n) {
              var r,
                o,
                i = this;
              ((r = [t]),
              (o = 5e3),
              void 0 === o && (o = Ui),
              xi(
                function (t) {
                  return new Promise(function (n, r) {
                    i.request(e, t, function (e, t) {
                      e ? r(e) : n(t);
                    });
                  });
                },
                r,
                (function (e) {
                  return function (t) {
                    var n = 100 * Math.pow(2, t) + 100 * Math.random();
                    return !(n > e) && n;
                  };
                })(o)
              ))
                .then(function (e) {
                  return n(null, e);
                })
                .catch(function (e) {
                  return n(e);
                });
            }),
            (t.request = function (e, t, n) {
              var r,
                o = {
                  'Content-Type': 'application/x-amz-json-1.1',
                  'X-Amz-Target': 'AWSCognitoIdentityProviderService.' + e,
                  'X-Amz-User-Agent': _i.prototype.userAgent,
                },
                i = Object.assign({}, this.fetchOptions, {
                  headers: o,
                  method: 'POST',
                  mode: 'cors',
                  cache: 'no-cache',
                  body: JSON.stringify(t),
                });
              fetch(this.endpoint, i)
                .then(
                  function (e) {
                    return (r = e), e;
                  },
                  function (e) {
                    if (e instanceof TypeError)
                      throw new Error('Network error');
                    throw e;
                  }
                )
                .then(function (e) {
                  return e.json().catch(function () {
                    return {};
                  });
                })
                .then(function (e) {
                  if (r.ok) return n(null, e);
                  var t = (e.__type || e.code).split('#').pop(),
                    o = new Error(e.message || e.Message || null);
                  return (o.name = t), (o.code = t), n(o);
                })
                .catch(function (e) {
                  if (r && r.headers && r.headers.get('x-amzn-errortype'))
                    try {
                      var t = r.headers.get('x-amzn-errortype').split(':')[0],
                        o = new Error(r.status ? r.status.toString() : null);
                      return (
                        (o.code = t),
                        (o.name = t),
                        (o.statusCode = r.status),
                        n(o)
                      );
                    } catch (t) {
                      return n(e);
                    }
                  else
                    e instanceof Error &&
                      'Network error' === e.message &&
                      (e.code = 'NetworkError');
                  return n(e);
                });
            }),
            e
          );
        })();
      function xi(e, t, n, r) {
        if ((void 0 === r && (r = 1), 'function' != typeof e))
          throw Error('functionToRetry must be a function');
        return (
          e.name,
          JSON.stringify(t),
          e.apply(void 0, t).catch(function (o) {
            if ((e.name, (i = o) && i.nonRetryable)) throw (e.name, o);
            var i,
              s = n(r, t, o);
            if ((e.name, !1 !== s))
              return new Promise(function (e) {
                return setTimeout(e, s);
              }).then(function () {
                return xi(e, t, n, r + 1);
              });
            throw o;
          })
        );
      }
      Error;
      var Ui = 3e5,
        ki = (function () {
          function e(e, t) {
            var n = e || {},
              r = n.UserPoolId,
              o = n.ClientId,
              i = n.endpoint,
              s = n.fetchOptions,
              a = n.AdvancedSecurityDataCollectionFlag;
            if (!r || !o)
              throw new Error('Both UserPoolId and ClientId are required.');
            if (r.length > 55 || !/^[\w-]+_[0-9a-zA-Z]+$/.test(r))
              throw new Error('Invalid UserPoolId format.');
            var u = r.split('_')[0];
            (this.userPoolId = r),
              (this.clientId = o),
              (this.client = new Ti(u, i, s)),
              (this.advancedSecurityDataCollectionFlag = !1 !== a),
              (this.storage = e.Storage || new yi().getStorage()),
              t && (this.wrapRefreshSessionCallback = t);
          }
          var t = e.prototype;
          return (
            (t.getUserPoolId = function () {
              return this.userPoolId;
            }),
            (t.getClientId = function () {
              return this.clientId;
            }),
            (t.signUp = function (e, t, n, r, o, i) {
              var s = this,
                a = {
                  ClientId: this.clientId,
                  Username: e,
                  Password: t,
                  UserAttributes: n,
                  ValidationData: r,
                  ClientMetadata: i,
                };
              this.getUserContextData(e) &&
                (a.UserContextData = this.getUserContextData(e)),
                this.client.request('SignUp', a, function (t, n) {
                  if (t) return o(t, null);
                  var r = { Username: e, Pool: s, Storage: s.storage },
                    i = {
                      user: new bi(r),
                      userConfirmed: n.UserConfirmed,
                      userSub: n.UserSub,
                      codeDeliveryDetails: n.CodeDeliveryDetails,
                    };
                  return o(null, i);
                });
            }),
            (t.getCurrentUser = function () {
              var e =
                  'CognitoIdentityServiceProvider.' +
                  this.clientId +
                  '.LastAuthUser',
                t = this.storage.getItem(e);
              if (t) {
                var n = { Username: t, Pool: this, Storage: this.storage };
                return new bi(n);
              }
              return null;
            }),
            (t.getUserContextData = function (e) {
              if ('undefined' != typeof AmazonCognitoAdvancedSecurityData) {
                var t = AmazonCognitoAdvancedSecurityData;
                if (this.advancedSecurityDataCollectionFlag) {
                  var n = t.getData(e, this.userPoolId, this.clientId);
                  if (n) return { EncodedData: n };
                }
                return {};
              }
            }),
            e
          );
        })(),
        Mi = n(2034),
        Ri = (function () {
          function e(e) {
            if (!e.domain)
              throw new Error(
                'The domain of cookieStorage can not be undefined.'
              );
            if (
              ((this.domain = e.domain),
              e.path ? (this.path = e.path) : (this.path = '/'),
              Object.prototype.hasOwnProperty.call(e, 'expires')
                ? (this.expires = e.expires)
                : (this.expires = 365),
              Object.prototype.hasOwnProperty.call(e, 'secure')
                ? (this.secure = e.secure)
                : (this.secure = !0),
              Object.prototype.hasOwnProperty.call(e, 'sameSite'))
            ) {
              if (!['strict', 'lax', 'none'].includes(e.sameSite))
                throw new Error(
                  'The sameSite value of cookieStorage must be "lax", "strict" or "none".'
                );
              if ('none' === e.sameSite && !this.secure)
                throw new Error(
                  'sameSite = None requires the Secure attribute in latest browser versions.'
                );
              this.sameSite = e.sameSite;
            } else this.sameSite = null;
          }
          var t = e.prototype;
          return (
            (t.setItem = function (e, t) {
              var n = {
                path: this.path,
                expires: this.expires,
                domain: this.domain,
                secure: this.secure,
              };
              return (
                this.sameSite && (n.sameSite = this.sameSite),
                Mi.set(e, t, n),
                Mi.get(e)
              );
            }),
            (t.getItem = function (e) {
              return Mi.get(e);
            }),
            (t.removeItem = function (e) {
              var t = {
                path: this.path,
                expires: this.expires,
                domain: this.domain,
                secure: this.secure,
              };
              return (
                this.sameSite && (t.sameSite = this.sameSite), Mi.remove(e, t)
              );
            }),
            (t.clear = function () {
              for (
                var e = Mi.get(), t = Object.keys(e).length, n = 0;
                n < t;
                ++n
              )
                this.removeItem(Object.keys(e)[n]);
              return {};
            }),
            e
          );
        })(),
        Ni = n(883),
        Di = function (e) {
          var t = window.open(e, '_self');
          return t ? Promise.resolve(t) : Promise.reject();
        },
        ji = function () {
          return (
            (ji =
              Object.assign ||
              function (e) {
                for (var t, n = 1, r = arguments.length; n < r; n++)
                  for (var o in (t = arguments[n]))
                    Object.prototype.hasOwnProperty.call(t, o) && (e[o] = t[o]);
                return e;
              }),
            ji.apply(this, arguments)
          );
        },
        Fi = function (e, t, n, r) {
          return new (n || (n = Promise))(function (o, i) {
            function s(e) {
              try {
                u(r.next(e));
              } catch (e) {
                i(e);
              }
            }
            function a(e) {
              try {
                u(r.throw(e));
              } catch (e) {
                i(e);
              }
            }
            function u(e) {
              var t;
              e.done
                ? o(e.value)
                : ((t = e.value),
                  t instanceof n
                    ? t
                    : new n(function (e) {
                        e(t);
                      })).then(s, a);
            }
            u((r = r.apply(e, t || [])).next());
          });
        },
        Li = function (e, t) {
          var n,
            r,
            o,
            i,
            s = {
              label: 0,
              sent: function () {
                if (1 & o[0]) throw o[1];
                return o[1];
              },
              trys: [],
              ops: [],
            };
          return (
            (i = { next: a(0), throw: a(1), return: a(2) }),
            'function' == typeof Symbol &&
              (i[Symbol.iterator] = function () {
                return this;
              }),
            i
          );
          function a(i) {
            return function (a) {
              return (function (i) {
                if (n) throw new TypeError('Generator is already executing.');
                for (; s; )
                  try {
                    if (
                      ((n = 1),
                      r &&
                        (o =
                          2 & i[0]
                            ? r.return
                            : i[0]
                            ? r.throw || ((o = r.return) && o.call(r), 0)
                            : r.next) &&
                        !(o = o.call(r, i[1])).done)
                    )
                      return o;
                    switch (((r = 0), o && (i = [2 & i[0], o.value]), i[0])) {
                      case 0:
                      case 1:
                        o = i;
                        break;
                      case 4:
                        return s.label++, { value: i[1], done: !1 };
                      case 5:
                        s.label++, (r = i[1]), (i = [0]);
                        continue;
                      case 7:
                        (i = s.ops.pop()), s.trys.pop();
                        continue;
                      default:
                        if (
                          !(
                            (o = (o = s.trys).length > 0 && o[o.length - 1]) ||
                            (6 !== i[0] && 2 !== i[0])
                          )
                        ) {
                          s = 0;
                          continue;
                        }
                        if (
                          3 === i[0] &&
                          (!o || (i[1] > o[0] && i[1] < o[3]))
                        ) {
                          s.label = i[1];
                          break;
                        }
                        if (6 === i[0] && s.label < o[1]) {
                          (s.label = o[1]), (o = i);
                          break;
                        }
                        if (o && s.label < o[2]) {
                          (s.label = o[2]), s.ops.push(i);
                          break;
                        }
                        o[2] && s.ops.pop(), s.trys.pop();
                        continue;
                    }
                    i = t.call(e, s);
                  } catch (e) {
                    (i = [6, e]), (r = 0);
                  } finally {
                    n = o = 0;
                  }
                if (5 & i[0]) throw i[1];
                return { value: i[0] ? i[1] : void 0, done: !0 };
              })([i, a]);
            };
          }
        },
        Bi = function (e, t) {
          var n = 'function' == typeof Symbol && e[Symbol.iterator];
          if (!n) return e;
          var r,
            o,
            i = n.call(e),
            s = [];
          try {
            for (; (void 0 === t || t-- > 0) && !(r = i.next()).done; )
              s.push(r.value);
          } catch (e) {
            o = { error: e };
          } finally {
            try {
              r && !r.done && (n = i.return) && n.call(i);
            } finally {
              if (o) throw o.error;
            }
          }
          return s;
        },
        Vi =
          'undefined' != typeof Symbol && 'function' == typeof Symbol.for
            ? Symbol.for('amplify_default')
            : '@@amplify_default',
        qi = function (e, t, n) {
          m.dispatch('auth', { event: e, data: t, message: n }, 'Auth', Vi);
        },
        zi = new f('OAuth'),
        Ki = (function () {
          function t(e) {
            var t = e.config,
              n = e.cognitoClientId,
              r = e.scopes,
              o = void 0 === r ? [] : r;
            if (
              ((this._urlOpener = t.urlOpener || Di),
              (this._config = t),
              (this._cognitoClientId = n),
              !this.isValidScopes(o))
            )
              throw Error('scopes must be a String Array');
            this._scopes = o;
          }
          return (
            (t.prototype.isValidScopes = function (e) {
              return (
                Array.isArray(e) &&
                e.every(function (e) {
                  return 'string' == typeof e;
                })
              );
            }),
            (t.prototype.oauthSignIn = function (t, n, r, o, i, s) {
              void 0 === t && (t = 'code'), void 0 === i && (i = e.Cognito);
              var a = this._generateState(32),
                u = s
                  ? a +
                    '-' +
                    s
                      .split('')
                      .map(function (e) {
                        return e.charCodeAt(0).toString(16).padStart(2, '0');
                      })
                      .join('')
                  : a;
              !(function (e) {
                window.sessionStorage.setItem('oauth_state', e);
              })(u);
              var c,
                l = this._generateRandom(128);
              (c = l), window.sessionStorage.setItem('ouath_pkce_key', c);
              var f = this._generateChallenge(l),
                h = this._scopes.join(' '),
                d = Object.entries(
                  ji(
                    ji(
                      {
                        redirect_uri: r,
                        response_type: t,
                        client_id: o,
                        identity_provider: i,
                        scope: h,
                        state: u,
                      },
                      'code' === t ? { code_challenge: f } : {}
                    ),
                    'code' === t ? { code_challenge_method: 'S256' } : {}
                  )
                )
                  .map(function (e) {
                    var t = Bi(e, 2),
                      n = t[0],
                      r = t[1];
                    return encodeURIComponent(n) + '=' + encodeURIComponent(r);
                  })
                  .join('&'),
                p = 'https://' + n + '/oauth2/authorize?' + d;
              zi.debug('Redirecting to ' + p), this._urlOpener(p, r);
            }),
            (t.prototype._handleCodeFlow = function (e) {
              return Fi(this, void 0, void 0, function () {
                var t, n, r, o, s, a, u, c, l, f, h, d, p, g;
                return Li(this, function (v) {
                  switch (v.label) {
                    case 0:
                      return (
                        (t = ((0, Ni.Qc)(e).query || '')
                          .split('&')
                          .map(function (e) {
                            return e.split('=');
                          })
                          .reduce(
                            function (e, t) {
                              var n,
                                r = Bi(t, 2),
                                o = r[0],
                                i = r[1];
                              return ji(ji({}, e), (((n = {})[o] = i), n));
                            },
                            { code: void 0 }
                          ).code),
                        (n = (0, Ni.Qc)(e).pathname || '/'),
                        (r =
                          (0, Ni.Qc)(this._config.redirectSignIn).pathname ||
                          '/'),
                        t && n === r
                          ? ((o =
                              'https://' +
                              this._config.domain +
                              '/oauth2/token'),
                            qi('codeFlow', {}, 'Retrieving tokens from ' + o),
                            (s = i(this._config)
                              ? this._cognitoClientId
                              : this._config.clientID),
                            (a = i(this._config)
                              ? this._config.redirectSignIn
                              : this._config.redirectUri),
                            (y =
                              window.sessionStorage.getItem('ouath_pkce_key')),
                            window.sessionStorage.removeItem('ouath_pkce_key'),
                            (c = ji(
                              {
                                grant_type: 'authorization_code',
                                code: t,
                                client_id: s,
                                redirect_uri: a,
                              },
                              (u = y) ? { code_verifier: u } : {}
                            )),
                            zi.debug(
                              'Calling token endpoint: ' + o + ' with',
                              c
                            ),
                            (l = Object.entries(c)
                              .map(function (e) {
                                var t = Bi(e, 2),
                                  n = t[0],
                                  r = t[1];
                                return (
                                  encodeURIComponent(n) +
                                  '=' +
                                  encodeURIComponent(r)
                                );
                              })
                              .join('&')),
                            [
                              4,
                              fetch(o, {
                                method: 'POST',
                                headers: {
                                  'Content-Type':
                                    'application/x-www-form-urlencoded',
                                },
                                body: l,
                              }),
                            ])
                          : [2]
                      );
                    case 1:
                      return [4, v.sent().json()];
                    case 2:
                      if (
                        ((f = v.sent()),
                        (h = f.access_token),
                        (d = f.refresh_token),
                        (p = f.id_token),
                        (g = f.error))
                      )
                        throw new Error(g);
                      return [
                        2,
                        { accessToken: h, refreshToken: d, idToken: p },
                      ];
                  }
                  var y;
                });
              });
            }),
            (t.prototype._handleImplicitFlow = function (e) {
              return Fi(this, void 0, void 0, function () {
                var t, n, r;
                return Li(this, function (o) {
                  return (
                    (t = ((0, Ni.Qc)(e).hash || '#')
                      .substr(1)
                      .split('&')
                      .map(function (e) {
                        return e.split('=');
                      })
                      .reduce(
                        function (e, t) {
                          var n,
                            r = Bi(t, 2),
                            o = r[0],
                            i = r[1];
                          return ji(ji({}, e), (((n = {})[o] = i), n));
                        },
                        { id_token: void 0, access_token: void 0 }
                      )),
                    (n = t.id_token),
                    (r = t.access_token),
                    qi('implicitFlow', {}, 'Got tokens from ' + e),
                    zi.debug('Retrieving implicit tokens from ' + e + ' with'),
                    [2, { accessToken: r, idToken: n, refreshToken: null }]
                  );
                });
              });
            }),
            (t.prototype.handleAuthResponse = function (e) {
              return Fi(this, void 0, void 0, function () {
                var t, n, r, o, i, s, a;
                return Li(this, function (u) {
                  switch (u.label) {
                    case 0:
                      if (
                        (u.trys.push([0, 5, , 6]),
                        (t = e
                          ? ji(
                              ji(
                                {},
                                ((0, Ni.Qc)(e).hash || '#')
                                  .substr(1)
                                  .split('&')
                                  .map(function (e) {
                                    return e.split('=');
                                  })
                                  .reduce(function (e, t) {
                                    var n = Bi(t, 2),
                                      r = n[0],
                                      o = n[1];
                                    return (e[r] = o), e;
                                  }, {})
                              ),
                              ((0, Ni.Qc)(e).query || '')
                                .split('&')
                                .map(function (e) {
                                  return e.split('=');
                                })
                                .reduce(function (e, t) {
                                  var n = Bi(t, 2),
                                    r = n[0],
                                    o = n[1];
                                  return (e[r] = o), e;
                                }, {})
                            )
                          : {}),
                        (n = t.error),
                        (r = t.error_description),
                        n)
                      )
                        throw new Error(r);
                      return (
                        (o = this._validateState(t)),
                        zi.debug(
                          'Starting ' +
                            this._config.responseType +
                            ' flow with ' +
                            e
                        ),
                        'code' !== this._config.responseType
                          ? [3, 2]
                          : ((i = [{}]), [4, this._handleCodeFlow(e)])
                      );
                    case 1:
                      return [
                        2,
                        ji.apply(void 0, [
                          ji.apply(void 0, i.concat([u.sent()])),
                          { state: o },
                        ]),
                      ];
                    case 2:
                      return (s = [{}]), [4, this._handleImplicitFlow(e)];
                    case 3:
                      return [
                        2,
                        ji.apply(void 0, [
                          ji.apply(void 0, s.concat([u.sent()])),
                          { state: o },
                        ]),
                      ];
                    case 4:
                      return [3, 6];
                    case 5:
                      throw (
                        ((a = u.sent()),
                        zi.error('Error handling auth response.', a),
                        a)
                      );
                    case 6:
                      return [2];
                  }
                });
              });
            }),
            (t.prototype._validateState = function (e) {
              if (e) {
                var t,
                  n =
                    ((t = window.sessionStorage.getItem('oauth_state')),
                    window.sessionStorage.removeItem('oauth_state'),
                    t),
                  r = e.state;
                if (n && n !== r)
                  throw new Error('Invalid state in OAuth flow');
                return r;
              }
            }),
            (t.prototype.signOut = function () {
              return Fi(this, void 0, void 0, function () {
                var e, t, n;
                return Li(this, function (r) {
                  return (
                    (e = 'https://' + this._config.domain + '/logout?'),
                    (t = i(this._config)
                      ? this._cognitoClientId
                      : this._config.oauth.clientID),
                    (n = i(this._config)
                      ? this._config.redirectSignOut
                      : this._config.returnTo),
                    (e += Object.entries({
                      client_id: t,
                      logout_uri: encodeURIComponent(n),
                    })
                      .map(function (e) {
                        var t = Bi(e, 2);
                        return t[0] + '=' + t[1];
                      })
                      .join('&')),
                    qi(
                      'oAuthSignOut',
                      { oAuth: 'signOut' },
                      'Signing out from ' + e
                    ),
                    zi.debug('Signing out from ' + e),
                    [2, this._urlOpener(e, n)]
                  );
                });
              });
            }),
            (t.prototype._generateState = function (e) {
              for (
                var t = '',
                  n = e,
                  r =
                    '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
                n > 0;
                --n
              )
                t += r[Math.round(Math.random() * (r.length - 1))];
              return t;
            }),
            (t.prototype._generateChallenge = function (e) {
              return this._base64URL(No()(e));
            }),
            (t.prototype._base64URL = function (e) {
              return e
                .toString(ci())
                .replace(/=/g, '')
                .replace(/\+/g, '-')
                .replace(/\//g, '_');
            }),
            (t.prototype._generateRandom = function (e) {
              var t = new Uint8Array(e);
              if ('undefined' != typeof window && window.crypto)
                window.crypto.getRandomValues(t);
              else
                for (var n = 0; n < e; n += 1)
                  t[n] =
                    (Math.random() *
                      'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~'
                        .length) |
                    0;
              return this._bufferToString(t);
            }),
            (t.prototype._bufferToString = function (e) {
              for (
                var t =
                    'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789',
                  n = [],
                  r = 0;
                r < e.byteLength;
                r += 1
              ) {
                var o = e[r] % t.length;
                n.push(t[o]);
              }
              return n.join('');
            }),
            t
          );
        })();
      const Hi = Ki;
      var Wi;
      !(function (e) {
        (e.DEFAULT_MSG = 'Authentication Error'),
          (e.EMPTY_EMAIL = 'Email cannot be empty'),
          (e.EMPTY_PHONE = 'Phone number cannot be empty'),
          (e.EMPTY_USERNAME = 'Username cannot be empty'),
          (e.INVALID_USERNAME =
            'The username should either be a string or one of the sign in types'),
          (e.EMPTY_PASSWORD = 'Password cannot be empty'),
          (e.EMPTY_CODE = 'Confirmation code cannot be empty'),
          (e.SIGN_UP_ERROR = 'Error creating account'),
          (e.NO_MFA = 'No valid MFA method provided'),
          (e.INVALID_MFA = 'Invalid MFA type'),
          (e.EMPTY_CHALLENGE = 'Challenge response cannot be empty'),
          (e.NO_USER_SESSION =
            'Failed to get the session because the user is empty'),
          (e.NETWORK_ERROR = 'Network Error'),
          (e.DEVICE_CONFIG =
            'Device tracking has not been configured in this User Pool');
      })(Wi || (Wi = {}));
      var Gi = (function () {
          var e = function (t, n) {
            return (
              (e =
                Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array &&
                  function (e, t) {
                    e.__proto__ = t;
                  }) ||
                function (e, t) {
                  for (var n in t) t.hasOwnProperty(n) && (e[n] = t[n]);
                }),
              e(t, n)
            );
          };
          return function (t, n) {
            function r() {
              this.constructor = t;
            }
            e(t, n),
              (t.prototype =
                null === n
                  ? Object.create(n)
                  : ((r.prototype = n.prototype), new r()));
          };
        })(),
        Yi = new f('AuthError'),
        $i = (function (e) {
          function t(n) {
            var r = this,
              o = Zi[n],
              i = o.message,
              s = o.log;
            return (
              ((r = e.call(this, i) || this).constructor = t),
              Object.setPrototypeOf(r, t.prototype),
              (r.name = 'AuthError'),
              (r.log = s || i),
              Yi.error(r.log),
              r
            );
          }
          return Gi(t, e), t;
        })(Error),
        Ji = (function (e) {
          function t(n) {
            var r = e.call(this, n) || this;
            return (
              (r.constructor = t),
              Object.setPrototypeOf(r, t.prototype),
              (r.name = 'NoUserPoolError'),
              r
            );
          }
          return Gi(t, e), t;
        })($i),
        Zi = {
          noConfig: {
            message: Wi.DEFAULT_MSG,
            log: "\n            Error: Amplify has not been configured correctly.\n            This error is typically caused by one of the following scenarios:\n\n            1. Make sure you're passing the awsconfig object to Amplify.configure() in your app's entry point\n                See https://aws-amplify.github.io/docs/js/authentication#configure-your-app for more information\n            \n            2. There might be multiple conflicting versions of amplify packages in your node_modules.\n\t\t\t\tRefer to our docs site for help upgrading Amplify packages (https://docs.amplify.aws/lib/troubleshooting/upgrading/q/platform/js)\n        ",
          },
          missingAuthConfig: {
            message: Wi.DEFAULT_MSG,
            log: '\n            Error: Amplify has not been configured correctly. \n            The configuration object is missing required auth properties.\n            This error is typically caused by one of the following scenarios:\n\n            1. Did you run `amplify push` after adding auth via `amplify add auth`?\n                See https://aws-amplify.github.io/docs/js/authentication#amplify-project-setup for more information\n\n            2. This could also be caused by multiple conflicting versions of amplify packages, see (https://docs.amplify.aws/lib/troubleshooting/upgrading/q/platform/js) for help upgrading Amplify packages.\n        ',
          },
          emptyUsername: { message: Wi.EMPTY_USERNAME },
          invalidUsername: { message: Wi.INVALID_USERNAME },
          emptyPassword: { message: Wi.EMPTY_PASSWORD },
          emptyCode: { message: Wi.EMPTY_CODE },
          signUpError: {
            message: Wi.SIGN_UP_ERROR,
            log: 'The first parameter should either be non-null string or object',
          },
          noMFA: { message: Wi.NO_MFA },
          invalidMFA: { message: Wi.INVALID_MFA },
          emptyChallengeResponse: { message: Wi.EMPTY_CHALLENGE },
          noUserSession: { message: Wi.NO_USER_SESSION },
          deviceConfig: { message: Wi.DEVICE_CONFIG },
          networkError: { message: Wi.NETWORK_ERROR },
          default: { message: Wi.DEFAULT_MSG },
        },
        Qi = function () {
          return (
            (Qi =
              Object.assign ||
              function (e) {
                for (var t, n = 1, r = arguments.length; n < r; n++)
                  for (var o in (t = arguments[n]))
                    Object.prototype.hasOwnProperty.call(t, o) && (e[o] = t[o]);
                return e;
              }),
            Qi.apply(this, arguments)
          );
        },
        Xi = function (e, t, n, r) {
          return new (n || (n = Promise))(function (o, i) {
            function s(e) {
              try {
                u(r.next(e));
              } catch (e) {
                i(e);
              }
            }
            function a(e) {
              try {
                u(r.throw(e));
              } catch (e) {
                i(e);
              }
            }
            function u(e) {
              var t;
              e.done
                ? o(e.value)
                : ((t = e.value),
                  t instanceof n
                    ? t
                    : new n(function (e) {
                        e(t);
                      })).then(s, a);
            }
            u((r = r.apply(e, t || [])).next());
          });
        },
        es = function (e, t) {
          var n,
            r,
            o,
            i,
            s = {
              label: 0,
              sent: function () {
                if (1 & o[0]) throw o[1];
                return o[1];
              },
              trys: [],
              ops: [],
            };
          return (
            (i = { next: a(0), throw: a(1), return: a(2) }),
            'function' == typeof Symbol &&
              (i[Symbol.iterator] = function () {
                return this;
              }),
            i
          );
          function a(i) {
            return function (a) {
              return (function (i) {
                if (n) throw new TypeError('Generator is already executing.');
                for (; s; )
                  try {
                    if (
                      ((n = 1),
                      r &&
                        (o =
                          2 & i[0]
                            ? r.return
                            : i[0]
                            ? r.throw || ((o = r.return) && o.call(r), 0)
                            : r.next) &&
                        !(o = o.call(r, i[1])).done)
                    )
                      return o;
                    switch (((r = 0), o && (i = [2 & i[0], o.value]), i[0])) {
                      case 0:
                      case 1:
                        o = i;
                        break;
                      case 4:
                        return s.label++, { value: i[1], done: !1 };
                      case 5:
                        s.label++, (r = i[1]), (i = [0]);
                        continue;
                      case 7:
                        (i = s.ops.pop()), s.trys.pop();
                        continue;
                      default:
                        if (
                          !(
                            (o = (o = s.trys).length > 0 && o[o.length - 1]) ||
                            (6 !== i[0] && 2 !== i[0])
                          )
                        ) {
                          s = 0;
                          continue;
                        }
                        if (
                          3 === i[0] &&
                          (!o || (i[1] > o[0] && i[1] < o[3]))
                        ) {
                          s.label = i[1];
                          break;
                        }
                        if (6 === i[0] && s.label < o[1]) {
                          (s.label = o[1]), (o = i);
                          break;
                        }
                        if (o && s.label < o[2]) {
                          (s.label = o[2]), s.ops.push(i);
                          break;
                        }
                        o[2] && s.ops.pop(), s.trys.pop();
                        continue;
                    }
                    i = t.call(e, s);
                  } catch (e) {
                    (i = [6, e]), (r = 0);
                  } finally {
                    n = o = 0;
                  }
                if (5 & i[0]) throw i[1];
                return { value: i[0] ? i[1] : void 0, done: !0 };
              })([i, a]);
            };
          }
        },
        ts = function (e, t) {
          var n = 'function' == typeof Symbol && e[Symbol.iterator];
          if (!n) return e;
          var r,
            o,
            i = n.call(e),
            s = [];
          try {
            for (; (void 0 === t || t-- > 0) && !(r = i.next()).done; )
              s.push(r.value);
          } catch (e) {
            o = { error: e };
          } finally {
            try {
              r && !r.done && (n = i.return) && n.call(i);
            } finally {
              if (o) throw o.error;
            }
          }
          return s;
        },
        ns = new f('AuthClass'),
        rs = 'aws.cognito.signin.user.admin',
        os =
          'undefined' != typeof Symbol && 'function' == typeof Symbol.for
            ? Symbol.for('amplify_default')
            : '@@amplify_default',
        is = function (e, t, n) {
          m.dispatch('auth', { event: e, data: t, message: n }, 'Auth', os);
        },
        ss = (function () {
          function n(e) {
            var t = this;
            (this.userPool = null),
              (this.user = null),
              (this.oAuthFlowInProgress = !1),
              (this.Credentials = yo),
              (this.wrapRefreshSessionCallback = function (e) {
                return function (t, n) {
                  return (
                    n
                      ? is('tokenRefresh', void 0, 'New token retrieved')
                      : is(
                          'tokenRefresh_failure',
                          t,
                          'Failed to retrieve new token'
                        ),
                    e(t, n)
                  );
                };
              }),
              this.configure(e),
              (this.currentCredentials = this.currentCredentials.bind(this)),
              (this.currentUserCredentials =
                this.currentUserCredentials.bind(this)),
              m.listen('auth', function (e) {
                switch (e.payload.event) {
                  case 'signIn':
                    t._storage.setItem('amplify-signin-with-hostedUI', 'false');
                    break;
                  case 'signOut':
                    t._storage.removeItem('amplify-signin-with-hostedUI');
                    break;
                  case 'cognitoHostedUI':
                    t._storage.setItem('amplify-signin-with-hostedUI', 'true');
                }
              });
          }
          return (
            (n.prototype.getModuleName = function () {
              return 'Auth';
            }),
            (n.prototype.configure = function (e) {
              var t = this;
              if (!e) return this._config || {};
              ns.debug('configure Auth');
              var n = Object.assign(
                {},
                this._config,
                So.parseMobilehubConfig(e).Auth,
                e
              );
              this._config = n;
              var r = this._config,
                o = r.userPoolId,
                s = r.userPoolWebClientId,
                a = r.cookieStorage,
                u = r.oauth,
                c = r.region,
                l = r.identityPoolId,
                f = r.mandatorySignIn,
                h = r.refreshHandlers,
                d = r.identityPoolRegion,
                p = r.clientMetadata,
                g = r.endpoint;
              if (this._config.storage) {
                if (!this._isValidAuthStorage(this._config.storage))
                  throw (
                    (ns.error('The storage in the Auth config is not valid!'),
                    new Error('Empty storage object'))
                  );
                this._storage = this._config.storage;
              } else
                this._storage = a
                  ? new Ri(a)
                  : e.ssr
                  ? new To()
                  : new S().getStorage();
              if (
                ((this._storageSync = Promise.resolve()),
                'function' == typeof this._storage.sync &&
                  (this._storageSync = this._storage.sync()),
                o)
              ) {
                var v = { UserPoolId: o, ClientId: s, endpoint: g };
                (v.Storage = this._storage),
                  (this.userPool = new ki(v, this.wrapRefreshSessionCallback));
              }
              this.Credentials.configure({
                mandatorySignIn: f,
                region: d || c,
                userPoolId: o,
                identityPoolId: l,
                refreshHandlers: h,
                storage: this._storage,
              });
              var y = u ? (i(this._config.oauth) ? u : u.awsCognito) : void 0;
              if (y) {
                var m = Object.assign(
                  {
                    cognitoClientId: s,
                    UserPoolId: o,
                    domain: y.domain,
                    scopes: y.scope,
                    redirectSignIn: y.redirectSignIn,
                    redirectSignOut: y.redirectSignOut,
                    responseType: y.responseType,
                    Storage: this._storage,
                    urlOpener: y.urlOpener,
                    clientMetadata: p,
                  },
                  y.options
                );
                this._oAuthHandler = new Hi({
                  scopes: m.scopes,
                  config: m,
                  cognitoClientId: m.cognitoClientId,
                });
                var b = {};
                !(function (e) {
                  if (U().isBrowser && window.location)
                    !(function (e) {
                      var n = e.url;
                      b[n] || ((b[n] = !0), t._handleAuthResponse(n));
                    })({ url: window.location.href });
                  else if (!U().isNode) throw new Error('Not supported');
                })();
              }
              return (
                is(
                  'configured',
                  null,
                  'The Auth category has been configured successfully'
                ),
                this._config
              );
            }),
            (n.prototype.signUp = function (e) {
              for (var n = this, r = [], o = 1; o < arguments.length; o++)
                r[o - 1] = arguments[o];
              if (!this.userPool) return this.rejectNoUserPool();
              var i,
                s = null,
                a = null,
                u = [],
                c = null;
              if (e && 'string' == typeof e) {
                (s = e), (a = r ? r[0] : null);
                var l = r ? r[1] : null,
                  f = r ? r[2] : null;
                l && u.push(new pi({ Name: 'email', Value: l })),
                  f && u.push(new pi({ Name: 'phone_number', Value: f }));
              } else {
                if (!e || 'object' != typeof e)
                  return this.rejectAuthError(t.SignUpError);
                (s = e.username),
                  (a = e.password),
                  e && e.clientMetadata
                    ? (i = e.clientMetadata)
                    : this._config.clientMetadata &&
                      (i = this._config.clientMetadata);
                var h = e.attributes;
                h &&
                  Object.keys(h).map(function (e) {
                    u.push(new pi({ Name: e, Value: h[e] }));
                  });
                var d = e.validationData;
                d &&
                  ((c = []),
                  Object.keys(d).map(function (e) {
                    c.push(new pi({ Name: e, Value: d[e] }));
                  }));
              }
              return s
                ? a
                  ? (ns.debug('signUp attrs:', u),
                    ns.debug('signUp validation data:', c),
                    new Promise(function (e, t) {
                      n.userPool.signUp(
                        s,
                        a,
                        u,
                        c,
                        function (n, r) {
                          n
                            ? (is('signUp_failure', n, s + ' failed to signup'),
                              t(n))
                            : (is(
                                'signUp',
                                r,
                                s + ' has signed up successfully'
                              ),
                              e(r));
                        },
                        i
                      );
                    }))
                  : this.rejectAuthError(t.EmptyPassword)
                : this.rejectAuthError(t.EmptyUsername);
            }),
            (n.prototype.confirmSignUp = function (e, n, r) {
              if (!this.userPool) return this.rejectNoUserPool();
              if (!e) return this.rejectAuthError(t.EmptyUsername);
              if (!n) return this.rejectAuthError(t.EmptyCode);
              var o,
                i = this.createCognitoUser(e),
                s =
                  !r ||
                  'boolean' != typeof r.forceAliasCreation ||
                  r.forceAliasCreation;
              return (
                r && r.clientMetadata
                  ? (o = r.clientMetadata)
                  : this._config.clientMetadata &&
                    (o = this._config.clientMetadata),
                new Promise(function (e, t) {
                  i.confirmRegistration(
                    n,
                    s,
                    function (n, r) {
                      n ? t(n) : e(r);
                    },
                    o
                  );
                })
              );
            }),
            (n.prototype.resendSignUp = function (e, n) {
              if (
                (void 0 === n && (n = this._config.clientMetadata),
                !this.userPool)
              )
                return this.rejectNoUserPool();
              if (!e) return this.rejectAuthError(t.EmptyUsername);
              var r = this.createCognitoUser(e);
              return new Promise(function (e, t) {
                r.resendConfirmationCode(function (n, r) {
                  n ? t(n) : e(r);
                }, n);
              });
            }),
            (n.prototype.signIn = function (e, n, r) {
              if (
                (void 0 === r && (r = this._config.clientMetadata),
                !this.userPool)
              )
                return this.rejectNoUserPool();
              var o = null,
                i = null,
                s = {};
              if ('string' == typeof e) (o = e), (i = n);
              else {
                if (!e.username) return this.rejectAuthError(t.InvalidUsername);
                void 0 !== n &&
                  ns.warn(
                    'The password should be defined under the first parameter object!'
                  ),
                  (o = e.username),
                  (i = e.password),
                  (s = e.validationData);
              }
              if (!o) return this.rejectAuthError(t.EmptyUsername);
              var a = new xo({
                Username: o,
                Password: i,
                ValidationData: s,
                ClientMetadata: r,
              });
              return i
                ? this.signInWithPassword(a)
                : this.signInWithoutPassword(a);
            }),
            (n.prototype.authCallbacks = function (e, t, n) {
              var r = this,
                o = this;
              return {
                onSuccess: function (i) {
                  return Xi(r, void 0, void 0, function () {
                    var r, s, a, u;
                    return es(this, function (c) {
                      switch (c.label) {
                        case 0:
                          ns.debug(i),
                            delete e.challengeName,
                            delete e.challengeParam,
                            (c.label = 1);
                        case 1:
                          return (
                            c.trys.push([1, 4, 5, 9]),
                            [4, this.Credentials.clear()]
                          );
                        case 2:
                          return (
                            c.sent(), [4, this.Credentials.set(i, 'session')]
                          );
                        case 3:
                          return (
                            (r = c.sent()),
                            ns.debug('succeed to get cognito credentials', r),
                            [3, 9]
                          );
                        case 4:
                          return (
                            (s = c.sent()),
                            ns.debug('cannot get cognito credentials', s),
                            [3, 9]
                          );
                        case 5:
                          return (
                            c.trys.push([5, 7, , 8]),
                            [4, this.currentUserPoolUser()]
                          );
                        case 6:
                          return (
                            (a = c.sent()),
                            (o.user = a),
                            is(
                              'signIn',
                              a,
                              'A user ' +
                                e.getUsername() +
                                ' has been signed in'
                            ),
                            t(a),
                            [3, 8]
                          );
                        case 7:
                          return (
                            (u = c.sent()),
                            ns.error('Failed to get the signed in user', u),
                            n(u),
                            [3, 8]
                          );
                        case 8:
                          return [7];
                        case 9:
                          return [2];
                      }
                    });
                  });
                },
                onFailure: function (t) {
                  ns.debug('signIn failure', t),
                    is(
                      'signIn_failure',
                      t,
                      e.getUsername() + ' failed to signin'
                    ),
                    n(t);
                },
                customChallenge: function (n) {
                  ns.debug('signIn custom challenge answer required'),
                    (e.challengeName = 'CUSTOM_CHALLENGE'),
                    (e.challengeParam = n),
                    t(e);
                },
                mfaRequired: function (n, r) {
                  ns.debug('signIn MFA required'),
                    (e.challengeName = n),
                    (e.challengeParam = r),
                    t(e);
                },
                mfaSetup: function (n, r) {
                  ns.debug('signIn mfa setup', n),
                    (e.challengeName = n),
                    (e.challengeParam = r),
                    t(e);
                },
                newPasswordRequired: function (n, r) {
                  ns.debug('signIn new password'),
                    (e.challengeName = 'NEW_PASSWORD_REQUIRED'),
                    (e.challengeParam = {
                      userAttributes: n,
                      requiredAttributes: r,
                    }),
                    t(e);
                },
                totpRequired: function (n, r) {
                  ns.debug('signIn totpRequired'),
                    (e.challengeName = n),
                    (e.challengeParam = r),
                    t(e);
                },
                selectMFAType: function (n, r) {
                  ns.debug('signIn selectMFAType', n),
                    (e.challengeName = n),
                    (e.challengeParam = r),
                    t(e);
                },
              };
            }),
            (n.prototype.signInWithPassword = function (e) {
              var t = this;
              if (this.pendingSignIn)
                throw new Error('Pending sign-in attempt already in progress');
              var n = this.createCognitoUser(e.getUsername());
              return (
                (this.pendingSignIn = new Promise(function (r, o) {
                  n.authenticateUser(
                    e,
                    t.authCallbacks(
                      n,
                      function (e) {
                        (t.pendingSignIn = null), r(e);
                      },
                      function (e) {
                        (t.pendingSignIn = null), o(e);
                      }
                    )
                  );
                })),
                this.pendingSignIn
              );
            }),
            (n.prototype.signInWithoutPassword = function (e) {
              var t = this,
                n = this.createCognitoUser(e.getUsername());
              return (
                n.setAuthenticationFlowType('CUSTOM_AUTH'),
                new Promise(function (r, o) {
                  n.initiateAuth(e, t.authCallbacks(n, r, o));
                })
              );
            }),
            (n.prototype.getMFAOptions = function (e) {
              return new Promise(function (t, n) {
                e.getMFAOptions(function (e, r) {
                  if (e)
                    return ns.debug('get MFA Options failed', e), void n(e);
                  ns.debug('get MFA options success', r), t(r);
                });
              });
            }),
            (n.prototype.getPreferredMFA = function (e, t) {
              var n = this,
                r = this;
              return new Promise(function (o, i) {
                var s = n._config.clientMetadata,
                  a = !!t && t.bypassCache;
                e.getUserData(
                  function (t, s) {
                    return Xi(n, void 0, void 0, function () {
                      var n, a;
                      return es(this, function (u) {
                        switch (u.label) {
                          case 0:
                            if (!t) return [3, 5];
                            if (
                              (ns.debug('getting preferred mfa failed', t),
                              !this.isSessionInvalid(t))
                            )
                              return [3, 4];
                            u.label = 1;
                          case 1:
                            return (
                              u.trys.push([1, 3, , 4]),
                              [4, this.cleanUpInvalidSession(e)]
                            );
                          case 2:
                            return u.sent(), [3, 4];
                          case 3:
                            return (
                              (n = u.sent()),
                              i(
                                new Error(
                                  'Session is invalid due to: ' +
                                    t.message +
                                    ' and failed to clean up invalid session: ' +
                                    n.message
                                )
                              ),
                              [2]
                            );
                          case 4:
                            return i(t), [2];
                          case 5:
                            return (a = r._getMfaTypeFromUserData(s))
                              ? (o(a), [2])
                              : (i('invalid MFA Type'), [2]);
                        }
                      });
                    });
                  },
                  { bypassCache: a, clientMetadata: s }
                );
              });
            }),
            (n.prototype._getMfaTypeFromUserData = function (e) {
              var t = null,
                n = e.PreferredMfaSetting;
              if (n) t = n;
              else {
                var r = e.UserMFASettingList;
                r
                  ? 0 === r.length
                    ? (t = 'NOMFA')
                    : ns.debug('invalid case for getPreferredMFA', e)
                  : (t = e.MFAOptions ? 'SMS_MFA' : 'NOMFA');
              }
              return t;
            }),
            (n.prototype._getUserData = function (e, t) {
              var n = this;
              return new Promise(function (r, o) {
                e.getUserData(function (t, i) {
                  return Xi(n, void 0, void 0, function () {
                    var n;
                    return es(this, function (s) {
                      switch (s.label) {
                        case 0:
                          if (!t) return [3, 5];
                          if (
                            (ns.debug('getting user data failed', t),
                            !this.isSessionInvalid(t))
                          )
                            return [3, 4];
                          s.label = 1;
                        case 1:
                          return (
                            s.trys.push([1, 3, , 4]),
                            [4, this.cleanUpInvalidSession(e)]
                          );
                        case 2:
                          return s.sent(), [3, 4];
                        case 3:
                          return (
                            (n = s.sent()),
                            o(
                              new Error(
                                'Session is invalid due to: ' +
                                  t.message +
                                  ' and failed to clean up invalid session: ' +
                                  n.message
                              )
                            ),
                            [2]
                          );
                        case 4:
                          return o(t), [2];
                        case 5:
                          r(i), (s.label = 6);
                        case 6:
                          return [2];
                      }
                    });
                  });
                }, t);
              });
            }),
            (n.prototype.setPreferredMFA = function (e, n) {
              return Xi(this, void 0, void 0, function () {
                var r,
                  o,
                  i,
                  s,
                  a,
                  u,
                  c = this;
                return es(this, function (l) {
                  switch (l.label) {
                    case 0:
                      return (
                        (r = this._config.clientMetadata),
                        [
                          4,
                          this._getUserData(e, {
                            bypassCache: !0,
                            clientMetadata: r,
                          }),
                        ]
                      );
                    case 1:
                      switch (((o = l.sent()), (i = null), (s = null), n)) {
                        case 'TOTP':
                        case 'SOFTWARE_TOKEN_MFA':
                          return [3, 2];
                        case 'SMS':
                        case 'SMS_MFA':
                          return [3, 3];
                        case 'NOMFA':
                          return [3, 4];
                      }
                      return [3, 6];
                    case 2:
                      return (s = { PreferredMfa: !0, Enabled: !0 }), [3, 7];
                    case 3:
                      return (i = { PreferredMfa: !0, Enabled: !0 }), [3, 7];
                    case 4:
                      return (
                        (a = o.UserMFASettingList),
                        [4, this._getMfaTypeFromUserData(o)]
                      );
                    case 5:
                      if ('NOMFA' === (u = l.sent()))
                        return [2, Promise.resolve('No change for mfa type')];
                      if ('SMS_MFA' === u)
                        i = { PreferredMfa: !1, Enabled: !1 };
                      else {
                        if ('SOFTWARE_TOKEN_MFA' !== u)
                          return [2, this.rejectAuthError(t.InvalidMFA)];
                        s = { PreferredMfa: !1, Enabled: !1 };
                      }
                      return (
                        a &&
                          0 !== a.length &&
                          a.forEach(function (e) {
                            'SMS_MFA' === e
                              ? (i = { PreferredMfa: !1, Enabled: !1 })
                              : 'SOFTWARE_TOKEN_MFA' === e &&
                                (s = { PreferredMfa: !1, Enabled: !1 });
                          }),
                        [3, 7]
                      );
                    case 6:
                      return (
                        ns.debug('no validmfa method provided'),
                        [2, this.rejectAuthError(t.NoMFA)]
                      );
                    case 7:
                      return [
                        2,
                        new Promise(function (t, n) {
                          e.setUserMfaPreference(i, s, function (o, i) {
                            if (o)
                              return (
                                ns.debug('Set user mfa preference error', o),
                                n(o)
                              );
                            ns.debug('Set user mfa success', i),
                              ns.debug(
                                'Caching the latest user data into local'
                              ),
                              e.getUserData(
                                function (r, o) {
                                  return Xi(c, void 0, void 0, function () {
                                    var o;
                                    return es(this, function (s) {
                                      switch (s.label) {
                                        case 0:
                                          if (!r) return [3, 5];
                                          if (
                                            (ns.debug(
                                              'getting user data failed',
                                              r
                                            ),
                                            !this.isSessionInvalid(r))
                                          )
                                            return [3, 4];
                                          s.label = 1;
                                        case 1:
                                          return (
                                            s.trys.push([1, 3, , 4]),
                                            [4, this.cleanUpInvalidSession(e)]
                                          );
                                        case 2:
                                          return s.sent(), [3, 4];
                                        case 3:
                                          return (
                                            (o = s.sent()),
                                            n(
                                              new Error(
                                                'Session is invalid due to: ' +
                                                  r.message +
                                                  ' and failed to clean up invalid session: ' +
                                                  o.message
                                              )
                                            ),
                                            [2]
                                          );
                                        case 4:
                                          return [2, n(r)];
                                        case 5:
                                          return [2, t(i)];
                                      }
                                    });
                                  });
                                },
                                { bypassCache: !0, clientMetadata: r }
                              );
                          });
                        }),
                      ];
                  }
                });
              });
            }),
            (n.prototype.disableSMS = function (e) {
              return new Promise(function (t, n) {
                e.disableMFA(function (e, r) {
                  if (e) return ns.debug('disable mfa failed', e), void n(e);
                  ns.debug('disable mfa succeed', r), t(r);
                });
              });
            }),
            (n.prototype.enableSMS = function (e) {
              return new Promise(function (t, n) {
                e.enableMFA(function (e, r) {
                  if (e) return ns.debug('enable mfa failed', e), void n(e);
                  ns.debug('enable mfa succeed', r), t(r);
                });
              });
            }),
            (n.prototype.setupTOTP = function (e) {
              return new Promise(function (t, n) {
                e.associateSoftwareToken({
                  onFailure: function (e) {
                    ns.debug('associateSoftwareToken failed', e), n(e);
                  },
                  associateSecretCode: function (e) {
                    ns.debug('associateSoftwareToken sucess', e), t(e);
                  },
                });
              });
            }),
            (n.prototype.verifyTotpToken = function (e, t) {
              return (
                ns.debug('verification totp token', e, t),
                new Promise(function (n, r) {
                  e.verifySoftwareToken(t, 'My TOTP device', {
                    onFailure: function (e) {
                      ns.debug('verifyTotpToken failed', e), r(e);
                    },
                    onSuccess: function (t) {
                      is(
                        'signIn',
                        e,
                        'A user ' + e.getUsername() + ' has been signed in'
                      ),
                        ns.debug('verifyTotpToken success', t),
                        n(t);
                    },
                  });
                })
              );
            }),
            (n.prototype.confirmSignIn = function (e, n, r, o) {
              var i = this;
              if ((void 0 === o && (o = this._config.clientMetadata), !n))
                return this.rejectAuthError(t.EmptyCode);
              var s = this;
              return new Promise(function (t, a) {
                e.sendMFACode(
                  n,
                  {
                    onSuccess: function (n) {
                      return Xi(i, void 0, void 0, function () {
                        var r, o;
                        return es(this, function (i) {
                          switch (i.label) {
                            case 0:
                              ns.debug(n), (i.label = 1);
                            case 1:
                              return (
                                i.trys.push([1, 4, 5, 6]),
                                [4, this.Credentials.clear()]
                              );
                            case 2:
                              return (
                                i.sent(),
                                [4, this.Credentials.set(n, 'session')]
                              );
                            case 3:
                              return (
                                (r = i.sent()),
                                ns.debug(
                                  'succeed to get cognito credentials',
                                  r
                                ),
                                [3, 6]
                              );
                            case 4:
                              return (
                                (o = i.sent()),
                                ns.debug('cannot get cognito credentials', o),
                                [3, 6]
                              );
                            case 5:
                              return (
                                (s.user = e),
                                is(
                                  'signIn',
                                  e,
                                  'A user ' +
                                    e.getUsername() +
                                    ' has been signed in'
                                ),
                                t(e),
                                [7]
                              );
                            case 6:
                              return [2];
                          }
                        });
                      });
                    },
                    onFailure: function (e) {
                      ns.debug('confirm signIn failure', e), a(e);
                    },
                  },
                  r,
                  o
                );
              });
            }),
            (n.prototype.completeNewPassword = function (e, n, r, o) {
              var i = this;
              if (
                (void 0 === r && (r = {}),
                void 0 === o && (o = this._config.clientMetadata),
                !n)
              )
                return this.rejectAuthError(t.EmptyPassword);
              var s = this;
              return new Promise(function (t, a) {
                e.completeNewPasswordChallenge(
                  n,
                  r,
                  {
                    onSuccess: function (n) {
                      return Xi(i, void 0, void 0, function () {
                        var r, o;
                        return es(this, function (i) {
                          switch (i.label) {
                            case 0:
                              ns.debug(n), (i.label = 1);
                            case 1:
                              return (
                                i.trys.push([1, 4, 5, 6]),
                                [4, this.Credentials.clear()]
                              );
                            case 2:
                              return (
                                i.sent(),
                                [4, this.Credentials.set(n, 'session')]
                              );
                            case 3:
                              return (
                                (r = i.sent()),
                                ns.debug(
                                  'succeed to get cognito credentials',
                                  r
                                ),
                                [3, 6]
                              );
                            case 4:
                              return (
                                (o = i.sent()),
                                ns.debug('cannot get cognito credentials', o),
                                [3, 6]
                              );
                            case 5:
                              return (
                                (s.user = e),
                                is(
                                  'signIn',
                                  e,
                                  'A user ' +
                                    e.getUsername() +
                                    ' has been signed in'
                                ),
                                t(e),
                                [7]
                              );
                            case 6:
                              return [2];
                          }
                        });
                      });
                    },
                    onFailure: function (e) {
                      ns.debug('completeNewPassword failure', e),
                        is(
                          'completeNewPassword_failure',
                          e,
                          i.user + ' failed to complete the new password flow'
                        ),
                        a(e);
                    },
                    mfaRequired: function (n, r) {
                      ns.debug('signIn MFA required'),
                        (e.challengeName = n),
                        (e.challengeParam = r),
                        t(e);
                    },
                    mfaSetup: function (n, r) {
                      ns.debug('signIn mfa setup', n),
                        (e.challengeName = n),
                        (e.challengeParam = r),
                        t(e);
                    },
                    totpRequired: function (n, r) {
                      ns.debug('signIn mfa setup', n),
                        (e.challengeName = n),
                        (e.challengeParam = r),
                        t(e);
                    },
                  },
                  o
                );
              });
            }),
            (n.prototype.sendCustomChallengeAnswer = function (e, n, r) {
              var o = this;
              return (
                void 0 === r && (r = this._config.clientMetadata),
                this.userPool
                  ? n
                    ? new Promise(function (t, i) {
                        e.sendCustomChallengeAnswer(
                          n,
                          o.authCallbacks(e, t, i),
                          r
                        );
                      })
                    : this.rejectAuthError(t.EmptyChallengeResponse)
                  : this.rejectNoUserPool()
              );
            }),
            (n.prototype.deleteUserAttributes = function (e, t) {
              var n = this;
              return new Promise(function (r, o) {
                n.userSession(e).then(function (n) {
                  e.deleteAttributes(t, function (e, t) {
                    return e ? o(e) : r(t);
                  });
                });
              });
            }),
            (n.prototype.deleteUser = function () {
              return Xi(this, void 0, void 0, function () {
                var e,
                  t,
                  n = this;
                return es(this, function (r) {
                  switch (r.label) {
                    case 0:
                      return r.trys.push([0, 2, , 3]), [4, this._storageSync];
                    case 1:
                      return r.sent(), [3, 3];
                    case 2:
                      throw (
                        ((e = r.sent()),
                        ns.debug('Failed to sync cache info into memory', e),
                        new Error(e))
                      );
                    case 3:
                      return (
                        (t =
                          this._oAuthHandler &&
                          'true' ===
                            this._storage.getItem(
                              'amplify-signin-with-hostedUI'
                            )),
                        [
                          2,
                          new Promise(function (e, r) {
                            return Xi(n, void 0, void 0, function () {
                              var n,
                                o = this;
                              return es(this, function (i) {
                                if (this.userPool) {
                                  if (!(n = this.userPool.getCurrentUser()))
                                    return (
                                      ns.debug(
                                        'Failed to get user from user pool'
                                      ),
                                      [2, r(new Error('No current user.'))]
                                    );
                                  n.getSession(function (i, s) {
                                    return Xi(o, void 0, void 0, function () {
                                      var o,
                                        s = this;
                                      return es(this, function (a) {
                                        switch (a.label) {
                                          case 0:
                                            if (!i) return [3, 5];
                                            if (
                                              (ns.debug(
                                                'Failed to get the user session',
                                                i
                                              ),
                                              !this.isSessionInvalid(i))
                                            )
                                              return [3, 4];
                                            a.label = 1;
                                          case 1:
                                            return (
                                              a.trys.push([1, 3, , 4]),
                                              [4, this.cleanUpInvalidSession(n)]
                                            );
                                          case 2:
                                            return a.sent(), [3, 4];
                                          case 3:
                                            return (
                                              (o = a.sent()),
                                              r(
                                                new Error(
                                                  'Session is invalid due to: ' +
                                                    i.message +
                                                    ' and failed to clean up invalid session: ' +
                                                    o.message
                                                )
                                              ),
                                              [2]
                                            );
                                          case 4:
                                            return [2, r(i)];
                                          case 5:
                                            n.deleteUser(function (o, i) {
                                              if (o) r(o);
                                              else {
                                                is(
                                                  'userDeleted',
                                                  i,
                                                  'The authenticated user has been deleted.'
                                                ),
                                                  n.signOut(),
                                                  (s.user = null);
                                                try {
                                                  s.cleanCachedItems();
                                                } catch (e) {
                                                  ns.debug(
                                                    'failed to clear cached items'
                                                  );
                                                }
                                                t
                                                  ? s.oAuthSignOutRedirect(e, r)
                                                  : (is(
                                                      'signOut',
                                                      s.user,
                                                      'A user has been signed out'
                                                    ),
                                                    e(i));
                                              }
                                            }),
                                              (a.label = 6);
                                          case 6:
                                            return [2];
                                        }
                                      });
                                    });
                                  });
                                } else
                                  ns.debug('no Congito User pool'),
                                    r(
                                      new Error(
                                        'Cognito User pool does not exist'
                                      )
                                    );
                                return [2];
                              });
                            });
                          }),
                        ]
                      );
                  }
                });
              });
            }),
            (n.prototype.updateUserAttributes = function (e, t, n) {
              void 0 === n && (n = this._config.clientMetadata);
              var r = [],
                o = this;
              return new Promise(function (i, s) {
                o.userSession(e).then(function (o) {
                  for (var a in t)
                    if ('sub' !== a && a.indexOf('_verified') < 0) {
                      var u = { Name: a, Value: t[a] };
                      r.push(u);
                    }
                  e.updateAttributes(
                    r,
                    function (e, t) {
                      return e ? s(e) : i(t);
                    },
                    n
                  );
                });
              });
            }),
            (n.prototype.userAttributes = function (e) {
              var t = this;
              return new Promise(function (n, r) {
                t.userSession(e).then(function (t) {
                  e.getUserAttributes(function (e, t) {
                    e ? r(e) : n(t);
                  });
                });
              });
            }),
            (n.prototype.verifiedContact = function (e) {
              var t = this;
              return this.userAttributes(e).then(function (e) {
                var n = t.attributesToObject(e),
                  r = {},
                  o = {};
                return (
                  n.email &&
                    (n.email_verified
                      ? (o.email = n.email)
                      : (r.email = n.email)),
                  n.phone_number &&
                    (n.phone_number_verified
                      ? (o.phone_number = n.phone_number)
                      : (r.phone_number = n.phone_number)),
                  { verified: o, unverified: r }
                );
              });
            }),
            (n.prototype.isErrorWithMessage = function (e) {
              return (
                'object' == typeof e &&
                Object.prototype.hasOwnProperty.call(e, 'message')
              );
            }),
            (n.prototype.isTokenRevokedError = function (e) {
              return (
                this.isErrorWithMessage(e) &&
                'Access Token has been revoked' === e.message
              );
            }),
            (n.prototype.isRefreshTokenRevokedError = function (e) {
              return (
                this.isErrorWithMessage(e) &&
                'Refresh Token has been revoked' === e.message
              );
            }),
            (n.prototype.isUserDisabledError = function (e) {
              return (
                this.isErrorWithMessage(e) && 'User is disabled.' === e.message
              );
            }),
            (n.prototype.isUserDoesNotExistError = function (e) {
              return (
                this.isErrorWithMessage(e) &&
                'User does not exist.' === e.message
              );
            }),
            (n.prototype.isRefreshTokenExpiredError = function (e) {
              return (
                this.isErrorWithMessage(e) &&
                'Refresh Token has expired' === e.message
              );
            }),
            (n.prototype.isSignedInHostedUI = function () {
              return (
                this._oAuthHandler &&
                'true' === this._storage.getItem('amplify-signin-with-hostedUI')
              );
            }),
            (n.prototype.isSessionInvalid = function (e) {
              return (
                this.isUserDisabledError(e) ||
                this.isUserDoesNotExistError(e) ||
                this.isTokenRevokedError(e) ||
                this.isRefreshTokenRevokedError(e) ||
                this.isRefreshTokenExpiredError(e)
              );
            }),
            (n.prototype.cleanUpInvalidSession = function (e) {
              return Xi(this, void 0, void 0, function () {
                var t = this;
                return es(this, function (n) {
                  switch (n.label) {
                    case 0:
                      e.signOut(), (this.user = null), (n.label = 1);
                    case 1:
                      return (
                        n.trys.push([1, 3, , 4]), [4, this.cleanCachedItems()]
                      );
                    case 2:
                      return n.sent(), [3, 4];
                    case 3:
                      return (
                        n.sent(),
                        ns.debug('failed to clear cached items'),
                        [3, 4]
                      );
                    case 4:
                      return this.isSignedInHostedUI()
                        ? [
                            2,
                            new Promise(function (e, n) {
                              t.oAuthSignOutRedirect(e, n);
                            }),
                          ]
                        : (is(
                            'signOut',
                            this.user,
                            'A user has been signed out'
                          ),
                          [2]);
                  }
                });
              });
            }),
            (n.prototype.currentUserPoolUser = function (e) {
              var t = this;
              return this.userPool
                ? new Promise(function (n, r) {
                    t._storageSync
                      .then(function () {
                        return Xi(t, void 0, void 0, function () {
                          var t,
                            o,
                            i = this;
                          return es(this, function (s) {
                            switch (s.label) {
                              case 0:
                                return this.isOAuthInProgress()
                                  ? (ns.debug(
                                      'OAuth signIn in progress, waiting for resolution...'
                                    ),
                                    [
                                      4,
                                      new Promise(function (e) {
                                        var t = setTimeout(function () {
                                          ns.debug(
                                            'OAuth signIn in progress timeout'
                                          ),
                                            m.remove('auth', n),
                                            e();
                                        }, 1e4);
                                        function n(r) {
                                          var o = r.payload.event;
                                          ('cognitoHostedUI' !== o &&
                                            'cognitoHostedUI_failure' !== o) ||
                                            (ns.debug(
                                              'OAuth signIn resolved: ' + o
                                            ),
                                            clearTimeout(t),
                                            m.remove('auth', n),
                                            e());
                                        }
                                        m.listen('auth', n);
                                      }),
                                    ])
                                  : [3, 2];
                              case 1:
                                s.sent(), (s.label = 2);
                              case 2:
                                return (t = this.userPool.getCurrentUser())
                                  ? ((o = this._config.clientMetadata),
                                    t.getSession(
                                      function (o, s) {
                                        return Xi(
                                          i,
                                          void 0,
                                          void 0,
                                          function () {
                                            var i,
                                              a,
                                              u,
                                              c,
                                              l = this;
                                            return es(this, function (f) {
                                              switch (f.label) {
                                                case 0:
                                                  if (!o) return [3, 5];
                                                  if (
                                                    (ns.debug(
                                                      'Failed to get the user session',
                                                      o
                                                    ),
                                                    !this.isSessionInvalid(o))
                                                  )
                                                    return [3, 4];
                                                  f.label = 1;
                                                case 1:
                                                  return (
                                                    f.trys.push([1, 3, , 4]),
                                                    [
                                                      4,
                                                      this.cleanUpInvalidSession(
                                                        t
                                                      ),
                                                    ]
                                                  );
                                                case 2:
                                                  return f.sent(), [3, 4];
                                                case 3:
                                                  return (
                                                    (i = f.sent()),
                                                    r(
                                                      new Error(
                                                        'Session is invalid due to: ' +
                                                          o.message +
                                                          ' and failed to clean up invalid session: ' +
                                                          i.message
                                                      )
                                                    ),
                                                    [2]
                                                  );
                                                case 4:
                                                  return r(o), [2];
                                                case 5:
                                                  return (a =
                                                    !!e && e.bypassCache)
                                                    ? [
                                                        4,
                                                        this.Credentials.clear(),
                                                      ]
                                                    : [3, 7];
                                                case 6:
                                                  f.sent(), (f.label = 7);
                                                case 7:
                                                  return (
                                                    (u =
                                                      this._config
                                                        .clientMetadata),
                                                    (void 0 ===
                                                    (c = s
                                                      .getAccessToken()
                                                      .decodePayload().scope)
                                                      ? ''
                                                      : c
                                                    )
                                                      .split(' ')
                                                      .includes(rs)
                                                      ? (t.getUserData(
                                                          function (e, o) {
                                                            return Xi(
                                                              l,
                                                              void 0,
                                                              void 0,
                                                              function () {
                                                                var i,
                                                                  s,
                                                                  a,
                                                                  u,
                                                                  c,
                                                                  l,
                                                                  f;
                                                                return es(
                                                                  this,
                                                                  function (h) {
                                                                    switch (
                                                                      h.label
                                                                    ) {
                                                                      case 0:
                                                                        if (!e)
                                                                          return [
                                                                            3,
                                                                            7,
                                                                          ];
                                                                        if (
                                                                          (ns.debug(
                                                                            'getting user data failed',
                                                                            e
                                                                          ),
                                                                          !this.isSessionInvalid(
                                                                            e
                                                                          ))
                                                                        )
                                                                          return [
                                                                            3,
                                                                            5,
                                                                          ];
                                                                        h.label = 1;
                                                                      case 1:
                                                                        return (
                                                                          h.trys.push(
                                                                            [
                                                                              1,
                                                                              3,
                                                                              ,
                                                                              4,
                                                                            ]
                                                                          ),
                                                                          [
                                                                            4,
                                                                            this.cleanUpInvalidSession(
                                                                              t
                                                                            ),
                                                                          ]
                                                                        );
                                                                      case 2:
                                                                        return (
                                                                          h.sent(),
                                                                          [3, 4]
                                                                        );
                                                                      case 3:
                                                                        return (
                                                                          (i =
                                                                            h.sent()),
                                                                          r(
                                                                            new Error(
                                                                              'Session is invalid due to: ' +
                                                                                e.message +
                                                                                ' and failed to clean up invalid session: ' +
                                                                                i.message
                                                                            )
                                                                          ),
                                                                          [2]
                                                                        );
                                                                      case 4:
                                                                        return (
                                                                          r(e),
                                                                          [3, 6]
                                                                        );
                                                                      case 5:
                                                                        n(t),
                                                                          (h.label = 6);
                                                                      case 6:
                                                                        return [
                                                                          2,
                                                                        ];
                                                                      case 7:
                                                                        for (
                                                                          s =
                                                                            o.PreferredMfaSetting ||
                                                                            'NOMFA',
                                                                            a =
                                                                              [],
                                                                            u = 0;
                                                                          u <
                                                                          o
                                                                            .UserAttributes
                                                                            .length;
                                                                          u++
                                                                        )
                                                                          (c = {
                                                                            Name: o
                                                                              .UserAttributes[
                                                                              u
                                                                            ]
                                                                              .Name,
                                                                            Value:
                                                                              o
                                                                                .UserAttributes[
                                                                                u
                                                                              ]
                                                                                .Value,
                                                                          }),
                                                                            (l =
                                                                              new pi(
                                                                                c
                                                                              )),
                                                                            a.push(
                                                                              l
                                                                            );
                                                                        return (
                                                                          (f =
                                                                            this.attributesToObject(
                                                                              a
                                                                            )),
                                                                          Object.assign(
                                                                            t,
                                                                            {
                                                                              attributes:
                                                                                f,
                                                                              preferredMFA:
                                                                                s,
                                                                            }
                                                                          ),
                                                                          [
                                                                            2,
                                                                            n(
                                                                              t
                                                                            ),
                                                                          ]
                                                                        );
                                                                    }
                                                                  }
                                                                );
                                                              }
                                                            );
                                                          },
                                                          {
                                                            bypassCache: a,
                                                            clientMetadata: u,
                                                          }
                                                        ),
                                                        [2])
                                                      : (ns.debug(
                                                          'Unable to get the user data because the ' +
                                                            rs +
                                                            ' is not in the scopes of the access token'
                                                        ),
                                                        [2, n(t)])
                                                  );
                                              }
                                            });
                                          }
                                        );
                                      },
                                      { clientMetadata: o }
                                    ),
                                    [2])
                                  : (ns.debug(
                                      'Failed to get user from user pool'
                                    ),
                                    r('No current user'),
                                    [2]);
                            }
                          });
                        });
                      })
                      .catch(function (e) {
                        return (
                          ns.debug('Failed to sync cache info into memory', e),
                          r(e)
                        );
                      });
                  })
                : this.rejectNoUserPool();
            }),
            (n.prototype.isOAuthInProgress = function () {
              return this.oAuthFlowInProgress;
            }),
            (n.prototype.currentAuthenticatedUser = function (e) {
              return Xi(this, void 0, void 0, function () {
                var t, n, r, o, i;
                return es(this, function (s) {
                  switch (s.label) {
                    case 0:
                      ns.debug('getting current authenticated user'),
                        (t = null),
                        (s.label = 1);
                    case 1:
                      return s.trys.push([1, 3, , 4]), [4, this._storageSync];
                    case 2:
                      return s.sent(), [3, 4];
                    case 3:
                      throw (
                        ((n = s.sent()),
                        ns.debug('Failed to sync cache info into memory', n),
                        n)
                      );
                    case 4:
                      try {
                        (r = JSON.parse(
                          this._storage.getItem('aws-amplify-federatedInfo')
                        )) && (t = Qi(Qi({}, r.user), { token: r.token }));
                      } catch (e) {
                        ns.debug(
                          'cannot load federated user from auth storage'
                        );
                      }
                      return t
                        ? ((this.user = t),
                          ns.debug(
                            'get current authenticated federated user',
                            this.user
                          ),
                          [2, this.user])
                        : [3, 5];
                    case 5:
                      ns.debug('get current authenticated userpool user'),
                        (o = null),
                        (s.label = 6);
                    case 6:
                      return (
                        s.trys.push([6, 8, , 9]),
                        [4, this.currentUserPoolUser(e)]
                      );
                    case 7:
                      return (o = s.sent()), [3, 9];
                    case 8:
                      return (
                        'No userPool' === (i = s.sent()) &&
                          ns.error(
                            'Cannot get the current user because the user pool is missing. Please make sure the Auth module is configured with a valid Cognito User Pool ID'
                          ),
                        ns.debug(
                          'The user is not authenticated by the error',
                          i
                        ),
                        [2, Promise.reject('The user is not authenticated')]
                      );
                    case 9:
                      return (this.user = o), [2, this.user];
                  }
                });
              });
            }),
            (n.prototype.currentSession = function () {
              var e = this;
              return (
                ns.debug('Getting current session'),
                this.userPool
                  ? new Promise(function (t, n) {
                      e.currentUserPoolUser()
                        .then(function (r) {
                          e.userSession(r)
                            .then(function (e) {
                              t(e);
                            })
                            .catch(function (e) {
                              ns.debug('Failed to get the current session', e),
                                n(e);
                            });
                        })
                        .catch(function (e) {
                          ns.debug('Failed to get the current user', e), n(e);
                        });
                    })
                  : this.rejectNoUserPool()
              );
            }),
            (n.prototype.userSession = function (e) {
              var n = this;
              if (!e)
                return (
                  ns.debug('the user is null'),
                  this.rejectAuthError(t.NoUserSession)
                );
              var r = this._config.clientMetadata;
              return new Promise(function (t, o) {
                ns.debug('Getting the session from this user:', e),
                  e.getSession(
                    function (r, i) {
                      return Xi(n, void 0, void 0, function () {
                        var n;
                        return es(this, function (s) {
                          switch (s.label) {
                            case 0:
                              if (!r) return [3, 5];
                              if (
                                (ns.debug(
                                  'Failed to get the session from user',
                                  e
                                ),
                                !this.isSessionInvalid(r))
                              )
                                return [3, 4];
                              s.label = 1;
                            case 1:
                              return (
                                s.trys.push([1, 3, , 4]),
                                [4, this.cleanUpInvalidSession(e)]
                              );
                            case 2:
                              return s.sent(), [3, 4];
                            case 3:
                              return (
                                (n = s.sent()),
                                o(
                                  new Error(
                                    'Session is invalid due to: ' +
                                      r.message +
                                      ' and failed to clean up invalid session: ' +
                                      n.message
                                  )
                                ),
                                [2]
                              );
                            case 4:
                              return o(r), [2];
                            case 5:
                              return (
                                ns.debug('Succeed to get the user session', i),
                                t(i),
                                [2]
                              );
                          }
                        });
                      });
                    },
                    { clientMetadata: r }
                  );
              });
            }),
            (n.prototype.currentUserCredentials = function () {
              return Xi(this, void 0, void 0, function () {
                var e,
                  t,
                  n = this;
                return es(this, function (r) {
                  switch (r.label) {
                    case 0:
                      ns.debug('Getting current user credentials'),
                        (r.label = 1);
                    case 1:
                      return r.trys.push([1, 3, , 4]), [4, this._storageSync];
                    case 2:
                      return r.sent(), [3, 4];
                    case 3:
                      throw (
                        ((e = r.sent()),
                        ns.debug('Failed to sync cache info into memory', e),
                        e)
                      );
                    case 4:
                      t = null;
                      try {
                        t = JSON.parse(
                          this._storage.getItem('aws-amplify-federatedInfo')
                        );
                      } catch (e) {
                        ns.debug(
                          'failed to get or parse item aws-amplify-federatedInfo',
                          e
                        );
                      }
                      return t
                        ? [2, this.Credentials.refreshFederatedToken(t)]
                        : [
                            2,
                            this.currentSession()
                              .then(function (e) {
                                return (
                                  ns.debug('getting session success', e),
                                  n.Credentials.set(e, 'session')
                                );
                              })
                              .catch(function () {
                                return (
                                  ns.debug('getting guest credentials'),
                                  n.Credentials.set(null, 'guest')
                                );
                              }),
                          ];
                  }
                });
              });
            }),
            (n.prototype.currentCredentials = function () {
              return (
                ns.debug('getting current credentials'), this.Credentials.get()
              );
            }),
            (n.prototype.verifyUserAttribute = function (e, t, n) {
              return (
                void 0 === n && (n = this._config.clientMetadata),
                new Promise(function (r, o) {
                  e.getAttributeVerificationCode(
                    t,
                    {
                      onSuccess: function (e) {
                        return r(e);
                      },
                      onFailure: function (e) {
                        return o(e);
                      },
                    },
                    n
                  );
                })
              );
            }),
            (n.prototype.verifyUserAttributeSubmit = function (e, n, r) {
              return r
                ? new Promise(function (t, o) {
                    e.verifyAttribute(n, r, {
                      onSuccess: function (e) {
                        t(e);
                      },
                      onFailure: function (e) {
                        o(e);
                      },
                    });
                  })
                : this.rejectAuthError(t.EmptyCode);
            }),
            (n.prototype.verifyCurrentUserAttribute = function (e) {
              var t = this;
              return t.currentUserPoolUser().then(function (n) {
                return t.verifyUserAttribute(n, e);
              });
            }),
            (n.prototype.verifyCurrentUserAttributeSubmit = function (e, t) {
              var n = this;
              return n.currentUserPoolUser().then(function (r) {
                return n.verifyUserAttributeSubmit(r, e, t);
              });
            }),
            (n.prototype.cognitoIdentitySignOut = function (e, t) {
              return Xi(this, void 0, void 0, function () {
                var n,
                  r,
                  o = this;
                return es(this, function (i) {
                  switch (i.label) {
                    case 0:
                      return i.trys.push([0, 2, , 3]), [4, this._storageSync];
                    case 1:
                      return i.sent(), [3, 3];
                    case 2:
                      throw (
                        ((n = i.sent()),
                        ns.debug('Failed to sync cache info into memory', n),
                        n)
                      );
                    case 3:
                      return (
                        (r =
                          this._oAuthHandler &&
                          'true' ===
                            this._storage.getItem(
                              'amplify-signin-with-hostedUI'
                            )),
                        [
                          2,
                          new Promise(function (n, i) {
                            if (e && e.global) {
                              ns.debug('user global sign out', t);
                              var s = o._config.clientMetadata;
                              t.getSession(
                                function (e, s) {
                                  return Xi(o, void 0, void 0, function () {
                                    var o,
                                      s = this;
                                    return es(this, function (a) {
                                      switch (a.label) {
                                        case 0:
                                          if (!e) return [3, 5];
                                          if (
                                            (ns.debug(
                                              'failed to get the user session',
                                              e
                                            ),
                                            !this.isSessionInvalid(e))
                                          )
                                            return [3, 4];
                                          a.label = 1;
                                        case 1:
                                          return (
                                            a.trys.push([1, 3, , 4]),
                                            [4, this.cleanUpInvalidSession(t)]
                                          );
                                        case 2:
                                          return a.sent(), [3, 4];
                                        case 3:
                                          return (
                                            (o = a.sent()),
                                            i(
                                              new Error(
                                                'Session is invalid due to: ' +
                                                  e.message +
                                                  ' and failed to clean up invalid session: ' +
                                                  o.message
                                              )
                                            ),
                                            [2]
                                          );
                                        case 4:
                                          return [2, i(e)];
                                        case 5:
                                          return (
                                            t.globalSignOut({
                                              onSuccess: function (e) {
                                                if (
                                                  (ns.debug(
                                                    'global sign out success'
                                                  ),
                                                  !r)
                                                )
                                                  return n();
                                                s.oAuthSignOutRedirect(n, i);
                                              },
                                              onFailure: function (e) {
                                                return (
                                                  ns.debug(
                                                    'global sign out failed',
                                                    e
                                                  ),
                                                  i(e)
                                                );
                                              },
                                            }),
                                            [2]
                                          );
                                      }
                                    });
                                  });
                                },
                                { clientMetadata: s }
                              );
                            } else
                              ns.debug('user sign out', t),
                                t.signOut(function () {
                                  if (!r) return n();
                                  o.oAuthSignOutRedirect(n, i);
                                });
                          }),
                        ]
                      );
                  }
                });
              });
            }),
            (n.prototype.oAuthSignOutRedirect = function (e, t) {
              U().isBrowser
                ? this.oAuthSignOutRedirectOrReject(t)
                : this.oAuthSignOutAndResolve(e);
            }),
            (n.prototype.oAuthSignOutAndResolve = function (e) {
              this._oAuthHandler.signOut(), e();
            }),
            (n.prototype.oAuthSignOutRedirectOrReject = function (e) {
              this._oAuthHandler.signOut(),
                setTimeout(function () {
                  return e(Error('Signout timeout fail'));
                }, 3e3);
            }),
            (n.prototype.signOut = function (e) {
              return Xi(this, void 0, void 0, function () {
                var t;
                return es(this, function (n) {
                  switch (n.label) {
                    case 0:
                      return (
                        n.trys.push([0, 2, , 3]), [4, this.cleanCachedItems()]
                      );
                    case 1:
                      return n.sent(), [3, 3];
                    case 2:
                      return (
                        n.sent(),
                        ns.debug('failed to clear cached items'),
                        [3, 3]
                      );
                    case 3:
                      return this.userPool
                        ? (t = this.userPool.getCurrentUser())
                          ? [4, this.cognitoIdentitySignOut(e, t)]
                          : [3, 5]
                        : [3, 7];
                    case 4:
                      return n.sent(), [3, 6];
                    case 5:
                      ns.debug('no current Cognito user'), (n.label = 6);
                    case 6:
                      return [3, 8];
                    case 7:
                      ns.debug('no Cognito User pool'), (n.label = 8);
                    case 8:
                      return (
                        is('signOut', this.user, 'A user has been signed out'),
                        (this.user = null),
                        [2]
                      );
                  }
                });
              });
            }),
            (n.prototype.cleanCachedItems = function () {
              return Xi(this, void 0, void 0, function () {
                return es(this, function (e) {
                  switch (e.label) {
                    case 0:
                      return [4, this.Credentials.clear()];
                    case 1:
                      return e.sent(), [2];
                  }
                });
              });
            }),
            (n.prototype.changePassword = function (e, t, n, r) {
              var o = this;
              return (
                void 0 === r && (r = this._config.clientMetadata),
                new Promise(function (i, s) {
                  o.userSession(e).then(function (o) {
                    e.changePassword(
                      t,
                      n,
                      function (e, t) {
                        return e
                          ? (ns.debug('change password failure', e), s(e))
                          : i(t);
                      },
                      r
                    );
                  });
                })
              );
            }),
            (n.prototype.forgotPassword = function (e, n) {
              if (
                (void 0 === n && (n = this._config.clientMetadata),
                !this.userPool)
              )
                return this.rejectNoUserPool();
              if (!e) return this.rejectAuthError(t.EmptyUsername);
              var r = this.createCognitoUser(e);
              return new Promise(function (t, o) {
                r.forgotPassword(
                  {
                    onSuccess: function () {
                      t();
                    },
                    onFailure: function (t) {
                      ns.debug('forgot password failure', t),
                        is(
                          'forgotPassword_failure',
                          t,
                          e + ' forgotPassword failed'
                        ),
                        o(t);
                    },
                    inputVerificationCode: function (n) {
                      is(
                        'forgotPassword',
                        r,
                        e + ' has initiated forgot password flow'
                      ),
                        t(n);
                    },
                  },
                  n
                );
              });
            }),
            (n.prototype.forgotPasswordSubmit = function (e, n, r, o) {
              if (
                (void 0 === o && (o = this._config.clientMetadata),
                !this.userPool)
              )
                return this.rejectNoUserPool();
              if (!e) return this.rejectAuthError(t.EmptyUsername);
              if (!n) return this.rejectAuthError(t.EmptyCode);
              if (!r) return this.rejectAuthError(t.EmptyPassword);
              var i = this.createCognitoUser(e);
              return new Promise(function (t, s) {
                i.confirmPassword(
                  n,
                  r,
                  {
                    onSuccess: function (n) {
                      is(
                        'forgotPasswordSubmit',
                        i,
                        e + ' forgotPasswordSubmit successful'
                      ),
                        t(n);
                    },
                    onFailure: function (t) {
                      is(
                        'forgotPasswordSubmit_failure',
                        t,
                        e + ' forgotPasswordSubmit failed'
                      ),
                        s(t);
                    },
                  },
                  o
                );
              });
            }),
            (n.prototype.currentUserInfo = function () {
              return Xi(this, void 0, void 0, function () {
                var e, t, n, r, o, i, s;
                return es(this, function (a) {
                  switch (a.label) {
                    case 0:
                      return (e = this.Credentials.getCredSource()) &&
                        'aws' !== e &&
                        'userPool' !== e
                        ? [3, 9]
                        : [
                            4,
                            this.currentUserPoolUser().catch(function (e) {
                              return ns.error(e);
                            }),
                          ];
                    case 1:
                      if (!(s = a.sent())) return [2, null];
                      a.label = 2;
                    case 2:
                      return (
                        a.trys.push([2, 8, , 9]), [4, this.userAttributes(s)]
                      );
                    case 3:
                      (t = a.sent()),
                        (n = this.attributesToObject(t)),
                        (r = null),
                        (a.label = 4);
                    case 4:
                      return (
                        a.trys.push([4, 6, , 7]), [4, this.currentCredentials()]
                      );
                    case 5:
                      return (r = a.sent()), [3, 7];
                    case 6:
                      return (
                        (o = a.sent()),
                        ns.debug(
                          'Failed to retrieve credentials while getting current user info',
                          o
                        ),
                        [3, 7]
                      );
                    case 7:
                      return [
                        2,
                        {
                          id: r ? r.identityId : void 0,
                          username: s.getUsername(),
                          attributes: n,
                        },
                      ];
                    case 8:
                      return (
                        (i = a.sent()),
                        ns.error('currentUserInfo error', i),
                        [2, {}]
                      );
                    case 9:
                      return 'federated' === e
                        ? [2, (s = this.user) || {}]
                        : [2];
                  }
                });
              });
            }),
            (n.prototype.federatedSignIn = function (t, n, r) {
              return Xi(this, void 0, void 0, function () {
                var s, a, u, c, l, f, h, d, p, g, v;
                return es(this, function (y) {
                  switch (y.label) {
                    case 0:
                      if (
                        !this._config.identityPoolId &&
                        !this._config.userPoolId
                      )
                        throw new Error(
                          'Federation requires either a User Pool or Identity Pool in config'
                        );
                      if (
                        void 0 === t &&
                        this._config.identityPoolId &&
                        !this._config.userPoolId
                      )
                        throw new Error(
                          'Federation with Identity Pools requires tokens passed as arguments'
                        );
                      return o(t) ||
                        ((m = t) &&
                          ['customProvider'].find(function (e) {
                            return m.hasOwnProperty(e);
                          })) ||
                        (function (e) {
                          return (
                            e &&
                            !!['customState'].find(function (t) {
                              return e.hasOwnProperty(t);
                            })
                          );
                        })(t) ||
                        void 0 === t
                        ? ((s = t || { provider: e.Cognito }),
                          (l = o(s) ? s.provider : s.customProvider),
                          o(s),
                          (a = s.customState),
                          this._config.userPoolId &&
                            ((u = i(this._config.oauth)
                              ? this._config.userPoolWebClientId
                              : this._config.oauth.clientID),
                            (c = i(this._config.oauth)
                              ? this._config.oauth.redirectSignIn
                              : this._config.oauth.redirectUri),
                            this._oAuthHandler.oauthSignIn(
                              this._config.oauth.responseType,
                              this._config.oauth.domain,
                              c,
                              u,
                              l,
                              a
                            )),
                          [3, 4])
                        : [3, 1];
                    case 1:
                      l = t;
                      try {
                        (f = JSON.stringify(
                          JSON.parse(
                            this._storage.getItem('aws-amplify-federatedInfo')
                          ).user
                        )) &&
                          ns.warn(
                            'There is already a signed in user: ' +
                              f +
                              ' in your app.\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tYou should not call Auth.federatedSignIn method again as it may cause unexpected behavior.'
                          );
                      } catch (e) {}
                      return (
                        (h = n.token),
                        (d = n.identity_id),
                        (p = n.expires_at),
                        [
                          4,
                          this.Credentials.set(
                            {
                              provider: l,
                              token: h,
                              identity_id: d,
                              user: r,
                              expires_at: p,
                            },
                            'federation'
                          ),
                        ]
                      );
                    case 2:
                      return (
                        (g = y.sent()), [4, this.currentAuthenticatedUser()]
                      );
                    case 3:
                      return (
                        (v = y.sent()),
                        is(
                          'signIn',
                          v,
                          'A user ' + v.username + ' has been signed in'
                        ),
                        ns.debug('federated sign in credentials', g),
                        [2, g]
                      );
                    case 4:
                      return [2];
                  }
                  var m;
                });
              });
            }),
            (n.prototype._handleAuthResponse = function (e) {
              return Xi(this, void 0, void 0, function () {
                var t, n, r, o, i, s, a, u, c, l, f, h, d, p;
                return es(this, function (g) {
                  switch (g.label) {
                    case 0:
                      if (this.oAuthFlowInProgress)
                        return (
                          ns.debug(
                            'Skipping URL ' + e + ' current flow in progress'
                          ),
                          [2]
                        );
                      g.label = 1;
                    case 1:
                      if (
                        (g.trys.push([1, , 8, 9]),
                        (this.oAuthFlowInProgress = !0),
                        !this._config.userPoolId)
                      )
                        throw new Error(
                          'OAuth responses require a User Pool defined in config'
                        );
                      if (
                        (is(
                          'parsingCallbackUrl',
                          { url: e },
                          'The callback url is being parsed'
                        ),
                        (t = e || (U().isBrowser ? window.location.href : '')),
                        (n = !!((0, Ni.Qc)(t).query || '')
                          .split('&')
                          .map(function (e) {
                            return e.split('=');
                          })
                          .find(function (e) {
                            var t = ts(e, 1)[0];
                            return 'code' === t || 'error' === t;
                          })),
                        (r = !!((0, Ni.Qc)(t).hash || '#')
                          .substr(1)
                          .split('&')
                          .map(function (e) {
                            return e.split('=');
                          })
                          .find(function (e) {
                            var t = ts(e, 1)[0];
                            return 'access_token' === t || 'error' === t;
                          })),
                        !n && !r)
                      )
                        return [3, 7];
                      this._storage.setItem(
                        'amplify-redirected-from-hosted-ui',
                        'true'
                      ),
                        (g.label = 2);
                    case 2:
                      return (
                        g.trys.push([2, 6, , 7]),
                        [4, this._oAuthHandler.handleAuthResponse(t)]
                      );
                    case 3:
                      return (
                        (o = g.sent()),
                        (i = o.accessToken),
                        (s = o.idToken),
                        (a = o.refreshToken),
                        (u = o.state),
                        (c = new li({
                          IdToken: new si({ IdToken: s }),
                          RefreshToken: new ai({ RefreshToken: a }),
                          AccessToken: new oi({ AccessToken: i }),
                        })),
                        (l = void 0),
                        this._config.identityPoolId
                          ? [4, this.Credentials.set(c, 'session')]
                          : [3, 5]
                      );
                    case 4:
                      (l = g.sent()),
                        ns.debug('AWS credentials', l),
                        (g.label = 5);
                    case 5:
                      return (
                        (f = /-/.test(u)),
                        (h = this.createCognitoUser(
                          c.getIdToken().decodePayload()['cognito:username']
                        )).setSignInUserSession(c),
                        window &&
                          void 0 !== window.history &&
                          window.history.replaceState(
                            {},
                            null,
                            this._config.oauth.redirectSignIn
                          ),
                        is(
                          'signIn',
                          h,
                          'A user ' + h.getUsername() + ' has been signed in'
                        ),
                        is(
                          'cognitoHostedUI',
                          h,
                          'A user ' +
                            h.getUsername() +
                            ' has been signed in via Cognito Hosted UI'
                        ),
                        f &&
                          ((d = u.split('-').splice(1).join('-')),
                          is(
                            'customOAuthState',
                            d
                              .match(/.{2}/g)
                              .map(function (e) {
                                return String.fromCharCode(parseInt(e, 16));
                              })
                              .join(''),
                            'State for user ' + h.getUsername()
                          )),
                        [2, l]
                      );
                    case 6:
                      return (
                        (p = g.sent()),
                        ns.debug('Error in cognito hosted auth response', p),
                        window &&
                          void 0 !== window.history &&
                          window.history.replaceState(
                            {},
                            null,
                            this._config.oauth.redirectSignIn
                          ),
                        is(
                          'signIn_failure',
                          p,
                          'The OAuth response flow failed'
                        ),
                        is(
                          'cognitoHostedUI_failure',
                          p,
                          'A failure occurred when returning to the Cognito Hosted UI'
                        ),
                        is(
                          'customState_failure',
                          p,
                          'A failure occurred when returning state'
                        ),
                        [3, 7]
                      );
                    case 7:
                      return [3, 9];
                    case 8:
                      return (this.oAuthFlowInProgress = !1), [7];
                    case 9:
                      return [2];
                  }
                });
              });
            }),
            (n.prototype.essentialCredentials = function (e) {
              return {
                accessKeyId: e.accessKeyId,
                sessionToken: e.sessionToken,
                secretAccessKey: e.secretAccessKey,
                identityId: e.identityId,
                authenticated: e.authenticated,
              };
            }),
            (n.prototype.attributesToObject = function (e) {
              var t = this,
                n = {};
              return (
                e &&
                  e.map(function (e) {
                    'email_verified' === e.Name ||
                    'phone_number_verified' === e.Name
                      ? (n[e.Name] =
                          t.isTruthyString(e.Value) || !0 === e.Value)
                      : (n[e.Name] = e.Value);
                  }),
                n
              );
            }),
            (n.prototype.isTruthyString = function (e) {
              return (
                'function' == typeof e.toLowerCase && 'true' === e.toLowerCase()
              );
            }),
            (n.prototype.createCognitoUser = function (e) {
              var t = { Username: e, Pool: this.userPool };
              t.Storage = this._storage;
              var n = this._config.authenticationFlowType,
                r = new bi(t);
              return n && r.setAuthenticationFlowType(n), r;
            }),
            (n.prototype._isValidAuthStorage = function (e) {
              return (
                !!e &&
                'function' == typeof e.getItem &&
                'function' == typeof e.setItem &&
                'function' == typeof e.removeItem &&
                'function' == typeof e.clear
              );
            }),
            (n.prototype.noUserPoolErrorHandler = function (e) {
              return !e || (e.userPoolId && e.identityPoolId)
                ? t.NoConfig
                : t.MissingAuthConfig;
            }),
            (n.prototype.rejectAuthError = function (e) {
              return Promise.reject(new $i(e));
            }),
            (n.prototype.rejectNoUserPool = function () {
              var e = this.noUserPoolErrorHandler(this._config);
              return Promise.reject(new Ji(e));
            }),
            (n.prototype.rememberDevice = function () {
              return Xi(this, void 0, void 0, function () {
                var e, n;
                return es(this, function (r) {
                  switch (r.label) {
                    case 0:
                      return (
                        r.trys.push([0, 2, , 3]),
                        [4, this.currentUserPoolUser()]
                      );
                    case 1:
                      return (e = r.sent()), [3, 3];
                    case 2:
                      return (
                        (n = r.sent()),
                        ns.debug(
                          'The user is not authenticated by the error',
                          n
                        ),
                        [2, Promise.reject('The user is not authenticated')]
                      );
                    case 3:
                      return (
                        e.getCachedDeviceKeyAndPassword(),
                        [
                          2,
                          new Promise(function (n, r) {
                            e.setDeviceStatusRemembered({
                              onSuccess: function (e) {
                                n(e);
                              },
                              onFailure: function (e) {
                                'InvalidParameterException' === e.code
                                  ? r(new $i(t.DeviceConfig))
                                  : 'NetworkError' === e.code
                                  ? r(new $i(t.NetworkError))
                                  : r(e);
                              },
                            });
                          }),
                        ]
                      );
                  }
                });
              });
            }),
            (n.prototype.forgetDevice = function () {
              return Xi(this, void 0, void 0, function () {
                var e, n;
                return es(this, function (r) {
                  switch (r.label) {
                    case 0:
                      return (
                        r.trys.push([0, 2, , 3]),
                        [4, this.currentUserPoolUser()]
                      );
                    case 1:
                      return (e = r.sent()), [3, 3];
                    case 2:
                      return (
                        (n = r.sent()),
                        ns.debug(
                          'The user is not authenticated by the error',
                          n
                        ),
                        [2, Promise.reject('The user is not authenticated')]
                      );
                    case 3:
                      return (
                        e.getCachedDeviceKeyAndPassword(),
                        [
                          2,
                          new Promise(function (n, r) {
                            e.forgetDevice({
                              onSuccess: function (e) {
                                n(e);
                              },
                              onFailure: function (e) {
                                'InvalidParameterException' === e.code
                                  ? r(new $i(t.DeviceConfig))
                                  : 'NetworkError' === e.code
                                  ? r(new $i(t.NetworkError))
                                  : r(e);
                              },
                            });
                          }),
                        ]
                      );
                  }
                });
              });
            }),
            (n.prototype.fetchDevices = function () {
              return Xi(this, void 0, void 0, function () {
                var e, n;
                return es(this, function (r) {
                  switch (r.label) {
                    case 0:
                      return (
                        r.trys.push([0, 2, , 3]),
                        [4, this.currentUserPoolUser()]
                      );
                    case 1:
                      return (e = r.sent()), [3, 3];
                    case 2:
                      throw (
                        ((n = r.sent()),
                        ns.debug(
                          'The user is not authenticated by the error',
                          n
                        ),
                        new Error('The user is not authenticated'))
                      );
                    case 3:
                      return (
                        e.getCachedDeviceKeyAndPassword(),
                        [
                          2,
                          new Promise(function (n, r) {
                            var o = {
                              onSuccess: function (e) {
                                var t = e.Devices.map(function (e) {
                                  var t =
                                    e.DeviceAttributes.find(function (e) {
                                      return 'device_name' === e.Name;
                                    }) || {};
                                  return { id: e.DeviceKey, name: t.Value };
                                });
                                n(t);
                              },
                              onFailure: function (e) {
                                'InvalidParameterException' === e.code
                                  ? r(new $i(t.DeviceConfig))
                                  : 'NetworkError' === e.code
                                  ? r(new $i(t.NetworkError))
                                  : r(e);
                              },
                            };
                            e.listDevices(60, null, o);
                          }),
                        ]
                      );
                  }
                });
              });
            }),
            n
          );
        })(),
        as = new ss(null);
      ne.register(as);
      const us = function (e, t) {
          return e === t || (e != e && t != t);
        },
        cs = function (e, t) {
          for (var n = e.length; n--; ) if (us(e[n][0], t)) return n;
          return -1;
        };
      var ls = Array.prototype.splice;
      function fs(e) {
        var t = -1,
          n = null == e ? 0 : e.length;
        for (this.clear(); ++t < n; ) {
          var r = e[t];
          this.set(r[0], r[1]);
        }
      }
      (fs.prototype.clear = function () {
        (this.__data__ = []), (this.size = 0);
      }),
        (fs.prototype.delete = function (e) {
          var t = this.__data__,
            n = cs(t, e);
          return !(
            n < 0 ||
            (n == t.length - 1 ? t.pop() : ls.call(t, n, 1), --this.size, 0)
          );
        }),
        (fs.prototype.get = function (e) {
          var t = this.__data__,
            n = cs(t, e);
          return n < 0 ? void 0 : t[n][1];
        }),
        (fs.prototype.has = function (e) {
          return cs(this.__data__, e) > -1;
        }),
        (fs.prototype.set = function (e, t) {
          var n = this.__data__,
            r = cs(n, e);
          return r < 0 ? (++this.size, n.push([e, t])) : (n[r][1] = t), this;
        });
      const hs = fs,
        ds =
          'object' == typeof global &&
          global &&
          global.Object === Object &&
          global;
      var ps =
        'object' == typeof self && self && self.Object === Object && self;
      const gs = ds || ps || Function('return this')(),
        vs = gs.Symbol;
      var ys = Object.prototype,
        ms = ys.hasOwnProperty,
        bs = ys.toString,
        ws = vs ? vs.toStringTag : void 0;
      var Ss = Object.prototype.toString;
      var _s = vs ? vs.toStringTag : void 0;
      const As = function (e) {
          return null == e
            ? void 0 === e
              ? '[object Undefined]'
              : '[object Null]'
            : _s && _s in Object(e)
            ? (function (e) {
                var t = ms.call(e, ws),
                  n = e[ws];
                try {
                  e[ws] = void 0;
                  var r = !0;
                } catch (e) {}
                var o = bs.call(e);
                return r && (t ? (e[ws] = n) : delete e[ws]), o;
              })(e)
            : (function (e) {
                return Ss.call(e);
              })(e);
        },
        Es = function (e) {
          var t = typeof e;
          return null != e && ('object' == t || 'function' == t);
        },
        Cs = function (e) {
          if (!Es(e)) return !1;
          var t = As(e);
          return (
            '[object Function]' == t ||
            '[object GeneratorFunction]' == t ||
            '[object AsyncFunction]' == t ||
            '[object Proxy]' == t
          );
        },
        Is = gs['__core-js_shared__'];
      var Ps,
        Os = (Ps = /[^.]+$/.exec((Is && Is.keys && Is.keys.IE_PROTO) || ''))
          ? 'Symbol(src)_1.' + Ps
          : '';
      var Ts = Function.prototype.toString;
      var xs = /^\[object .+?Constructor\]$/,
        Us = Function.prototype,
        ks = Object.prototype,
        Ms = Us.toString,
        Rs = ks.hasOwnProperty,
        Ns = RegExp(
          '^' +
            Ms.call(Rs)
              .replace(/[\\^$.*+?()[\]{}|]/g, '\\$&')
              .replace(
                /hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,
                '$1.*?'
              ) +
            '$'
        );
      const Ds = function (e) {
          return (
            !(!Es(e) || ((t = e), Os && Os in t)) &&
            (Cs(e) ? Ns : xs).test(
              (function (e) {
                if (null != e) {
                  try {
                    return Ts.call(e);
                  } catch (e) {}
                  try {
                    return e + '';
                  } catch (e) {}
                }
                return '';
              })(e)
            )
          );
          var t;
        },
        js = function (e, t) {
          var n = (function (e, t) {
            return null == e ? void 0 : e[t];
          })(e, t);
          return Ds(n) ? n : void 0;
        },
        Fs = js(gs, 'Map'),
        Ls = js(Object, 'create');
      var Bs = Object.prototype.hasOwnProperty;
      var Vs = Object.prototype.hasOwnProperty;
      function qs(e) {
        var t = -1,
          n = null == e ? 0 : e.length;
        for (this.clear(); ++t < n; ) {
          var r = e[t];
          this.set(r[0], r[1]);
        }
      }
      (qs.prototype.clear = function () {
        (this.__data__ = Ls ? Ls(null) : {}), (this.size = 0);
      }),
        (qs.prototype.delete = function (e) {
          var t = this.has(e) && delete this.__data__[e];
          return (this.size -= t ? 1 : 0), t;
        }),
        (qs.prototype.get = function (e) {
          var t = this.__data__;
          if (Ls) {
            var n = t[e];
            return '__lodash_hash_undefined__' === n ? void 0 : n;
          }
          return Bs.call(t, e) ? t[e] : void 0;
        }),
        (qs.prototype.has = function (e) {
          var t = this.__data__;
          return Ls ? void 0 !== t[e] : Vs.call(t, e);
        }),
        (qs.prototype.set = function (e, t) {
          var n = this.__data__;
          return (
            (this.size += this.has(e) ? 0 : 1),
            (n[e] = Ls && void 0 === t ? '__lodash_hash_undefined__' : t),
            this
          );
        });
      const zs = qs,
        Ks = function (e, t) {
          var n,
            r,
            o = e.__data__;
          return (
            'string' == (r = typeof (n = t)) ||
            'number' == r ||
            'symbol' == r ||
            'boolean' == r
              ? '__proto__' !== n
              : null === n
          )
            ? o['string' == typeof t ? 'string' : 'hash']
            : o.map;
        };
      function Hs(e) {
        var t = -1,
          n = null == e ? 0 : e.length;
        for (this.clear(); ++t < n; ) {
          var r = e[t];
          this.set(r[0], r[1]);
        }
      }
      (Hs.prototype.clear = function () {
        (this.size = 0),
          (this.__data__ = {
            hash: new zs(),
            map: new (Fs || hs)(),
            string: new zs(),
          });
      }),
        (Hs.prototype.delete = function (e) {
          var t = Ks(this, e).delete(e);
          return (this.size -= t ? 1 : 0), t;
        }),
        (Hs.prototype.get = function (e) {
          return Ks(this, e).get(e);
        }),
        (Hs.prototype.has = function (e) {
          return Ks(this, e).has(e);
        }),
        (Hs.prototype.set = function (e, t) {
          var n = Ks(this, e),
            r = n.size;
          return n.set(e, t), (this.size += n.size == r ? 0 : 1), this;
        });
      const Ws = Hs;
      function Gs(e) {
        var t = (this.__data__ = new hs(e));
        this.size = t.size;
      }
      (Gs.prototype.clear = function () {
        (this.__data__ = new hs()), (this.size = 0);
      }),
        (Gs.prototype.delete = function (e) {
          var t = this.__data__,
            n = t.delete(e);
          return (this.size = t.size), n;
        }),
        (Gs.prototype.get = function (e) {
          return this.__data__.get(e);
        }),
        (Gs.prototype.has = function (e) {
          return this.__data__.has(e);
        }),
        (Gs.prototype.set = function (e, t) {
          var n = this.__data__;
          if (n instanceof hs) {
            var r = n.__data__;
            if (!Fs || r.length < 199)
              return r.push([e, t]), (this.size = ++n.size), this;
            n = this.__data__ = new Ws(r);
          }
          return n.set(e, t), (this.size = n.size), this;
        });
      const Ys = Gs,
        $s = (function () {
          try {
            var e = js(Object, 'defineProperty');
            return e({}, '', {}), e;
          } catch (e) {}
        })(),
        Js = function (e, t, n) {
          '__proto__' == t && $s
            ? $s(e, t, {
                configurable: !0,
                enumerable: !0,
                value: n,
                writable: !0,
              })
            : (e[t] = n);
        },
        Zs = function (e, t, n) {
          ((void 0 !== n && !us(e[t], n)) || (void 0 === n && !(t in e))) &&
            Js(e, t, n);
        },
        Qs = function (e, t, n) {
          for (var r = -1, o = Object(e), i = n(e), s = i.length; s--; ) {
            var a = i[Xs ? s : ++r];
            if (!1 === t(o[a], a, o)) break;
          }
          return e;
        };
      var Xs,
        ea =
          'object' == typeof exports && exports && !exports.nodeType && exports,
        ta =
          ea &&
          'object' == typeof module &&
          module &&
          !module.nodeType &&
          module,
        na = ta && ta.exports === ea ? gs.Buffer : void 0,
        ra = na ? na.allocUnsafe : void 0;
      const oa = gs.Uint8Array,
        ia = function (e, t) {
          var n,
            r,
            o = t
              ? ((n = e.buffer),
                (r = new n.constructor(n.byteLength)),
                new oa(r).set(new oa(n)),
                r)
              : e.buffer;
          return new e.constructor(o, e.byteOffset, e.length);
        };
      var sa = Object.create;
      const aa = (function () {
          function e() {}
          return function (t) {
            if (!Es(t)) return {};
            if (sa) return sa(t);
            e.prototype = t;
            var n = new e();
            return (e.prototype = void 0), n;
          };
        })(),
        ua =
          ((ca = Object.getPrototypeOf),
          (la = Object),
          function (e) {
            return ca(la(e));
          });
      var ca,
        la,
        fa = Object.prototype;
      const ha = function (e) {
          var t = e && e.constructor;
          return e === (('function' == typeof t && t.prototype) || fa);
        },
        da = function (e) {
          return null != e && 'object' == typeof e;
        },
        pa = function (e) {
          return da(e) && '[object Arguments]' == As(e);
        };
      var ga = Object.prototype,
        va = ga.hasOwnProperty,
        ya = ga.propertyIsEnumerable;
      const ma = pa(
          (function () {
            return arguments;
          })()
        )
          ? pa
          : function (e) {
              return da(e) && va.call(e, 'callee') && !ya.call(e, 'callee');
            },
        ba = Array.isArray,
        wa = function (e) {
          return (
            'number' == typeof e &&
            e > -1 &&
            e % 1 == 0 &&
            e <= 9007199254740991
          );
        },
        Sa = function (e) {
          return null != e && wa(e.length) && !Cs(e);
        };
      var _a =
          'object' == typeof exports && exports && !exports.nodeType && exports,
        Aa =
          _a &&
          'object' == typeof module &&
          module &&
          !module.nodeType &&
          module,
        Ea = Aa && Aa.exports === _a ? gs.Buffer : void 0;
      const Ca =
        (Ea ? Ea.isBuffer : void 0) ||
        function () {
          return !1;
        };
      var Ia = Function.prototype,
        Pa = Object.prototype,
        Oa = Ia.toString,
        Ta = Pa.hasOwnProperty,
        xa = Oa.call(Object);
      var Ua = {};
      (Ua['[object Float32Array]'] =
        Ua['[object Float64Array]'] =
        Ua['[object Int8Array]'] =
        Ua['[object Int16Array]'] =
        Ua['[object Int32Array]'] =
        Ua['[object Uint8Array]'] =
        Ua['[object Uint8ClampedArray]'] =
        Ua['[object Uint16Array]'] =
        Ua['[object Uint32Array]'] =
          !0),
        (Ua['[object Arguments]'] =
          Ua['[object Array]'] =
          Ua['[object ArrayBuffer]'] =
          Ua['[object Boolean]'] =
          Ua['[object DataView]'] =
          Ua['[object Date]'] =
          Ua['[object Error]'] =
          Ua['[object Function]'] =
          Ua['[object Map]'] =
          Ua['[object Number]'] =
          Ua['[object Object]'] =
          Ua['[object RegExp]'] =
          Ua['[object Set]'] =
          Ua['[object String]'] =
          Ua['[object WeakMap]'] =
            !1);
      var ka =
          'object' == typeof exports && exports && !exports.nodeType && exports,
        Ma =
          ka &&
          'object' == typeof module &&
          module &&
          !module.nodeType &&
          module,
        Ra = Ma && Ma.exports === ka && ds.process,
        Na = (function () {
          try {
            return (
              (Ma && Ma.require && Ma.require('util').types) ||
              (Ra && Ra.binding && Ra.binding('util'))
            );
          } catch (e) {}
        })(),
        Da = Na && Na.isTypedArray;
      const ja = Da
          ? (function (e) {
              return function (t) {
                return e(t);
              };
            })(Da)
          : function (e) {
              return da(e) && wa(e.length) && !!Ua[As(e)];
            },
        Fa = function (e, t) {
          if (
            ('constructor' !== t || 'function' != typeof e[t]) &&
            '__proto__' != t
          )
            return e[t];
        };
      var La = Object.prototype.hasOwnProperty;
      const Ba = function (e, t, n) {
        var r = e[t];
        (La.call(e, t) && us(r, n) && (void 0 !== n || t in e)) || Js(e, t, n);
      };
      var Va = /^(?:0|[1-9]\d*)$/;
      const qa = function (e, t) {
        var n = typeof e;
        return (
          !!(t = null == t ? 9007199254740991 : t) &&
          ('number' == n || ('symbol' != n && Va.test(e))) &&
          e > -1 &&
          e % 1 == 0 &&
          e < t
        );
      };
      var za = Object.prototype.hasOwnProperty;
      const Ka = function (e, t) {
        var n = ba(e),
          r = !n && ma(e),
          o = !n && !r && Ca(e),
          i = !n && !r && !o && ja(e),
          s = n || r || o || i,
          a = s
            ? (function (e, t) {
                for (var n = -1, r = Array(e); ++n < e; ) r[n] = t(n);
                return r;
              })(e.length, String)
            : [],
          u = a.length;
        for (var c in e)
          (!t && !za.call(e, c)) ||
            (s &&
              ('length' == c ||
                (o && ('offset' == c || 'parent' == c)) ||
                (i &&
                  ('buffer' == c || 'byteLength' == c || 'byteOffset' == c)) ||
                qa(c, u))) ||
            a.push(c);
        return a;
      };
      var Ha = Object.prototype.hasOwnProperty;
      const Wa = function (e) {
          if (!Es(e))
            return (function (e) {
              var t = [];
              if (null != e) for (var n in Object(e)) t.push(n);
              return t;
            })(e);
          var t = ha(e),
            n = [];
          for (var r in e)
            ('constructor' != r || (!t && Ha.call(e, r))) && n.push(r);
          return n;
        },
        Ga = function (e) {
          return Sa(e) ? Ka(e, !0) : Wa(e);
        },
        Ya = function (e) {
          return (function (e, t, n, r) {
            var o = !n;
            n || (n = {});
            for (var i = -1, s = t.length; ++i < s; ) {
              var a = t[i],
                u = r ? r(n[a], e[a], a, n, e) : void 0;
              void 0 === u && (u = e[a]), o ? Js(n, a, u) : Ba(n, a, u);
            }
            return n;
          })(e, Ga(e));
        },
        $a = function (e, t, n, r, o, i, s) {
          var a,
            u = Fa(e, n),
            c = Fa(t, n),
            l = s.get(c);
          if (l) Zs(e, n, l);
          else {
            var f = i ? i(u, c, n + '', e, t, s) : void 0,
              h = void 0 === f;
            if (h) {
              var d = ba(c),
                p = !d && Ca(c),
                g = !d && !p && ja(c);
              (f = c),
                d || p || g
                  ? ba(u)
                    ? (f = u)
                    : da((a = u)) && Sa(a)
                    ? (f = (function (e, t) {
                        var n = -1,
                          r = e.length;
                        for (t || (t = Array(r)); ++n < r; ) t[n] = e[n];
                        return t;
                      })(u))
                    : p
                    ? ((h = !1),
                      (f = (function (e, t) {
                        if (t) return e.slice();
                        var n = e.length,
                          r = ra ? ra(n) : new e.constructor(n);
                        return e.copy(r), r;
                      })(c, !0)))
                    : g
                    ? ((h = !1), (f = ia(c, !0)))
                    : (f = [])
                  : (function (e) {
                      if (!da(e) || '[object Object]' != As(e)) return !1;
                      var t = ua(e);
                      if (null === t) return !0;
                      var n = Ta.call(t, 'constructor') && t.constructor;
                      return (
                        'function' == typeof n &&
                        n instanceof n &&
                        Oa.call(n) == xa
                      );
                    })(c) || ma(c)
                  ? ((f = u),
                    ma(u)
                      ? (f = Ya(u))
                      : (Es(u) && !Cs(u)) ||
                        (f = (function (e) {
                          return 'function' != typeof e.constructor || ha(e)
                            ? {}
                            : aa(ua(e));
                        })(c)))
                  : (h = !1);
            }
            h && (s.set(c, f), o(f, c, r, i, s), s.delete(c)), Zs(e, n, f);
          }
        },
        Ja = function e(t, n, r, o, i) {
          t !== n &&
            Qs(
              n,
              function (s, a) {
                if ((i || (i = new Ys()), Es(s))) $a(t, n, a, r, e, o, i);
                else {
                  var u = o ? o(Fa(t, a), s, a + '', t, n, i) : void 0;
                  void 0 === u && (u = s), Zs(t, a, u);
                }
              },
              Ga
            );
        },
        Za = function (e) {
          return e;
        },
        Qa = function (e, t, n) {
          switch (n.length) {
            case 0:
              return e.call(t);
            case 1:
              return e.call(t, n[0]);
            case 2:
              return e.call(t, n[0], n[1]);
            case 3:
              return e.call(t, n[0], n[1], n[2]);
          }
          return e.apply(t, n);
        };
      var Xa = Math.max;
      const eu = $s
        ? function (e, t) {
            return $s(e, 'toString', {
              configurable: !0,
              enumerable: !1,
              value:
                ((n = t),
                function () {
                  return n;
                }),
              writable: !0,
            });
            var n;
          }
        : Za;
      var tu = Date.now;
      const nu = (function (e) {
          var t = 0,
            n = 0;
          return function () {
            var r = tu(),
              o = 16 - (r - n);
            if (((n = r), o > 0)) {
              if (++t >= 800) return arguments[0];
            } else t = 0;
            return e.apply(void 0, arguments);
          };
        })(eu),
        ru = function (e, t) {
          return nu(
            (function (e, t, n) {
              return (
                (t = Xa(void 0 === t ? e.length - 1 : t, 0)),
                function () {
                  for (
                    var r = arguments,
                      o = -1,
                      i = Xa(r.length - t, 0),
                      s = Array(i);
                    ++o < i;

                  )
                    s[o] = r[t + o];
                  o = -1;
                  for (var a = Array(t + 1); ++o < t; ) a[o] = r[o];
                  return (a[t] = n(s)), Qa(e, this, a);
                }
              );
            })(e, t, Za),
            e + ''
          );
        },
        ou =
          ((iu = function (e, t, n) {
            Ja(e, t, n);
          }),
          ru(function (e, t) {
            var n = -1,
              r = t.length,
              o = r > 1 ? t[r - 1] : void 0,
              i = r > 2 ? t[2] : void 0;
            for (
              o = iu.length > 3 && 'function' == typeof o ? (r--, o) : void 0,
                i &&
                  (function (e, t, n) {
                    if (!Es(n)) return !1;
                    var r = typeof t;
                    return (
                      !!('number' == r
                        ? Sa(n) && qa(t, n.length)
                        : 'string' == r && (t in n)) && us(n[t], e)
                    );
                  })(t[0], t[1], i) &&
                  ((o = r < 3 ? void 0 : o), (r = 1)),
                e = Object(e);
              ++n < r;

            ) {
              var s = t[n];
              s && iu(e, s, n, o);
            }
            return e;
          }));
      var iu;
      let su = { baseUrl: '', region: '', cardsBucket: '' };
      const au = async (e, t) => {
        try {
          const n = {
              'Content-Type': 'application/json',
              Accept: 'application/json',
              Authorization: `Bearer ${(await as.currentSession())
                .getIdToken()
                .getJwtToken()}`,
            },
            r = await fetch(su.baseUrl + e, ou(t, { headers: n }));
          return r.ok
            ? r.headers.has('Content-Type') &&
              'application/json' === r.headers.get('Content-Type') &&
              '0' !== r.headers.get('Content-Length')
              ? { success: !0, value: await r.json() }
              : { success: !0, value: await r.text() }
            : {
                success: !1,
                errorCode: 'API_REQUEST_NOT_OK',
                reason: 'The API has returned failed status.',
                extra: r,
              };
        } catch (e) {
          return {
            success: !1,
            errorCode: 'API_REQUEST_UNHANDLED_ERROR',
            reason: 'Un unexpected error has occurred during the request.',
            extra: e,
          };
        }
      };
      var uu = n(5739);
      const cu = async (e) => {
          try {
            return await au(`/languages/${e.language}`, {
              method: 'PUT',
              body: JSON.stringify(e),
            });
          } catch (e) {
            return {
              success: !1,
              errorCode: 'LANGUAGE_DECK_SAVE_ERROR',
              reason:
                'An error during the saving of a language deck has occurred.',
              extra: e,
            };
          }
        },
        lu = async (e) => {
          try {
            const t = await au(`/languages/${e}`, { method: 'GET' });
            return !1 === t.success || t.value
              ? t
              : { success: !0, value: { language: e, cards: [] } };
          } catch (e) {
            return {
              success: !1,
              errorCode: 'LANGUAGE_DECK_LOAD_ERROR',
              reason:
                'An error during the loading of a language deck has occurred.',
              extra: e,
            };
          }
        };
      let fu = (e = 21) =>
        crypto
          .getRandomValues(new Uint8Array(e))
          .reduce(
            (e, t) =>
              e +
              ((t &= 63) < 36
                ? t.toString(36)
                : t < 62
                ? (t - 26).toString(36).toUpperCase()
                : t > 62
                ? '-'
                : '_'),
            ''
          );
      let hu;
      'undefined' != typeof chrome
        ? (hu = chrome)
        : 'undefined' != typeof browser &&
          (console.log('Browser env'), (hu = browser));
      const du = (e) => (t, n) =>
          new Promise((r, o) => {
            if (!hu) return void o('browserEnv environment is not defined');
            if (!hu.runtime)
              return void o('browserEnv.runtime is not defined defined');
            const i = [
              { identifier: e, data: t },
              (e) => {
                if (hu.runtime.lastError) return o(hu.runtime.lastError);
                r(e);
              },
            ];
            n && i.unshift(n), hu.runtime.sendMessage(...i);
          }),
        pu = (e, t) => (n, r, o) => {
          if (
            (console.log('shit received', n),
            'object' != typeof n || null === n || n.identifier !== e)
          )
            return;
          const i = n.data;
          return t((e) => (o(e), e), i), !0;
        },
        gu = (e) => {
          const t = du(e);
          return [
            (e, n) => t(n, e),
            (t) => {
              hu.runtime.onMessageExternal.addListener(pu(e, t));
            },
          ];
        },
        vu = (e) =>
          ((e) => [
            du(e),
            (t) => {
              hu.runtime.onMessage.addListener(pu(e, t));
            },
          ])(`vocably.${e}`),
        [yu, mu] = vu('isLoggedIn'),
        [bu, wu] = vu('isActive'),
        [Su, _u] = vu('isEligibleForTrial'),
        [Au, Eu] = vu('analyze'),
        [Cu, Iu] = vu('listLanguages'),
        [Pu, Ou] = vu('cleanUp'),
        [Tu, xu] = vu('ping'),
        [Uu, ku] = vu('getInternalProxyLanguage'),
        [Mu, Ru] = vu('setInternalProxyLanguage'),
        [Nu, Du] = vu('getInternalSourceLanguage'),
        [ju, Fu] = vu('setInternalSourceLanguage'),
        [Lu, Bu] = gu('vocably.ping-external'),
        [Vu, qu] = gu('vocably.setProxyLanguage'),
        [zu, Ku] = gu('vocably.getProxyLanguage'),
        Hu = (e) => {
          if (void 0 !== e) return e.getValue();
        },
        Wu = function (e) {
          return 'symbol' == typeof e || (da(e) && '[object Symbol]' == As(e));
        };
      var Gu = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
        Yu = /^\w*$/;
      function $u(e, t) {
        if ('function' != typeof e || (null != t && 'function' != typeof t))
          throw new TypeError('Expected a function');
        var n = function () {
          var r = arguments,
            o = t ? t.apply(this, r) : r[0],
            i = n.cache;
          if (i.has(o)) return i.get(o);
          var s = e.apply(this, r);
          return (n.cache = i.set(o, s) || i), s;
        };
        return (n.cache = new ($u.Cache || Ws)()), n;
      }
      $u.Cache = Ws;
      const Ju = $u;
      var Zu =
          /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,
        Qu = /\\(\\)?/g;
      const Xu = (function (e) {
        var t = Ju(e, function (e) {
            return 500 === n.size && n.clear(), e;
          }),
          n = t.cache;
        return t;
      })(function (e) {
        var t = [];
        return (
          46 === e.charCodeAt(0) && t.push(''),
          e.replace(Zu, function (e, n, r, o) {
            t.push(r ? o.replace(Qu, '$1') : n || e);
          }),
          t
        );
      });
      var ec = vs ? vs.prototype : void 0,
        tc = ec ? ec.toString : void 0;
      const nc = function e(t) {
          if ('string' == typeof t) return t;
          if (ba(t))
            return (
              (function (e, t) {
                for (
                  var n = -1, r = null == e ? 0 : e.length, o = Array(r);
                  ++n < r;

                )
                  o[n] = t(e[n], n, e);
                return o;
              })(t, e) + ''
            );
          if (Wu(t)) return tc ? tc.call(t) : '';
          var n = t + '';
          return '0' == n && 1 / t == -1 / 0 ? '-0' : n;
        },
        rc = function (e, t) {
          return ba(e)
            ? e
            : (function (e, t) {
                if (ba(e)) return !1;
                var n = typeof e;
                return (
                  !(
                    'number' != n &&
                    'symbol' != n &&
                    'boolean' != n &&
                    null != e &&
                    !Wu(e)
                  ) ||
                  Yu.test(e) ||
                  !Gu.test(e) ||
                  (null != t && e in Object(t))
                );
              })(e, t)
            ? [e]
            : Xu(
                (function (e) {
                  return null == e ? '' : nc(e);
                })(e)
              );
        },
        oc = function (e) {
          if ('string' == typeof e || Wu(e)) return e;
          var t = e + '';
          return '0' == t && 1 / e == -1 / 0 ? '-0' : t;
        },
        ic = function (e, t, n) {
          var r =
            null == e
              ? void 0
              : (function (e, t) {
                  for (
                    var n = 0, r = (t = rc(t, e)).length;
                    null != e && n < r;

                  )
                    e = e[oc(t[n++])];
                  return n && n == r ? e : void 0;
                })(e, t);
          return void 0 === r ? n : r;
        },
        sc = (e) => (t) =>
          e.source.toLowerCase() === t.source.toLowerCase() &&
          e.partOfSpeech === t.partOfSpeech,
        ac = (e) => {
          const t = new Date();
          return Date.UTC(
            t.getUTCFullYear(),
            t.getUTCMonth(),
            t.getUTCDate() + e
          );
        },
        uc = (e) =>
          0 === e.length
            ? ''
            : 1 === e.length
            ? e[0]
            : e.map((e) => `* ${e}`).join('\n'),
        cc = (e) =>
          e
            .split('\n')
            .map((e) => e.replace(/^\* */, '').replace(/ +$/, ''))
            .filter((e) => '' !== e),
        lc = (e, t) => {
          const n = ((e) => (t) => {
            const n = +new Date(),
              r = { id: fu(5), created: n, data: t };
            return e.push(r), r;
          })(e);
          return t.map((t) => {
            const r = e.find(
              (
                (e) => (t) =>
                  sc(e)(t.data)
              )(t)
            );
            return void 0 === r ? n(t) : ou({ data: t }, r);
          });
        },
        fc = (e, t) => {
          const n = e.findIndex(sc(t));
          return -1 === n
            ? [...e, t]
            : e.map((e, r) =>
                r !== n
                  ? e
                  : {
                      ...e,
                      definition: uc([
                        ...cc(e.definition),
                        ...cc(t.definition),
                      ]),
                    }
              );
        };
      n(7993);
      let hc = { timestamp: 0, list: [] };
      const dc = async () => {
          const { proxyLanguage: e } = await chrome.storage.sync.get([
            'proxyLanguage',
          ]);
          return e ?? null;
        },
        pc = async (e) => {
          await chrome.storage.sync.set({ proxyLanguage: e });
        },
        gc = async () => {
          const { sourceLanguage: e } = await chrome.storage.sync.get([
            'sourceLanguage',
          ]);
          return e ?? null;
        },
        vc = async (e) => {
          await chrome.storage.sync.set({ sourceLanguage: e });
        },
        yc = '@Auth_',
        mc = (e) => `@Auth_${e}`,
        bc = (e) => e.startsWith(yc),
        wc = (e) => e.replace(yc, ''),
        Sc = (e) =>
          e
            .get()
            .then((e) =>
              Object.entries(e).reduce(
                (e, [t, n]) =>
                  bc(t)
                    ? Object.assign(Object.assign({}, e), { [wc(t)]: n })
                    : e,
                {}
              )
            );
      var _c = function (e, t, n, r) {
        return new (n || (n = Promise))(function (o, i) {
          function s(e) {
            try {
              u(r.next(e));
            } catch (e) {
              i(e);
            }
          }
          function a(e) {
            try {
              u(r.throw(e));
            } catch (e) {
              i(e);
            }
          }
          function u(e) {
            var t;
            e.done
              ? o(e.value)
              : ((t = e.value),
                t instanceof n
                  ? t
                  : new n(function (e) {
                      e(t);
                    })).then(s, a);
          }
          u((r = r.apply(e, t || [])).next());
        });
      };
      let Ac = {};
      class Ec {
        constructor(e) {
          (this.syncPromise = null), (this.storage = e);
        }
        setItem(e, t) {
          return _c(this, void 0, void 0, function* () {
            return (
              yield ((e, t) =>
                e.set(
                  Object.entries(t).reduce(
                    (e, [t, n]) =>
                      Object.assign(Object.assign({}, e), { [mc(t)]: n }),
                    {}
                  )
                ))(this.storage, { [e]: t }),
              (Ac[e] = t),
              Ac[e]
            );
          });
        }
        getItem(e) {
          return Object.prototype.hasOwnProperty.call(Ac, e) ? Ac[e] : void 0;
        }
        removeItem(e) {
          return _c(this, void 0, void 0, function* () {
            return (
              yield ((e, t) => e.remove(t.map(mc)))(this.storage, [e]),
              delete Ac[e]
            );
          });
        }
        clear() {
          return _c(this, void 0, void 0, function* () {
            return (
              yield ((e) =>
                e.get().then((t) => e.remove(Object.keys(t).filter(bc))))(
                this.storage
              ),
              (Ac = {}),
              Ac
            );
          });
        }
        getAll() {
          return _c(this, void 0, void 0, function* () {
            return Sc(this.storage);
          });
        }
        sync() {
          return (
            this.syncPromise ||
              (this.syncPromise = Sc(this.storage).then((e) => {
                Ac = e;
              })),
            this.syncPromise
          );
        }
      }
      const Cc = 'authStorage',
        [Ic, Pc] = gu(`${Cc}.setItem`),
        [Oc, Tc] = gu(`${Cc}.removeItem`),
        [xc, Uc] = gu(`${Cc}.getAll`),
        [kc, Mc] = gu(`${Cc}.clear`);
      var Rc = function (e, t, n, r) {
          return new (n || (n = Promise))(function (o, i) {
            function s(e) {
              try {
                u(r.next(e));
              } catch (e) {
                i(e);
              }
            }
            function a(e) {
              try {
                u(r.throw(e));
              } catch (e) {
                i(e);
              }
            }
            function u(e) {
              var t;
              e.done
                ? o(e.value)
                : ((t = e.value),
                  t instanceof n
                    ? t
                    : new n(function (e) {
                        e(t);
                      })).then(s, a);
            }
            u((r = r.apply(e, t || [])).next());
          });
        },
        Nc = function (e, t, n, r) {
          return new (n || (n = Promise))(function (o, i) {
            function s(e) {
              try {
                u(r.next(e));
              } catch (e) {
                i(e);
              }
            }
            function a(e) {
              try {
                u(r.throw(e));
              } catch (e) {
                i(e);
              }
            }
            function u(e) {
              var t;
              e.done
                ? o(e.value)
                : ((t = e.value),
                  t instanceof n
                    ? t
                    : new n(function (e) {
                        e(t);
                      })).then(s, a);
            }
            u((r = r.apply(e, t || [])).next());
          });
        };
      var Dc;
      (Dc = {
        auth: {
          region: 'eu-central-1',
          userPoolId: 'eu-central-1_Tpn3gUQYg',
          userPoolWebClientId: '4j2gqrq3ne32jqee4ddu15p1g4',
          storage: ((e) => {
            const t = chrome.storage.sync,
              n = new Ec(t);
            return (
              Pc((e, { key: t, value: r }) =>
                Rc(void 0, void 0, void 0, function* () {
                  return yield n.setItem(t, r), e();
                })
              ),
              Tc((e, t) =>
                Rc(void 0, void 0, void 0, function* () {
                  return yield n.removeItem(t), e();
                })
              ),
              Mc((e) =>
                Rc(void 0, void 0, void 0, function* () {
                  yield n.clear(), e();
                })
              ),
              Uc((e) =>
                Rc(void 0, void 0, void 0, function* () {
                  return e(yield n.getAll());
                })
              ),
              n
            );
          })(),
        },
        api: {
          baseUrl: 'https://api.dev.env.vocably.pro',
          region: 'eu-central-1',
          cardsBucket: 'vocably-dev-cards',
        },
      }),
        as.configure(Dc.auth),
        (su = Dc.api),
        mu(async (e) => {
          console.info('Login check has been requested.');
          const t = await as
            .currentSession()
            .then(() => !0)
            .catch(() => !1);
          return (
            console.info(`The user is ${t ? 'logged in' : 'not logged in'}.`),
            e(t)
          );
        }),
        wu(async (e) => {
          const t = await as.currentAuthenticatedUser().catch(() => !1);
          return e(
            !!t &&
              ic(
                t,
                'signInUserSession.accessToken.payload.cognito:groups',
                []
              ).includes('paid')
          );
        }),
        _u(async (e) => {
          const t = await as.currentAuthenticatedUser().catch(() => !1);
          if (!1 === t) return e(!1);
          const n = (({ user: e, attributes: t }) => {
            const n = t.find((e) => 'email' === e.getName()),
              r = t.find((e) => 'sub' === e.getName()),
              o = t.find((e) => 'custom:status' === e.getName()),
              i = t.find((e) => 'custom:cancellation_date' === e.getName()),
              s = t.find((e) => 'custom:next_bill_date' === e.getName()),
              a = t.find((e) => 'custom:unit_price' === e.getName()),
              u = t.find((e) => 'custom:update_url' === e.getName()),
              c = t.find((e) => 'custom:cancel_url' === e.getName()),
              l = t.find((e) => 'custom:product_id' === e.getName()),
              f = t.find((e) => 'custom:plan_name' === e.getName());
            if (!n || !r) throw Error('Can find email and sub in user data.');
            return {
              username: e.getUsername(),
              email: n.getValue(),
              sub: r.getValue(),
              status: Hu(o),
              updateUrl: Hu(u),
              cancelUrl: Hu(c),
              nextBillDate: s && new Date(s.getValue()),
              unitPrice: a && parseFloat(a.getValue()),
              cancellationDate: i && new Date(i.getValue()),
              productId: l && parseInt(l.getValue()),
              planName: f && f.getValue(),
            };
          })({ user: t, attributes: await as.userAttributes(t) });
          return e(((e) => 'deleted' !== e.status)(n));
        }),
        Eu(async (e, t) => {
          console.info('Analyze has been requested.');
          const n = {
            ...t,
            sourceLanguage: t.sourceLanguage ?? (await gc()) ?? void 0,
            targetLanguage: (await dc()) ?? 'en',
          };
          t.sourceLanguage && (await vc(t.sourceLanguage));
          try {
            const t = await (async (e) => {
              try {
                return await au('/analyze', {
                  method: 'POST',
                  body: JSON.stringify(e),
                });
              } catch (e) {
                return {
                  success: !1,
                  errorCode: 'API_TRANSLATION_REQUEST_FAILED',
                  reason: 'The translation request has failed.',
                  extra: e,
                };
              }
            })(n);
            if (
              (console.info('Analyze has returned data.', t), !1 === t.success)
            )
              return (
                t.extra &&
                  t.extra.body &&
                  console.info('Backend error body', t.extra.body.toString()),
                e(t)
              );
            const o = await lu(t.value.translation.sourceLanguage);
            if (
              (console.info('Cards loading has been requested.', o),
              !1 === o.success)
            )
              return e(o);
            const i = o.value,
              s = ((e, t, n) => {
                const r = {
                  interval: 0,
                  repetition: 0,
                  eFactor: 2.5,
                  dueDate: ac(0),
                };
                return void 0 === n.items || 0 === n.items.length
                  ? lc(e, [
                      {
                        language: n.translation.sourceLanguage,
                        source:
                          ((o = t),
                          o && o.source && o.targetLanguage
                            ? t.source
                            : n.source),
                        definition: '',
                        translation: n.translation.target,
                        partOfSpeech: '',
                        ...r,
                      },
                    ])
                  : lc(
                      e,
                      n.items
                        .map((e) => ({
                          language: n.translation.sourceLanguage,
                          source: e.source,
                          definition: uc(e.definitions),
                          translation: e.translation,
                          partOfSpeech: e.partOfSpeech ?? '',
                          ...r,
                        }))
                        .reduce(fc, [])
                    );
                var o;
              })(i.cards, n, t.value),
              a = await cu(i);
            if (
              (console.info('Cards saving has been requested.', a),
              !1 === a.success)
            )
              return e(a);
            const u = {
              cards: s,
              source: t.value.source,
              translation: t.value.translation,
            };
            return (
              console.info('And translation result is', u),
              (r = u.translation.sourceLanguage),
              (hc = { ...hc, list: [...hc.list.filter((e) => e !== r), r] }),
              e({ success: !0, value: u })
            );
          } catch (t) {
            return e({
              success: !1,
              errorCode: 'EXTENSION_SERVICE_WORKER_ERROR_CREATING_CARDS',
              reason:
                'An unexpected error has occurred during the cards creation in service worker.',
              extra: t,
            });
          }
          var r;
        }),
        Ou(async (e, t) => {
          console.info('Clean up has been requested.', t);
          try {
            const o = await lu(t.translation.sourceLanguage);
            if (!1 === o.success) return e(o);
            const i = o.value,
              s =
                ((r = i.cards),
                (e) => {
                  const t = r.findIndex(
                    (
                      (e) => (t) =>
                        t.id === e
                    )(e)
                  );
                  return -1 === t
                    ? {
                        success: !1,
                        errorCode: 'CRUD_UNABLE_TO_FIND_ITEM',
                        reason: `Unable to find item with ID ${e}`,
                      }
                    : (r.splice(t, 1), { success: !0, value: !0 });
                });
            return (
              t.cards.forEach((e) => s(e.id)),
              0 === i.cards.length
                ? (console.info('The entire deck will be deleted.', t),
                  (n = i.language),
                  (hc = { ...hc, list: hc.list.filter((e) => e !== n) }),
                  e(
                    await (async (e) => {
                      try {
                        return await au(`/languages/${e}`, {
                          method: 'DELETE',
                        });
                      } catch (e) {
                        return {
                          success: !1,
                          errorCode: 'LANGUAGE_DECK_DELETE_ERROR',
                          reason:
                            'An error during the deletion of a language deck has occurred.',
                          extra: e,
                        };
                      }
                    })(i.language)
                  ))
                : (console.info(
                    `${t.cards.length} cards will be deleted from the deck.`,
                    t
                  ),
                  e(await cu(i)))
            );
          } catch (t) {
            return e({
              success: !1,
              errorCode: 'EXTENSION_SERVICE_WORKER_ERROR_CLEANING_UP',
              reason:
                'An unexpected error has occurred during the cards clean up in service worker.',
              extra: t,
            });
          }
          var n, r;
        }),
        Iu(async (e) =>
          e(
            await (async () => {
              const e = new Date().getTime();
              if (hc.timestamp > e) return { success: !0, value: hc.list };
              const t = await (async () => {
                try {
                  const e = await au('/languages', { method: 'GET' });
                  if (!1 === e.success) return e;
                  let t =
                    (0, uu.parse)(e.value)?.ListBucketResult?.Contents ?? [];
                  return (
                    Array.isArray(t) || (t = [t]),
                    {
                      success: !0,
                      value: t.map((e) => e.Key).map((e) => e.split('/').pop()),
                    }
                  );
                } catch (e) {
                  return {
                    success: !1,
                    errorCode: 'LANGUAGE_DECKS_LIST_ERROR',
                    reason:
                      'An error during the retrieving of available language decks has occurred.',
                    extra: e,
                  };
                }
              })().catch((e) => {
                throw (console.error('List languages error', e), e);
              });
              return !1 === t.success
                ? t
                : ((hc = { timestamp: e + 36e5, list: t.value }),
                  { success: !0, value: hc.list });
            })()
          )
        ),
        xu((e) => e('pong')),
        Bu((e) => e('pong')),
        ku(async (e) => e(await dc())),
        Ru(async (e, t) => (await pc(t), e())),
        Du(async (e) => e(await gc())),
        Fu(async (e, t) => (await vc(t), e())),
        Ku(async (e) => e(await dc())),
        qu(async (e, t) => (await pc(t), e())),
        console.info('The service worker has been registered.'),
        chrome.runtime.onInstalled.addListener((e) =>
          Nc(void 0, void 0, void 0, function* () {
            e.reason === chrome.runtime.OnInstalledReason.INSTALL &&
              (yield chrome.tabs.create({
                url: 'https://app.dev.env.vocably.pro/page/welcome',
              }));
          })
        ),
        chrome.runtime.onInstalled.addListener(() =>
          Nc(void 0, void 0, void 0, function* () {
            for (const e of chrome.runtime.getManifest().content_scripts)
              for (const t of yield chrome.tabs.query({ url: e.matches }))
                chrome.scripting.executeScript({
                  target: { tabId: t.id },
                  files: e.js,
                });
          })
        ),
        chrome.runtime.setUninstallURL(
          'https://docs.google.com/forms/d/e/1FAIpQLSdMurLCVSOO6hfA9dOKvvqm260ZPDe9JKp8iNe8xwf0gbNyvQ/viewform?usp=sf_link'
        );
    })();
})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
