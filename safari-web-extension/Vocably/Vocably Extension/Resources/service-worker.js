/*! For license information please see service-worker.js.LICENSE.txt */
(()=>{var e={893:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0})},4532:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0})},5039:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0})},6177:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0})},9693:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isMsWindow=void 0;var n=["decrypt","digest","encrypt","exportKey","generateKey","importKey","sign","verify"];t.isMsWindow=function(e){if(function(e){return"MSInputMethodContext"in e&&"msCrypto"in e}(e)&&void 0!==e.msCrypto.subtle){var t=e.msCrypto,r=t.getRandomValues,o=t.subtle;return n.map((function(e){return o[e]})).concat(r).every((function(e){return"function"==typeof e}))}return!1}},2860:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(8967);r.__exportStar(n(893),t),r.__exportStar(n(4532),t),r.__exportStar(n(5039),t),r.__exportStar(n(6177),t),r.__exportStar(n(9693),t)},8967:(e,t,n)=>{"use strict";n.r(t),n.d(t,{__assign:()=>i,__asyncDelegator:()=>w,__asyncGenerator:()=>b,__asyncValues:()=>S,__await:()=>m,__awaiter:()=>l,__classPrivateFieldGet:()=>P,__classPrivateFieldSet:()=>x,__createBinding:()=>h,__decorate:()=>a,__exportStar:()=>d,__extends:()=>o,__generator:()=>f,__importDefault:()=>E,__importStar:()=>A,__makeTemplateObject:()=>_,__metadata:()=>c,__param:()=>u,__read:()=>g,__rest:()=>s,__spread:()=>y,__spreadArrays:()=>v,__values:()=>p});var r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},r(e,t)};function o(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}var i=function(){return i=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},i.apply(this,arguments)};function s(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n}function a(e,t,n,r){var o,i=arguments.length,s=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(o=e[a])&&(s=(i<3?o(s):i>3?o(t,n,s):o(t,n))||s);return i>3&&s&&Object.defineProperty(t,n,s),s}function u(e,t){return function(n,r){t(n,r,e)}}function c(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)}function l(e,t,n,r){return new(n||(n=Promise))((function(o,i){function s(e){try{u(r.next(e))}catch(e){i(e)}}function a(e){try{u(r.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}u((r=r.apply(e,t||[])).next())}))}function f(e,t){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}}function h(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}function d(e,t){for(var n in e)"default"===n||t.hasOwnProperty(n)||(t[n]=e[n])}function p(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}function g(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)s.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return s}function y(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(g(arguments[t]));return e}function v(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var i=arguments[t],s=0,a=i.length;s<a;s++,o++)r[o]=i[s];return r}function m(e){return this instanceof m?(this.v=e,this):new m(e)}function b(e,t,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,o=n.apply(e,t||[]),i=[];return r={},s("next"),s("throw"),s("return"),r[Symbol.asyncIterator]=function(){return this},r;function s(e){o[e]&&(r[e]=function(t){return new Promise((function(n,r){i.push([e,t,n,r])>1||a(e,t)}))})}function a(e,t){try{(n=o[e](t)).value instanceof m?Promise.resolve(n.value.v).then(u,c):l(i[0][2],n)}catch(e){l(i[0][3],e)}var n}function u(e){a("next",e)}function c(e){a("throw",e)}function l(e,t){e(t),i.shift(),i.length&&a(i[0][0],i[0][1])}}function w(e){var t,n;return t={},r("next"),r("throw",(function(e){throw e})),r("return"),t[Symbol.iterator]=function(){return this},t;function r(r,o){t[r]=e[r]?function(t){return(n=!n)?{value:m(e[r](t)),done:"return"===r}:o?o(t):t}:o}}function S(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,n=e[Symbol.asyncIterator];return n?n.call(e):(e=p(e),t={},r("next"),r("throw"),r("return"),t[Symbol.asyncIterator]=function(){return this},t);function r(n){t[n]=e[n]&&function(t){return new Promise((function(r,o){!function(e,t,n,r){Promise.resolve(r).then((function(t){e({value:t,done:n})}),t)}(r,o,(t=e[n](t)).done,t.value)}))}}}function _(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e}function A(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}function E(e){return e&&e.__esModule?e:{default:e}}function P(e,t){if(!t.has(e))throw new TypeError("attempted to get private field on non-instance");return t.get(e)}function x(e,t,n){if(!t.has(e))throw new TypeError("attempted to set private field on non-instance");return t.set(e,n),n}},3497:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.EMPTY_DATA_SHA_256=t.SHA_256_HMAC_ALGO=t.SHA_256_HASH=void 0,t.SHA_256_HASH={name:"SHA-256"},t.SHA_256_HMAC_ALGO={name:"HMAC",hash:t.SHA_256_HASH},t.EMPTY_DATA_SHA_256=new Uint8Array([227,176,196,66,152,252,28,20,154,251,244,200,153,111,185,36,39,174,65,228,100,155,147,76,164,149,153,27,120,82,184,85])},2401:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Sha256=void 0;var r=n(8479),o=n(214),i=n(4327),s=n(2942),a=n(2860),u=n(8281),c=function(){function e(e){(0,s.supportsWebCrypto)((0,u.locateWindow)())?this.hash=new o.Sha256(e):(0,a.isMsWindow)((0,u.locateWindow)())?this.hash=new r.Sha256(e):this.hash=new i.Sha256(e)}return e.prototype.update=function(e,t){this.hash.update(e,t)},e.prototype.digest=function(){return this.hash.digest()},e}();t.Sha256=c},8479:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Sha256=void 0;var r=n(5780),o=n(3497),i=n(8323),s=n(8281),a=function(){function e(e){e?(this.operation=function(e){return new Promise((function(t,n){var r=(0,s.locateWindow)().msCrypto.subtle.importKey("raw",u(e),o.SHA_256_HMAC_ALGO,!1,["sign"]);r.oncomplete=function(){r.result&&t(r.result),n(new Error("ImportKey completed without importing key."))},r.onerror=function(){n(new Error("ImportKey failed to import key."))}}))}(e).then((function(e){return(0,s.locateWindow)().msCrypto.subtle.sign(o.SHA_256_HMAC_ALGO,e)})),this.operation.catch((function(){}))):this.operation=Promise.resolve((0,s.locateWindow)().msCrypto.subtle.digest("SHA-256"))}return e.prototype.update=function(e){var t=this;(0,r.isEmptyData)(e)||(this.operation=this.operation.then((function(n){return n.onerror=function(){t.operation=Promise.reject(new Error("Error encountered updating hash"))},n.process(u(e)),n})),this.operation.catch((function(){})))},e.prototype.digest=function(){return this.operation.then((function(e){return new Promise((function(t,n){e.onerror=function(){n(new Error("Error encountered finalizing hash"))},e.oncomplete=function(){e.result&&t(new Uint8Array(e.result)),n(new Error("Error encountered finalizing hash"))},e.finish()}))}))},e}();function u(e){return"string"==typeof e?(0,i.fromUtf8)(e):ArrayBuffer.isView(e)?new Uint8Array(e.buffer,e.byteOffset,e.byteLength/Uint8Array.BYTES_PER_ELEMENT):new Uint8Array(e)}t.Sha256=a},8322:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.WebCryptoSha256=t.Ie11Sha256=void 0,(0,n(2505).__exportStar)(n(2401),t);var r=n(8479);Object.defineProperty(t,"Ie11Sha256",{enumerable:!0,get:function(){return r.Sha256}});var o=n(214);Object.defineProperty(t,"WebCryptoSha256",{enumerable:!0,get:function(){return o.Sha256}})},5780:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isEmptyData=void 0,t.isEmptyData=function(e){return"string"==typeof e?0===e.length:0===e.byteLength}},214:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Sha256=void 0;var r=n(4959),o=n(3497),i=n(8281),s=function(){function e(e){this.toHash=new Uint8Array(0),void 0!==e&&(this.key=new Promise((function(t,n){(0,i.locateWindow)().crypto.subtle.importKey("raw",(0,r.convertToBuffer)(e),o.SHA_256_HMAC_ALGO,!1,["sign"]).then(t,n)})),this.key.catch((function(){})))}return e.prototype.update=function(e){if(!(0,r.isEmptyData)(e)){var t=(0,r.convertToBuffer)(e),n=new Uint8Array(this.toHash.byteLength+t.byteLength);n.set(this.toHash,0),n.set(t,this.toHash.byteLength),this.toHash=n}},e.prototype.digest=function(){var e=this;return this.key?this.key.then((function(t){return(0,i.locateWindow)().crypto.subtle.sign(o.SHA_256_HMAC_ALGO,t,e.toHash).then((function(e){return new Uint8Array(e)}))})):(0,r.isEmptyData)(this.toHash)?Promise.resolve(o.EMPTY_DATA_SHA_256):Promise.resolve().then((function(){return(0,i.locateWindow)().crypto.subtle.digest(o.SHA_256_HASH,e.toHash)})).then((function(e){return Promise.resolve(new Uint8Array(e))}))},e}();t.Sha256=s},8089:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.RawSha256=void 0;var r=n(7127),o=function(){function e(){this.state=Int32Array.from(r.INIT),this.temp=new Int32Array(64),this.buffer=new Uint8Array(64),this.bufferLength=0,this.bytesHashed=0,this.finished=!1}return e.prototype.update=function(e){if(this.finished)throw new Error("Attempted to update an already finished hash.");var t=0,n=e.byteLength;if(this.bytesHashed+=n,8*this.bytesHashed>r.MAX_HASHABLE_LENGTH)throw new Error("Cannot hash more than 2^53 - 1 bits");for(;n>0;)this.buffer[this.bufferLength++]=e[t++],n--,this.bufferLength===r.BLOCK_SIZE&&(this.hashBuffer(),this.bufferLength=0)},e.prototype.digest=function(){if(!this.finished){var e=8*this.bytesHashed,t=new DataView(this.buffer.buffer,this.buffer.byteOffset,this.buffer.byteLength),n=this.bufferLength;if(t.setUint8(this.bufferLength++,128),n%r.BLOCK_SIZE>=r.BLOCK_SIZE-8){for(var o=this.bufferLength;o<r.BLOCK_SIZE;o++)t.setUint8(o,0);this.hashBuffer(),this.bufferLength=0}for(o=this.bufferLength;o<r.BLOCK_SIZE-8;o++)t.setUint8(o,0);t.setUint32(r.BLOCK_SIZE-8,Math.floor(e/4294967296),!0),t.setUint32(r.BLOCK_SIZE-4,e),this.hashBuffer(),this.finished=!0}var i=new Uint8Array(r.DIGEST_LENGTH);for(o=0;o<8;o++)i[4*o]=this.state[o]>>>24&255,i[4*o+1]=this.state[o]>>>16&255,i[4*o+2]=this.state[o]>>>8&255,i[4*o+3]=this.state[o]>>>0&255;return i},e.prototype.hashBuffer=function(){for(var e=this.buffer,t=this.state,n=t[0],o=t[1],i=t[2],s=t[3],a=t[4],u=t[5],c=t[6],l=t[7],f=0;f<r.BLOCK_SIZE;f++){if(f<16)this.temp[f]=(255&e[4*f])<<24|(255&e[4*f+1])<<16|(255&e[4*f+2])<<8|255&e[4*f+3];else{var h=this.temp[f-2],d=(h>>>17|h<<15)^(h>>>19|h<<13)^h>>>10,p=((h=this.temp[f-15])>>>7|h<<25)^(h>>>18|h<<14)^h>>>3;this.temp[f]=(d+this.temp[f-7]|0)+(p+this.temp[f-16]|0)}var g=(((a>>>6|a<<26)^(a>>>11|a<<21)^(a>>>25|a<<7))+(a&u^~a&c)|0)+(l+(r.KEY[f]+this.temp[f]|0)|0)|0,y=((n>>>2|n<<30)^(n>>>13|n<<19)^(n>>>22|n<<10))+(n&o^n&i^o&i)|0;l=c,c=u,u=a,a=s+g|0,s=i,i=o,o=n,n=g+y|0}t[0]+=n,t[1]+=o,t[2]+=i,t[3]+=s,t[4]+=a,t[5]+=u,t[6]+=c,t[7]+=l},e}();t.RawSha256=o},7127:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.MAX_HASHABLE_LENGTH=t.INIT=t.KEY=t.DIGEST_LENGTH=t.BLOCK_SIZE=void 0,t.BLOCK_SIZE=64,t.DIGEST_LENGTH=32,t.KEY=new Uint32Array([1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298]),t.INIT=[1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225],t.MAX_HASHABLE_LENGTH=Math.pow(2,53)-1},4327:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),(0,n(2505).__exportStar)(n(8609),t)},8609:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Sha256=void 0;var r=n(2505),o=n(7127),i=n(8089),s=n(4959),a=function(){function e(e){if(this.hash=new i.RawSha256,e){this.outer=new i.RawSha256;var t=function(e){var t=(0,s.convertToBuffer)(e);if(t.byteLength>o.BLOCK_SIZE){var n=new i.RawSha256;n.update(t),t=n.digest()}var r=new Uint8Array(o.BLOCK_SIZE);return r.set(t),r}(e),n=new Uint8Array(o.BLOCK_SIZE);n.set(t);for(var r=0;r<o.BLOCK_SIZE;r++)t[r]^=54,n[r]^=92;for(this.hash.update(t),this.outer.update(n),r=0;r<t.byteLength;r++)t[r]=0}}return e.prototype.update=function(e){if(!(0,s.isEmptyData)(e)&&!this.error)try{this.hash.update((0,s.convertToBuffer)(e))}catch(e){this.error=e}},e.prototype.digestSync=function(){if(this.error)throw this.error;return this.outer?(this.outer.finished||this.outer.update(this.hash.digest()),this.outer.digest()):this.hash.digest()},e.prototype.digest=function(){return(0,r.__awaiter)(this,void 0,void 0,(function(){return(0,r.__generator)(this,(function(e){return[2,this.digestSync()]}))}))},e}();t.Sha256=a},2505:(e,t,n)=>{"use strict";n.r(t),n.d(t,{__assign:()=>i,__asyncDelegator:()=>w,__asyncGenerator:()=>b,__asyncValues:()=>S,__await:()=>m,__awaiter:()=>l,__classPrivateFieldGet:()=>P,__classPrivateFieldSet:()=>x,__createBinding:()=>h,__decorate:()=>a,__exportStar:()=>d,__extends:()=>o,__generator:()=>f,__importDefault:()=>E,__importStar:()=>A,__makeTemplateObject:()=>_,__metadata:()=>c,__param:()=>u,__read:()=>g,__rest:()=>s,__spread:()=>y,__spreadArrays:()=>v,__values:()=>p});var r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},r(e,t)};function o(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}var i=function(){return i=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},i.apply(this,arguments)};function s(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n}function a(e,t,n,r){var o,i=arguments.length,s=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(o=e[a])&&(s=(i<3?o(s):i>3?o(t,n,s):o(t,n))||s);return i>3&&s&&Object.defineProperty(t,n,s),s}function u(e,t){return function(n,r){t(n,r,e)}}function c(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)}function l(e,t,n,r){return new(n||(n=Promise))((function(o,i){function s(e){try{u(r.next(e))}catch(e){i(e)}}function a(e){try{u(r.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}u((r=r.apply(e,t||[])).next())}))}function f(e,t){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}}function h(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}function d(e,t){for(var n in e)"default"===n||t.hasOwnProperty(n)||(t[n]=e[n])}function p(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}function g(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)s.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return s}function y(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(g(arguments[t]));return e}function v(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var i=arguments[t],s=0,a=i.length;s<a;s++,o++)r[o]=i[s];return r}function m(e){return this instanceof m?(this.v=e,this):new m(e)}function b(e,t,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,o=n.apply(e,t||[]),i=[];return r={},s("next"),s("throw"),s("return"),r[Symbol.asyncIterator]=function(){return this},r;function s(e){o[e]&&(r[e]=function(t){return new Promise((function(n,r){i.push([e,t,n,r])>1||a(e,t)}))})}function a(e,t){try{(n=o[e](t)).value instanceof m?Promise.resolve(n.value.v).then(u,c):l(i[0][2],n)}catch(e){l(i[0][3],e)}var n}function u(e){a("next",e)}function c(e){a("throw",e)}function l(e,t){e(t),i.shift(),i.length&&a(i[0][0],i[0][1])}}function w(e){var t,n;return t={},r("next"),r("throw",(function(e){throw e})),r("return"),t[Symbol.iterator]=function(){return this},t;function r(r,o){t[r]=e[r]?function(t){return(n=!n)?{value:m(e[r](t)),done:"return"===r}:o?o(t):t}:o}}function S(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,n=e[Symbol.asyncIterator];return n?n.call(e):(e=p(e),t={},r("next"),r("throw"),r("return"),t[Symbol.asyncIterator]=function(){return this},t);function r(n){t[n]=e[n]&&function(t){return new Promise((function(r,o){!function(e,t,n,r){Promise.resolve(r).then((function(t){e({value:t,done:n})}),t)}(r,o,(t=e[n](t)).done,t.value)}))}}}function _(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e}function A(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}function E(e){return e&&e.__esModule?e:{default:e}}function P(e,t){if(!t.has(e))throw new TypeError("attempted to get private field on non-instance");return t.get(e)}function x(e,t,n){if(!t.has(e))throw new TypeError("attempted to set private field on non-instance");return t.set(e,n),n}},2942:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),n(8428).__exportStar(n(2445),t)},2445:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.supportsZeroByteGCM=t.supportsSubtleCrypto=t.supportsSecureRandom=t.supportsWebCrypto=void 0;var r=n(8428),o=["decrypt","digest","encrypt","exportKey","generateKey","importKey","sign","verify"];function i(e){return"object"==typeof e&&"object"==typeof e.crypto&&"function"==typeof e.crypto.getRandomValues}function s(e){return e&&o.every((function(t){return"function"==typeof e[t]}))}t.supportsWebCrypto=function(e){return!(!i(e)||"object"!=typeof e.crypto.subtle)&&s(e.crypto.subtle)},t.supportsSecureRandom=i,t.supportsSubtleCrypto=s,t.supportsZeroByteGCM=function(e){return r.__awaiter(this,void 0,void 0,(function(){var t;return r.__generator(this,(function(n){switch(n.label){case 0:if(!s(e))return[2,!1];n.label=1;case 1:return n.trys.push([1,4,,5]),[4,e.generateKey({name:"AES-GCM",length:128},!1,["encrypt"])];case 2:return t=n.sent(),[4,e.encrypt({name:"AES-GCM",iv:new Uint8Array(Array(12)),additionalData:new Uint8Array(Array(16)),tagLength:128},t,new Uint8Array(0))];case 3:return[2,16===n.sent().byteLength];case 4:return n.sent(),[2,!1];case 5:return[2]}}))}))}},8428:(e,t,n)=>{"use strict";n.r(t),n.d(t,{__assign:()=>i,__asyncDelegator:()=>w,__asyncGenerator:()=>b,__asyncValues:()=>S,__await:()=>m,__awaiter:()=>l,__classPrivateFieldGet:()=>P,__classPrivateFieldSet:()=>x,__createBinding:()=>h,__decorate:()=>a,__exportStar:()=>d,__extends:()=>o,__generator:()=>f,__importDefault:()=>E,__importStar:()=>A,__makeTemplateObject:()=>_,__metadata:()=>c,__param:()=>u,__read:()=>g,__rest:()=>s,__spread:()=>y,__spreadArrays:()=>v,__values:()=>p});var r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},r(e,t)};function o(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}var i=function(){return i=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},i.apply(this,arguments)};function s(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n}function a(e,t,n,r){var o,i=arguments.length,s=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(e,t,n,r);else for(var a=e.length-1;a>=0;a--)(o=e[a])&&(s=(i<3?o(s):i>3?o(t,n,s):o(t,n))||s);return i>3&&s&&Object.defineProperty(t,n,s),s}function u(e,t){return function(n,r){t(n,r,e)}}function c(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)}function l(e,t,n,r){return new(n||(n=Promise))((function(o,i){function s(e){try{u(r.next(e))}catch(e){i(e)}}function a(e){try{u(r.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}u((r=r.apply(e,t||[])).next())}))}function f(e,t){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}}function h(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}function d(e,t){for(var n in e)"default"===n||t.hasOwnProperty(n)||(t[n]=e[n])}function p(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}function g(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)s.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return s}function y(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(g(arguments[t]));return e}function v(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var i=arguments[t],s=0,a=i.length;s<a;s++,o++)r[o]=i[s];return r}function m(e){return this instanceof m?(this.v=e,this):new m(e)}function b(e,t,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,o=n.apply(e,t||[]),i=[];return r={},s("next"),s("throw"),s("return"),r[Symbol.asyncIterator]=function(){return this},r;function s(e){o[e]&&(r[e]=function(t){return new Promise((function(n,r){i.push([e,t,n,r])>1||a(e,t)}))})}function a(e,t){try{(n=o[e](t)).value instanceof m?Promise.resolve(n.value.v).then(u,c):l(i[0][2],n)}catch(e){l(i[0][3],e)}var n}function u(e){a("next",e)}function c(e){a("throw",e)}function l(e,t){e(t),i.shift(),i.length&&a(i[0][0],i[0][1])}}function w(e){var t,n;return t={},r("next"),r("throw",(function(e){throw e})),r("return"),t[Symbol.iterator]=function(){return this},t;function r(r,o){t[r]=e[r]?function(t){return(n=!n)?{value:m(e[r](t)),done:"return"===r}:o?o(t):t}:o}}function S(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,n=e[Symbol.asyncIterator];return n?n.call(e):(e=p(e),t={},r("next"),r("throw"),r("return"),t[Symbol.asyncIterator]=function(){return this},t);function r(n){t[n]=e[n]&&function(t){return new Promise((function(r,o){!function(e,t,n,r){Promise.resolve(r).then((function(t){e({value:t,done:n})}),t)}(r,o,(t=e[n](t)).done,t.value)}))}}}function _(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e}function A(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}function E(e){return e&&e.__esModule?e:{default:e}}function P(e,t){if(!t.has(e))throw new TypeError("attempted to get private field on non-instance");return t.get(e)}function x(e,t,n){if(!t.has(e))throw new TypeError("attempted to set private field on non-instance");return t.set(e,n),n}},3376:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.convertToBuffer=void 0;var r=n(9896),o="undefined"!=typeof Buffer&&Buffer.from?function(e){return Buffer.from(e,"utf8")}:r.fromUtf8;t.convertToBuffer=function(e){return e instanceof Uint8Array?e:"string"==typeof e?o(e):ArrayBuffer.isView(e)?new Uint8Array(e.buffer,e.byteOffset,e.byteLength/Uint8Array.BYTES_PER_ELEMENT):new Uint8Array(e)}},4959:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.uint32ArrayFrom=t.numToUint8=t.isEmptyData=t.convertToBuffer=void 0;var r=n(3376);Object.defineProperty(t,"convertToBuffer",{enumerable:!0,get:function(){return r.convertToBuffer}});var o=n(1205);Object.defineProperty(t,"isEmptyData",{enumerable:!0,get:function(){return o.isEmptyData}});var i=n(1443);Object.defineProperty(t,"numToUint8",{enumerable:!0,get:function(){return i.numToUint8}});var s=n(1650);Object.defineProperty(t,"uint32ArrayFrom",{enumerable:!0,get:function(){return s.uint32ArrayFrom}})},1205:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isEmptyData=void 0,t.isEmptyData=function(e){return"string"==typeof e?0===e.length:0===e.byteLength}},1443:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.numToUint8=void 0,t.numToUint8=function(e){return new Uint8Array([(4278190080&e)>>24,(16711680&e)>>16,(65280&e)>>8,255&e])}},1650:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.uint32ArrayFrom=void 0,t.uint32ArrayFrom=function(e){if(!Array.from){for(var t=new Uint32Array(e.length);0<e.length;)t[0]=e[0];return t}return Uint32Array.from(e)}},9896:(e,t,n)=>{"use strict";n.r(t),n.d(t,{fromUtf8:()=>r,toUtf8:()=>o});const r=e=>"function"==typeof TextEncoder?function(e){return(new TextEncoder).encode(e)}(e):(e=>{const t=[];for(let n=0,r=e.length;n<r;n++){const r=e.charCodeAt(n);if(r<128)t.push(r);else if(r<2048)t.push(r>>6|192,63&r|128);else if(n+1<e.length&&55296==(64512&r)&&56320==(64512&e.charCodeAt(n+1))){const o=65536+((1023&r)<<10)+(1023&e.charCodeAt(++n));t.push(o>>18|240,o>>12&63|128,o>>6&63|128,63&o|128)}else t.push(r>>12|224,r>>6&63|128,63&r|128)}return Uint8Array.from(t)})(e),o=e=>"function"==typeof TextDecoder?function(e){return new TextDecoder("utf-8").decode(e)}(e):(e=>{let t="";for(let n=0,r=e.length;n<r;n++){const r=e[n];if(r<128)t+=String.fromCharCode(r);else if(192<=r&&r<224){const o=e[++n];t+=String.fromCharCode((31&r)<<6|63&o)}else if(240<=r&&r<365){const o="%"+[r,e[++n],e[++n],e[++n]].map((e=>e.toString(16))).join("%");t+=decodeURIComponent(o)}else t+=String.fromCharCode((15&r)<<12|(63&e[++n])<<6|63&e[++n])}return t})(e)},273:(e,t,n)=>{var r=n(5314),o=n(4706),i=o;i.v1=r,i.v4=o,e.exports=i},554:e=>{for(var t=[],n=0;n<256;++n)t[n]=(n+256).toString(16).substr(1);e.exports=function(e,n){var r=n||0,o=t;return[o[e[r++]],o[e[r++]],o[e[r++]],o[e[r++]],"-",o[e[r++]],o[e[r++]],"-",o[e[r++]],o[e[r++]],"-",o[e[r++]],o[e[r++]],"-",o[e[r++]],o[e[r++]],o[e[r++]],o[e[r++]],o[e[r++]],o[e[r++]]].join("")}},436:e=>{var t="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof window.msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto);if(t){var n=new Uint8Array(16);e.exports=function(){return t(n),n}}else{var r=new Array(16);e.exports=function(){for(var e,t=0;t<16;t++)0==(3&t)&&(e=4294967296*Math.random()),r[t]=e>>>((3&t)<<3)&255;return r}}},5314:(e,t,n)=>{var r,o,i=n(436),s=n(554),a=0,u=0;e.exports=function(e,t,n){var c=t&&n||0,l=t||[],f=(e=e||{}).node||r,h=void 0!==e.clockseq?e.clockseq:o;if(null==f||null==h){var d=i();null==f&&(f=r=[1|d[0],d[1],d[2],d[3],d[4],d[5]]),null==h&&(h=o=16383&(d[6]<<8|d[7]))}var p=void 0!==e.msecs?e.msecs:(new Date).getTime(),g=void 0!==e.nsecs?e.nsecs:u+1,y=p-a+(g-u)/1e4;if(y<0&&void 0===e.clockseq&&(h=h+1&16383),(y<0||p>a)&&void 0===e.nsecs&&(g=0),g>=1e4)throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");a=p,u=g,o=h;var v=(1e4*(268435455&(p+=122192928e5))+g)%4294967296;l[c++]=v>>>24&255,l[c++]=v>>>16&255,l[c++]=v>>>8&255,l[c++]=255&v;var m=p/4294967296*1e4&268435455;l[c++]=m>>>8&255,l[c++]=255&m,l[c++]=m>>>24&15|16,l[c++]=m>>>16&255,l[c++]=h>>>8|128,l[c++]=255&h;for(var b=0;b<6;++b)l[c+b]=f[b];return t||s(l)}},4706:(e,t,n)=>{var r=n(436),o=n(554);e.exports=function(e,t,n){var i=t&&n||0;"string"==typeof e&&(t="binary"===e?new Array(16):null,e=null);var s=(e=e||{}).random||(e.rng||r)();if(s[6]=15&s[6]|64,s[8]=63&s[8]|128,t)for(var a=0;a<16;++a)t[i+a]=s[a];return t||o(s)}},8281:(e,t,n)=>{"use strict";n.r(t),n.d(t,{locateWindow:()=>o});const r={};function o(){return"undefined"!=typeof window?window:"undefined"!=typeof self?self:r}},8323:(e,t,n)=>{"use strict";n.r(t),n.d(t,{fromUtf8:()=>r,toUtf8:()=>o});var r=function(e){return"function"==typeof TextEncoder?function(e){return(new TextEncoder).encode(e)}(e):function(e){for(var t=[],n=0,r=e.length;n<r;n++){var o=e.charCodeAt(n);if(o<128)t.push(o);else if(o<2048)t.push(o>>6|192,63&o|128);else if(n+1<e.length&&55296==(64512&o)&&56320==(64512&e.charCodeAt(n+1))){var i=65536+((1023&o)<<10)+(1023&e.charCodeAt(++n));t.push(i>>18|240,i>>12&63|128,i>>6&63|128,63&i|128)}else t.push(o>>12|224,o>>6&63|128,63&o|128)}return Uint8Array.from(t)}(e)},o=function(e){return"function"==typeof TextDecoder?function(e){return new TextDecoder("utf-8").decode(e)}(e):function(e){for(var t="",n=0,r=e.length;n<r;n++){var o=e[n];if(o<128)t+=String.fromCharCode(o);else if(192<=o&&o<224){var i=e[++n];t+=String.fromCharCode((31&o)<<6|63&i)}else if(240<=o&&o<365){var s="%"+[o,e[++n],e[++n],e[++n]].map((function(e){return e.toString(16)})).join("%");t+=decodeURIComponent(s)}else t+=String.fromCharCode((15&o)<<12|(63&e[++n])<<6|63&e[++n])}return t}(e)}},5766:(e,t)=>{"use strict";t.byteLength=function(e){var t=a(e),n=t[0],r=t[1];return 3*(n+r)/4-r},t.toByteArray=function(e){var t,n,i=a(e),s=i[0],u=i[1],c=new o(function(e,t,n){return 3*(t+n)/4-n}(0,s,u)),l=0,f=u>0?s-4:s;for(n=0;n<f;n+=4)t=r[e.charCodeAt(n)]<<18|r[e.charCodeAt(n+1)]<<12|r[e.charCodeAt(n+2)]<<6|r[e.charCodeAt(n+3)],c[l++]=t>>16&255,c[l++]=t>>8&255,c[l++]=255&t;return 2===u&&(t=r[e.charCodeAt(n)]<<2|r[e.charCodeAt(n+1)]>>4,c[l++]=255&t),1===u&&(t=r[e.charCodeAt(n)]<<10|r[e.charCodeAt(n+1)]<<4|r[e.charCodeAt(n+2)]>>2,c[l++]=t>>8&255,c[l++]=255&t),c},t.fromByteArray=function(e){for(var t,r=e.length,o=r%3,i=[],s=16383,a=0,c=r-o;a<c;a+=s)i.push(u(e,a,a+s>c?c:a+s));return 1===o?(t=e[r-1],i.push(n[t>>2]+n[t<<4&63]+"==")):2===o&&(t=(e[r-2]<<8)+e[r-1],i.push(n[t>>10]+n[t>>4&63]+n[t<<2&63]+"=")),i.join("")};for(var n=[],r=[],o="undefined"!=typeof Uint8Array?Uint8Array:Array,i="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",s=0;s<64;++s)n[s]=i[s],r[i.charCodeAt(s)]=s;function a(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var n=e.indexOf("=");return-1===n&&(n=t),[n,n===t?0:4-n%4]}function u(e,t,r){for(var o,i,s=[],a=t;a<r;a+=3)o=(e[a]<<16&16711680)+(e[a+1]<<8&65280)+(255&e[a+2]),s.push(n[(i=o)>>18&63]+n[i>>12&63]+n[i>>6&63]+n[63&i]);return s.join("")}r["-".charCodeAt(0)]=62,r["_".charCodeAt(0)]=63},7160:function(e){e.exports=function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=90)}({17:function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r=n(18),o=function(){function e(){}return e.getFirstMatch=function(e,t){var n=t.match(e);return n&&n.length>0&&n[1]||""},e.getSecondMatch=function(e,t){var n=t.match(e);return n&&n.length>1&&n[2]||""},e.matchAndReturnConst=function(e,t,n){if(e.test(t))return n},e.getWindowsVersionName=function(e){switch(e){case"NT":return"NT";case"XP":case"NT 5.1":return"XP";case"NT 5.0":return"2000";case"NT 5.2":return"2003";case"NT 6.0":return"Vista";case"NT 6.1":return"7";case"NT 6.2":return"8";case"NT 6.3":return"8.1";case"NT 10.0":return"10";default:return}},e.getMacOSVersionName=function(e){var t=e.split(".").splice(0,2).map((function(e){return parseInt(e,10)||0}));if(t.push(0),10===t[0])switch(t[1]){case 5:return"Leopard";case 6:return"Snow Leopard";case 7:return"Lion";case 8:return"Mountain Lion";case 9:return"Mavericks";case 10:return"Yosemite";case 11:return"El Capitan";case 12:return"Sierra";case 13:return"High Sierra";case 14:return"Mojave";case 15:return"Catalina";default:return}},e.getAndroidVersionName=function(e){var t=e.split(".").splice(0,2).map((function(e){return parseInt(e,10)||0}));if(t.push(0),!(1===t[0]&&t[1]<5))return 1===t[0]&&t[1]<6?"Cupcake":1===t[0]&&t[1]>=6?"Donut":2===t[0]&&t[1]<2?"Eclair":2===t[0]&&2===t[1]?"Froyo":2===t[0]&&t[1]>2?"Gingerbread":3===t[0]?"Honeycomb":4===t[0]&&t[1]<1?"Ice Cream Sandwich":4===t[0]&&t[1]<4?"Jelly Bean":4===t[0]&&t[1]>=4?"KitKat":5===t[0]?"Lollipop":6===t[0]?"Marshmallow":7===t[0]?"Nougat":8===t[0]?"Oreo":9===t[0]?"Pie":void 0},e.getVersionPrecision=function(e){return e.split(".").length},e.compareVersions=function(t,n,r){void 0===r&&(r=!1);var o=e.getVersionPrecision(t),i=e.getVersionPrecision(n),s=Math.max(o,i),a=0,u=e.map([t,n],(function(t){var n=s-e.getVersionPrecision(t),r=t+new Array(n+1).join(".0");return e.map(r.split("."),(function(e){return new Array(20-e.length).join("0")+e})).reverse()}));for(r&&(a=s-Math.min(o,i)),s-=1;s>=a;){if(u[0][s]>u[1][s])return 1;if(u[0][s]===u[1][s]){if(s===a)return 0;s-=1}else if(u[0][s]<u[1][s])return-1}},e.map=function(e,t){var n,r=[];if(Array.prototype.map)return Array.prototype.map.call(e,t);for(n=0;n<e.length;n+=1)r.push(t(e[n]));return r},e.find=function(e,t){var n,r;if(Array.prototype.find)return Array.prototype.find.call(e,t);for(n=0,r=e.length;n<r;n+=1){var o=e[n];if(t(o,n))return o}},e.assign=function(e){for(var t,n,r=e,o=arguments.length,i=new Array(o>1?o-1:0),s=1;s<o;s++)i[s-1]=arguments[s];if(Object.assign)return Object.assign.apply(Object,[e].concat(i));var a=function(){var e=i[t];"object"==typeof e&&null!==e&&Object.keys(e).forEach((function(t){r[t]=e[t]}))};for(t=0,n=i.length;t<n;t+=1)a();return e},e.getBrowserAlias=function(e){return r.BROWSER_ALIASES_MAP[e]},e.getBrowserTypeByAlias=function(e){return r.BROWSER_MAP[e]||""},e}();t.default=o,e.exports=t.default},18:function(e,t,n){"use strict";t.__esModule=!0,t.ENGINE_MAP=t.OS_MAP=t.PLATFORMS_MAP=t.BROWSER_MAP=t.BROWSER_ALIASES_MAP=void 0,t.BROWSER_ALIASES_MAP={"Amazon Silk":"amazon_silk","Android Browser":"android",Bada:"bada",BlackBerry:"blackberry",Chrome:"chrome",Chromium:"chromium",Electron:"electron",Epiphany:"epiphany",Firefox:"firefox",Focus:"focus",Generic:"generic","Google Search":"google_search",Googlebot:"googlebot","Internet Explorer":"ie","K-Meleon":"k_meleon",Maxthon:"maxthon","Microsoft Edge":"edge","MZ Browser":"mz","NAVER Whale Browser":"naver",Opera:"opera","Opera Coast":"opera_coast",PhantomJS:"phantomjs",Puffin:"puffin",QupZilla:"qupzilla",QQ:"qq",QQLite:"qqlite",Safari:"safari",Sailfish:"sailfish","Samsung Internet for Android":"samsung_internet",SeaMonkey:"seamonkey",Sleipnir:"sleipnir",Swing:"swing",Tizen:"tizen","UC Browser":"uc",Vivaldi:"vivaldi","WebOS Browser":"webos",WeChat:"wechat","Yandex Browser":"yandex",Roku:"roku"},t.BROWSER_MAP={amazon_silk:"Amazon Silk",android:"Android Browser",bada:"Bada",blackberry:"BlackBerry",chrome:"Chrome",chromium:"Chromium",electron:"Electron",epiphany:"Epiphany",firefox:"Firefox",focus:"Focus",generic:"Generic",googlebot:"Googlebot",google_search:"Google Search",ie:"Internet Explorer",k_meleon:"K-Meleon",maxthon:"Maxthon",edge:"Microsoft Edge",mz:"MZ Browser",naver:"NAVER Whale Browser",opera:"Opera",opera_coast:"Opera Coast",phantomjs:"PhantomJS",puffin:"Puffin",qupzilla:"QupZilla",qq:"QQ Browser",qqlite:"QQ Browser Lite",safari:"Safari",sailfish:"Sailfish",samsung_internet:"Samsung Internet for Android",seamonkey:"SeaMonkey",sleipnir:"Sleipnir",swing:"Swing",tizen:"Tizen",uc:"UC Browser",vivaldi:"Vivaldi",webos:"WebOS Browser",wechat:"WeChat",yandex:"Yandex Browser"},t.PLATFORMS_MAP={tablet:"tablet",mobile:"mobile",desktop:"desktop",tv:"tv"},t.OS_MAP={WindowsPhone:"Windows Phone",Windows:"Windows",MacOS:"macOS",iOS:"iOS",Android:"Android",WebOS:"WebOS",BlackBerry:"BlackBerry",Bada:"Bada",Tizen:"Tizen",Linux:"Linux",ChromeOS:"Chrome OS",PlayStation4:"PlayStation 4",Roku:"Roku"},t.ENGINE_MAP={EdgeHTML:"EdgeHTML",Blink:"Blink",Trident:"Trident",Presto:"Presto",Gecko:"Gecko",WebKit:"WebKit"}},90:function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r,o=(r=n(91))&&r.__esModule?r:{default:r},i=n(18);function s(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var a=function(){function e(){}var t,n;return e.getParser=function(e,t){if(void 0===t&&(t=!1),"string"!=typeof e)throw new Error("UserAgent should be a string");return new o.default(e,t)},e.parse=function(e){return new o.default(e).getResult()},t=e,n=[{key:"BROWSER_MAP",get:function(){return i.BROWSER_MAP}},{key:"ENGINE_MAP",get:function(){return i.ENGINE_MAP}},{key:"OS_MAP",get:function(){return i.OS_MAP}},{key:"PLATFORMS_MAP",get:function(){return i.PLATFORMS_MAP}}],null&&s(t.prototype,null),n&&s(t,n),e}();t.default=a,e.exports=t.default},91:function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r=u(n(92)),o=u(n(93)),i=u(n(94)),s=u(n(95)),a=u(n(17));function u(e){return e&&e.__esModule?e:{default:e}}var c=function(){function e(e,t){if(void 0===t&&(t=!1),null==e||""===e)throw new Error("UserAgent parameter can't be empty");this._ua=e,this.parsedResult={},!0!==t&&this.parse()}var t=e.prototype;return t.getUA=function(){return this._ua},t.test=function(e){return e.test(this._ua)},t.parseBrowser=function(){var e=this;this.parsedResult.browser={};var t=a.default.find(r.default,(function(t){if("function"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error("Browser's test function is not valid")}));return t&&(this.parsedResult.browser=t.describe(this.getUA())),this.parsedResult.browser},t.getBrowser=function(){return this.parsedResult.browser?this.parsedResult.browser:this.parseBrowser()},t.getBrowserName=function(e){return e?String(this.getBrowser().name).toLowerCase()||"":this.getBrowser().name||""},t.getBrowserVersion=function(){return this.getBrowser().version},t.getOS=function(){return this.parsedResult.os?this.parsedResult.os:this.parseOS()},t.parseOS=function(){var e=this;this.parsedResult.os={};var t=a.default.find(o.default,(function(t){if("function"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error("Browser's test function is not valid")}));return t&&(this.parsedResult.os=t.describe(this.getUA())),this.parsedResult.os},t.getOSName=function(e){var t=this.getOS().name;return e?String(t).toLowerCase()||"":t||""},t.getOSVersion=function(){return this.getOS().version},t.getPlatform=function(){return this.parsedResult.platform?this.parsedResult.platform:this.parsePlatform()},t.getPlatformType=function(e){void 0===e&&(e=!1);var t=this.getPlatform().type;return e?String(t).toLowerCase()||"":t||""},t.parsePlatform=function(){var e=this;this.parsedResult.platform={};var t=a.default.find(i.default,(function(t){if("function"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error("Browser's test function is not valid")}));return t&&(this.parsedResult.platform=t.describe(this.getUA())),this.parsedResult.platform},t.getEngine=function(){return this.parsedResult.engine?this.parsedResult.engine:this.parseEngine()},t.getEngineName=function(e){return e?String(this.getEngine().name).toLowerCase()||"":this.getEngine().name||""},t.parseEngine=function(){var e=this;this.parsedResult.engine={};var t=a.default.find(s.default,(function(t){if("function"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error("Browser's test function is not valid")}));return t&&(this.parsedResult.engine=t.describe(this.getUA())),this.parsedResult.engine},t.parse=function(){return this.parseBrowser(),this.parseOS(),this.parsePlatform(),this.parseEngine(),this},t.getResult=function(){return a.default.assign({},this.parsedResult)},t.satisfies=function(e){var t=this,n={},r=0,o={},i=0;if(Object.keys(e).forEach((function(t){var s=e[t];"string"==typeof s?(o[t]=s,i+=1):"object"==typeof s&&(n[t]=s,r+=1)})),r>0){var s=Object.keys(n),u=a.default.find(s,(function(e){return t.isOS(e)}));if(u){var c=this.satisfies(n[u]);if(void 0!==c)return c}var l=a.default.find(s,(function(e){return t.isPlatform(e)}));if(l){var f=this.satisfies(n[l]);if(void 0!==f)return f}}if(i>0){var h=Object.keys(o),d=a.default.find(h,(function(e){return t.isBrowser(e,!0)}));if(void 0!==d)return this.compareVersion(o[d])}},t.isBrowser=function(e,t){void 0===t&&(t=!1);var n=this.getBrowserName().toLowerCase(),r=e.toLowerCase(),o=a.default.getBrowserTypeByAlias(r);return t&&o&&(r=o.toLowerCase()),r===n},t.compareVersion=function(e){var t=[0],n=e,r=!1,o=this.getBrowserVersion();if("string"==typeof o)return">"===e[0]||"<"===e[0]?(n=e.substr(1),"="===e[1]?(r=!0,n=e.substr(2)):t=[],">"===e[0]?t.push(1):t.push(-1)):"="===e[0]?n=e.substr(1):"~"===e[0]&&(r=!0,n=e.substr(1)),t.indexOf(a.default.compareVersions(o,n,r))>-1},t.isOS=function(e){return this.getOSName(!0)===String(e).toLowerCase()},t.isPlatform=function(e){return this.getPlatformType(!0)===String(e).toLowerCase()},t.isEngine=function(e){return this.getEngineName(!0)===String(e).toLowerCase()},t.is=function(e,t){return void 0===t&&(t=!1),this.isBrowser(e,t)||this.isOS(e)||this.isPlatform(e)},t.some=function(e){var t=this;return void 0===e&&(e=[]),e.some((function(e){return t.is(e)}))},e}();t.default=c,e.exports=t.default},92:function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r,o=(r=n(17))&&r.__esModule?r:{default:r},i=/version\/(\d+(\.?_?\d+)+)/i,s=[{test:[/googlebot/i],describe:function(e){var t={name:"Googlebot"},n=o.default.getFirstMatch(/googlebot\/(\d+(\.\d+))/i,e)||o.default.getFirstMatch(i,e);return n&&(t.version=n),t}},{test:[/opera/i],describe:function(e){var t={name:"Opera"},n=o.default.getFirstMatch(i,e)||o.default.getFirstMatch(/(?:opera)[\s/](\d+(\.?_?\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/opr\/|opios/i],describe:function(e){var t={name:"Opera"},n=o.default.getFirstMatch(/(?:opr|opios)[\s/](\S+)/i,e)||o.default.getFirstMatch(i,e);return n&&(t.version=n),t}},{test:[/SamsungBrowser/i],describe:function(e){var t={name:"Samsung Internet for Android"},n=o.default.getFirstMatch(i,e)||o.default.getFirstMatch(/(?:SamsungBrowser)[\s/](\d+(\.?_?\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/Whale/i],describe:function(e){var t={name:"NAVER Whale Browser"},n=o.default.getFirstMatch(i,e)||o.default.getFirstMatch(/(?:whale)[\s/](\d+(?:\.\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/MZBrowser/i],describe:function(e){var t={name:"MZ Browser"},n=o.default.getFirstMatch(/(?:MZBrowser)[\s/](\d+(?:\.\d+)+)/i,e)||o.default.getFirstMatch(i,e);return n&&(t.version=n),t}},{test:[/focus/i],describe:function(e){var t={name:"Focus"},n=o.default.getFirstMatch(/(?:focus)[\s/](\d+(?:\.\d+)+)/i,e)||o.default.getFirstMatch(i,e);return n&&(t.version=n),t}},{test:[/swing/i],describe:function(e){var t={name:"Swing"},n=o.default.getFirstMatch(/(?:swing)[\s/](\d+(?:\.\d+)+)/i,e)||o.default.getFirstMatch(i,e);return n&&(t.version=n),t}},{test:[/coast/i],describe:function(e){var t={name:"Opera Coast"},n=o.default.getFirstMatch(i,e)||o.default.getFirstMatch(/(?:coast)[\s/](\d+(\.?_?\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/opt\/\d+(?:.?_?\d+)+/i],describe:function(e){var t={name:"Opera Touch"},n=o.default.getFirstMatch(/(?:opt)[\s/](\d+(\.?_?\d+)+)/i,e)||o.default.getFirstMatch(i,e);return n&&(t.version=n),t}},{test:[/yabrowser/i],describe:function(e){var t={name:"Yandex Browser"},n=o.default.getFirstMatch(/(?:yabrowser)[\s/](\d+(\.?_?\d+)+)/i,e)||o.default.getFirstMatch(i,e);return n&&(t.version=n),t}},{test:[/ucbrowser/i],describe:function(e){var t={name:"UC Browser"},n=o.default.getFirstMatch(i,e)||o.default.getFirstMatch(/(?:ucbrowser)[\s/](\d+(\.?_?\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/Maxthon|mxios/i],describe:function(e){var t={name:"Maxthon"},n=o.default.getFirstMatch(i,e)||o.default.getFirstMatch(/(?:Maxthon|mxios)[\s/](\d+(\.?_?\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/epiphany/i],describe:function(e){var t={name:"Epiphany"},n=o.default.getFirstMatch(i,e)||o.default.getFirstMatch(/(?:epiphany)[\s/](\d+(\.?_?\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/puffin/i],describe:function(e){var t={name:"Puffin"},n=o.default.getFirstMatch(i,e)||o.default.getFirstMatch(/(?:puffin)[\s/](\d+(\.?_?\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/sleipnir/i],describe:function(e){var t={name:"Sleipnir"},n=o.default.getFirstMatch(i,e)||o.default.getFirstMatch(/(?:sleipnir)[\s/](\d+(\.?_?\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/k-meleon/i],describe:function(e){var t={name:"K-Meleon"},n=o.default.getFirstMatch(i,e)||o.default.getFirstMatch(/(?:k-meleon)[\s/](\d+(\.?_?\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/micromessenger/i],describe:function(e){var t={name:"WeChat"},n=o.default.getFirstMatch(/(?:micromessenger)[\s/](\d+(\.?_?\d+)+)/i,e)||o.default.getFirstMatch(i,e);return n&&(t.version=n),t}},{test:[/qqbrowser/i],describe:function(e){var t={name:/qqbrowserlite/i.test(e)?"QQ Browser Lite":"QQ Browser"},n=o.default.getFirstMatch(/(?:qqbrowserlite|qqbrowser)[/](\d+(\.?_?\d+)+)/i,e)||o.default.getFirstMatch(i,e);return n&&(t.version=n),t}},{test:[/msie|trident/i],describe:function(e){var t={name:"Internet Explorer"},n=o.default.getFirstMatch(/(?:msie |rv:)(\d+(\.?_?\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/\sedg\//i],describe:function(e){var t={name:"Microsoft Edge"},n=o.default.getFirstMatch(/\sedg\/(\d+(\.?_?\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/edg([ea]|ios)/i],describe:function(e){var t={name:"Microsoft Edge"},n=o.default.getSecondMatch(/edg([ea]|ios)\/(\d+(\.?_?\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/vivaldi/i],describe:function(e){var t={name:"Vivaldi"},n=o.default.getFirstMatch(/vivaldi\/(\d+(\.?_?\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/seamonkey/i],describe:function(e){var t={name:"SeaMonkey"},n=o.default.getFirstMatch(/seamonkey\/(\d+(\.?_?\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/sailfish/i],describe:function(e){var t={name:"Sailfish"},n=o.default.getFirstMatch(/sailfish\s?browser\/(\d+(\.\d+)?)/i,e);return n&&(t.version=n),t}},{test:[/silk/i],describe:function(e){var t={name:"Amazon Silk"},n=o.default.getFirstMatch(/silk\/(\d+(\.?_?\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/phantom/i],describe:function(e){var t={name:"PhantomJS"},n=o.default.getFirstMatch(/phantomjs\/(\d+(\.?_?\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/slimerjs/i],describe:function(e){var t={name:"SlimerJS"},n=o.default.getFirstMatch(/slimerjs\/(\d+(\.?_?\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/blackberry|\bbb\d+/i,/rim\stablet/i],describe:function(e){var t={name:"BlackBerry"},n=o.default.getFirstMatch(i,e)||o.default.getFirstMatch(/blackberry[\d]+\/(\d+(\.?_?\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/(web|hpw)[o0]s/i],describe:function(e){var t={name:"WebOS Browser"},n=o.default.getFirstMatch(i,e)||o.default.getFirstMatch(/w(?:eb)?[o0]sbrowser\/(\d+(\.?_?\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/bada/i],describe:function(e){var t={name:"Bada"},n=o.default.getFirstMatch(/dolfin\/(\d+(\.?_?\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/tizen/i],describe:function(e){var t={name:"Tizen"},n=o.default.getFirstMatch(/(?:tizen\s?)?browser\/(\d+(\.?_?\d+)+)/i,e)||o.default.getFirstMatch(i,e);return n&&(t.version=n),t}},{test:[/qupzilla/i],describe:function(e){var t={name:"QupZilla"},n=o.default.getFirstMatch(/(?:qupzilla)[\s/](\d+(\.?_?\d+)+)/i,e)||o.default.getFirstMatch(i,e);return n&&(t.version=n),t}},{test:[/firefox|iceweasel|fxios/i],describe:function(e){var t={name:"Firefox"},n=o.default.getFirstMatch(/(?:firefox|iceweasel|fxios)[\s/](\d+(\.?_?\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/electron/i],describe:function(e){var t={name:"Electron"},n=o.default.getFirstMatch(/(?:electron)\/(\d+(\.?_?\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/MiuiBrowser/i],describe:function(e){var t={name:"Miui"},n=o.default.getFirstMatch(/(?:MiuiBrowser)[\s/](\d+(\.?_?\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/chromium/i],describe:function(e){var t={name:"Chromium"},n=o.default.getFirstMatch(/(?:chromium)[\s/](\d+(\.?_?\d+)+)/i,e)||o.default.getFirstMatch(i,e);return n&&(t.version=n),t}},{test:[/chrome|crios|crmo/i],describe:function(e){var t={name:"Chrome"},n=o.default.getFirstMatch(/(?:chrome|crios|crmo)\/(\d+(\.?_?\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/GSA/i],describe:function(e){var t={name:"Google Search"},n=o.default.getFirstMatch(/(?:GSA)\/(\d+(\.?_?\d+)+)/i,e);return n&&(t.version=n),t}},{test:function(e){var t=!e.test(/like android/i),n=e.test(/android/i);return t&&n},describe:function(e){var t={name:"Android Browser"},n=o.default.getFirstMatch(i,e);return n&&(t.version=n),t}},{test:[/playstation 4/i],describe:function(e){var t={name:"PlayStation 4"},n=o.default.getFirstMatch(i,e);return n&&(t.version=n),t}},{test:[/safari|applewebkit/i],describe:function(e){var t={name:"Safari"},n=o.default.getFirstMatch(i,e);return n&&(t.version=n),t}},{test:[/.*/i],describe:function(e){var t=-1!==e.search("\\(")?/^(.*)\/(.*)[ \t]\((.*)/:/^(.*)\/(.*) /;return{name:o.default.getFirstMatch(t,e),version:o.default.getSecondMatch(t,e)}}}];t.default=s,e.exports=t.default},93:function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r,o=(r=n(17))&&r.__esModule?r:{default:r},i=n(18),s=[{test:[/Roku\/DVP/],describe:function(e){var t=o.default.getFirstMatch(/Roku\/DVP-(\d+\.\d+)/i,e);return{name:i.OS_MAP.Roku,version:t}}},{test:[/windows phone/i],describe:function(e){var t=o.default.getFirstMatch(/windows phone (?:os)?\s?(\d+(\.\d+)*)/i,e);return{name:i.OS_MAP.WindowsPhone,version:t}}},{test:[/windows /i],describe:function(e){var t=o.default.getFirstMatch(/Windows ((NT|XP)( \d\d?.\d)?)/i,e),n=o.default.getWindowsVersionName(t);return{name:i.OS_MAP.Windows,version:t,versionName:n}}},{test:[/Macintosh(.*?) FxiOS(.*?)\//],describe:function(e){var t={name:i.OS_MAP.iOS},n=o.default.getSecondMatch(/(Version\/)(\d[\d.]+)/,e);return n&&(t.version=n),t}},{test:[/macintosh/i],describe:function(e){var t=o.default.getFirstMatch(/mac os x (\d+(\.?_?\d+)+)/i,e).replace(/[_\s]/g,"."),n=o.default.getMacOSVersionName(t),r={name:i.OS_MAP.MacOS,version:t};return n&&(r.versionName=n),r}},{test:[/(ipod|iphone|ipad)/i],describe:function(e){var t=o.default.getFirstMatch(/os (\d+([_\s]\d+)*) like mac os x/i,e).replace(/[_\s]/g,".");return{name:i.OS_MAP.iOS,version:t}}},{test:function(e){var t=!e.test(/like android/i),n=e.test(/android/i);return t&&n},describe:function(e){var t=o.default.getFirstMatch(/android[\s/-](\d+(\.\d+)*)/i,e),n=o.default.getAndroidVersionName(t),r={name:i.OS_MAP.Android,version:t};return n&&(r.versionName=n),r}},{test:[/(web|hpw)[o0]s/i],describe:function(e){var t=o.default.getFirstMatch(/(?:web|hpw)[o0]s\/(\d+(\.\d+)*)/i,e),n={name:i.OS_MAP.WebOS};return t&&t.length&&(n.version=t),n}},{test:[/blackberry|\bbb\d+/i,/rim\stablet/i],describe:function(e){var t=o.default.getFirstMatch(/rim\stablet\sos\s(\d+(\.\d+)*)/i,e)||o.default.getFirstMatch(/blackberry\d+\/(\d+([_\s]\d+)*)/i,e)||o.default.getFirstMatch(/\bbb(\d+)/i,e);return{name:i.OS_MAP.BlackBerry,version:t}}},{test:[/bada/i],describe:function(e){var t=o.default.getFirstMatch(/bada\/(\d+(\.\d+)*)/i,e);return{name:i.OS_MAP.Bada,version:t}}},{test:[/tizen/i],describe:function(e){var t=o.default.getFirstMatch(/tizen[/\s](\d+(\.\d+)*)/i,e);return{name:i.OS_MAP.Tizen,version:t}}},{test:[/linux/i],describe:function(){return{name:i.OS_MAP.Linux}}},{test:[/CrOS/],describe:function(){return{name:i.OS_MAP.ChromeOS}}},{test:[/PlayStation 4/],describe:function(e){var t=o.default.getFirstMatch(/PlayStation 4[/\s](\d+(\.\d+)*)/i,e);return{name:i.OS_MAP.PlayStation4,version:t}}}];t.default=s,e.exports=t.default},94:function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r,o=(r=n(17))&&r.__esModule?r:{default:r},i=n(18),s=[{test:[/googlebot/i],describe:function(){return{type:"bot",vendor:"Google"}}},{test:[/huawei/i],describe:function(e){var t=o.default.getFirstMatch(/(can-l01)/i,e)&&"Nova",n={type:i.PLATFORMS_MAP.mobile,vendor:"Huawei"};return t&&(n.model=t),n}},{test:[/nexus\s*(?:7|8|9|10).*/i],describe:function(){return{type:i.PLATFORMS_MAP.tablet,vendor:"Nexus"}}},{test:[/ipad/i],describe:function(){return{type:i.PLATFORMS_MAP.tablet,vendor:"Apple",model:"iPad"}}},{test:[/Macintosh(.*?) FxiOS(.*?)\//],describe:function(){return{type:i.PLATFORMS_MAP.tablet,vendor:"Apple",model:"iPad"}}},{test:[/kftt build/i],describe:function(){return{type:i.PLATFORMS_MAP.tablet,vendor:"Amazon",model:"Kindle Fire HD 7"}}},{test:[/silk/i],describe:function(){return{type:i.PLATFORMS_MAP.tablet,vendor:"Amazon"}}},{test:[/tablet(?! pc)/i],describe:function(){return{type:i.PLATFORMS_MAP.tablet}}},{test:function(e){var t=e.test(/ipod|iphone/i),n=e.test(/like (ipod|iphone)/i);return t&&!n},describe:function(e){var t=o.default.getFirstMatch(/(ipod|iphone)/i,e);return{type:i.PLATFORMS_MAP.mobile,vendor:"Apple",model:t}}},{test:[/nexus\s*[0-6].*/i,/galaxy nexus/i],describe:function(){return{type:i.PLATFORMS_MAP.mobile,vendor:"Nexus"}}},{test:[/[^-]mobi/i],describe:function(){return{type:i.PLATFORMS_MAP.mobile}}},{test:function(e){return"blackberry"===e.getBrowserName(!0)},describe:function(){return{type:i.PLATFORMS_MAP.mobile,vendor:"BlackBerry"}}},{test:function(e){return"bada"===e.getBrowserName(!0)},describe:function(){return{type:i.PLATFORMS_MAP.mobile}}},{test:function(e){return"windows phone"===e.getBrowserName()},describe:function(){return{type:i.PLATFORMS_MAP.mobile,vendor:"Microsoft"}}},{test:function(e){var t=Number(String(e.getOSVersion()).split(".")[0]);return"android"===e.getOSName(!0)&&t>=3},describe:function(){return{type:i.PLATFORMS_MAP.tablet}}},{test:function(e){return"android"===e.getOSName(!0)},describe:function(){return{type:i.PLATFORMS_MAP.mobile}}},{test:function(e){return"macos"===e.getOSName(!0)},describe:function(){return{type:i.PLATFORMS_MAP.desktop,vendor:"Apple"}}},{test:function(e){return"windows"===e.getOSName(!0)},describe:function(){return{type:i.PLATFORMS_MAP.desktop}}},{test:function(e){return"linux"===e.getOSName(!0)},describe:function(){return{type:i.PLATFORMS_MAP.desktop}}},{test:function(e){return"playstation 4"===e.getOSName(!0)},describe:function(){return{type:i.PLATFORMS_MAP.tv}}},{test:function(e){return"roku"===e.getOSName(!0)},describe:function(){return{type:i.PLATFORMS_MAP.tv}}}];t.default=s,e.exports=t.default},95:function(e,t,n){"use strict";t.__esModule=!0,t.default=void 0;var r,o=(r=n(17))&&r.__esModule?r:{default:r},i=n(18),s=[{test:function(e){return"microsoft edge"===e.getBrowserName(!0)},describe:function(e){if(/\sedg\//i.test(e))return{name:i.ENGINE_MAP.Blink};var t=o.default.getFirstMatch(/edge\/(\d+(\.?_?\d+)+)/i,e);return{name:i.ENGINE_MAP.EdgeHTML,version:t}}},{test:[/trident/i],describe:function(e){var t={name:i.ENGINE_MAP.Trident},n=o.default.getFirstMatch(/trident\/(\d+(\.?_?\d+)+)/i,e);return n&&(t.version=n),t}},{test:function(e){return e.test(/presto/i)},describe:function(e){var t={name:i.ENGINE_MAP.Presto},n=o.default.getFirstMatch(/presto\/(\d+(\.?_?\d+)+)/i,e);return n&&(t.version=n),t}},{test:function(e){var t=e.test(/gecko/i),n=e.test(/like gecko/i);return t&&!n},describe:function(e){var t={name:i.ENGINE_MAP.Gecko},n=o.default.getFirstMatch(/gecko\/(\d+(\.?_?\d+)+)/i,e);return n&&(t.version=n),t}},{test:[/(apple)?webkit\/537\.36/i],describe:function(){return{name:i.ENGINE_MAP.Blink}}},{test:[/(apple)?webkit/i],describe:function(e){var t={name:i.ENGINE_MAP.WebKit},n=o.default.getFirstMatch(/webkit\/(\d+(\.?_?\d+)+)/i,e);return n&&(t.version=n),t}}];t.default=s,e.exports=t.default}})},8834:(e,t,n)=>{"use strict";var r=n(5766),o=n(2333),i=n(7906);function s(){return u.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function a(e,t){if(s()<t)throw new RangeError("Invalid typed array length");return u.TYPED_ARRAY_SUPPORT?(e=new Uint8Array(t)).__proto__=u.prototype:(null===e&&(e=new u(t)),e.length=t),e}function u(e,t,n){if(!(u.TYPED_ARRAY_SUPPORT||this instanceof u))return new u(e,t,n);if("number"==typeof e){if("string"==typeof t)throw new Error("If encoding is specified then the first argument must be a string");return f(this,e)}return c(this,e,t,n)}function c(e,t,n,r){if("number"==typeof t)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&t instanceof ArrayBuffer?function(e,t,n,r){if(t.byteLength,n<0||t.byteLength<n)throw new RangeError("'offset' is out of bounds");if(t.byteLength<n+(r||0))throw new RangeError("'length' is out of bounds");return t=void 0===n&&void 0===r?new Uint8Array(t):void 0===r?new Uint8Array(t,n):new Uint8Array(t,n,r),u.TYPED_ARRAY_SUPPORT?(e=t).__proto__=u.prototype:e=h(e,t),e}(e,t,n,r):"string"==typeof t?function(e,t,n){if("string"==typeof n&&""!==n||(n="utf8"),!u.isEncoding(n))throw new TypeError('"encoding" must be a valid string encoding');var r=0|p(t,n),o=(e=a(e,r)).write(t,n);return o!==r&&(e=e.slice(0,o)),e}(e,t,n):function(e,t){if(u.isBuffer(t)){var n=0|d(t.length);return 0===(e=a(e,n)).length||t.copy(e,0,0,n),e}if(t){if("undefined"!=typeof ArrayBuffer&&t.buffer instanceof ArrayBuffer||"length"in t)return"number"!=typeof t.length||function(e){return e!=e}(t.length)?a(e,0):h(e,t);if("Buffer"===t.type&&i(t.data))return h(e,t.data)}throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(e,t)}function l(e){if("number"!=typeof e)throw new TypeError('"size" argument must be a number');if(e<0)throw new RangeError('"size" argument must not be negative')}function f(e,t){if(l(t),e=a(e,t<0?0:0|d(t)),!u.TYPED_ARRAY_SUPPORT)for(var n=0;n<t;++n)e[n]=0;return e}function h(e,t){var n=t.length<0?0:0|d(t.length);e=a(e,n);for(var r=0;r<n;r+=1)e[r]=255&t[r];return e}function d(e){if(e>=s())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+s().toString(16)+" bytes");return 0|e}function p(e,t){if(u.isBuffer(e))return e.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(e)||e instanceof ArrayBuffer))return e.byteLength;"string"!=typeof e&&(e=""+e);var n=e.length;if(0===n)return 0;for(var r=!1;;)switch(t){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":case void 0:return B(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return V(e).length;default:if(r)return B(e).length;t=(""+t).toLowerCase(),r=!0}}function g(e,t,n){var r=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return T(this,t,n);case"utf8":case"utf-8":return x(this,t,n);case"ascii":return I(this,t,n);case"latin1":case"binary":return C(this,t,n);case"base64":return P(this,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return k(this,t,n);default:if(r)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),r=!0}}function y(e,t,n){var r=e[t];e[t]=e[n],e[n]=r}function v(e,t,n,r,o){if(0===e.length)return-1;if("string"==typeof n?(r=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),n=+n,isNaN(n)&&(n=o?0:e.length-1),n<0&&(n=e.length+n),n>=e.length){if(o)return-1;n=e.length-1}else if(n<0){if(!o)return-1;n=0}if("string"==typeof t&&(t=u.from(t,r)),u.isBuffer(t))return 0===t.length?-1:m(e,t,n,r,o);if("number"==typeof t)return t&=255,u.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?o?Uint8Array.prototype.indexOf.call(e,t,n):Uint8Array.prototype.lastIndexOf.call(e,t,n):m(e,[t],n,r,o);throw new TypeError("val must be string, number or Buffer")}function m(e,t,n,r,o){var i,s=1,a=e.length,u=t.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(e.length<2||t.length<2)return-1;s=2,a/=2,u/=2,n/=2}function c(e,t){return 1===s?e[t]:e.readUInt16BE(t*s)}if(o){var l=-1;for(i=n;i<a;i++)if(c(e,i)===c(t,-1===l?0:i-l)){if(-1===l&&(l=i),i-l+1===u)return l*s}else-1!==l&&(i-=i-l),l=-1}else for(n+u>a&&(n=a-u),i=n;i>=0;i--){for(var f=!0,h=0;h<u;h++)if(c(e,i+h)!==c(t,h)){f=!1;break}if(f)return i}return-1}function b(e,t,n,r){n=Number(n)||0;var o=e.length-n;r?(r=Number(r))>o&&(r=o):r=o;var i=t.length;if(i%2!=0)throw new TypeError("Invalid hex string");r>i/2&&(r=i/2);for(var s=0;s<r;++s){var a=parseInt(t.substr(2*s,2),16);if(isNaN(a))return s;e[n+s]=a}return s}function w(e,t,n,r){return q(B(t,e.length-n),e,n,r)}function S(e,t,n,r){return q(function(e){for(var t=[],n=0;n<e.length;++n)t.push(255&e.charCodeAt(n));return t}(t),e,n,r)}function _(e,t,n,r){return S(e,t,n,r)}function A(e,t,n,r){return q(V(t),e,n,r)}function E(e,t,n,r){return q(function(e,t){for(var n,r,o,i=[],s=0;s<e.length&&!((t-=2)<0);++s)r=(n=e.charCodeAt(s))>>8,o=n%256,i.push(o),i.push(r);return i}(t,e.length-n),e,n,r)}function P(e,t,n){return 0===t&&n===e.length?r.fromByteArray(e):r.fromByteArray(e.slice(t,n))}function x(e,t,n){n=Math.min(e.length,n);for(var r=[],o=t;o<n;){var i,s,a,u,c=e[o],l=null,f=c>239?4:c>223?3:c>191?2:1;if(o+f<=n)switch(f){case 1:c<128&&(l=c);break;case 2:128==(192&(i=e[o+1]))&&(u=(31&c)<<6|63&i)>127&&(l=u);break;case 3:i=e[o+1],s=e[o+2],128==(192&i)&&128==(192&s)&&(u=(15&c)<<12|(63&i)<<6|63&s)>2047&&(u<55296||u>57343)&&(l=u);break;case 4:i=e[o+1],s=e[o+2],a=e[o+3],128==(192&i)&&128==(192&s)&&128==(192&a)&&(u=(15&c)<<18|(63&i)<<12|(63&s)<<6|63&a)>65535&&u<1114112&&(l=u)}null===l?(l=65533,f=1):l>65535&&(l-=65536,r.push(l>>>10&1023|55296),l=56320|1023&l),r.push(l),o+=f}return function(e){var t=e.length;if(t<=O)return String.fromCharCode.apply(String,e);for(var n="",r=0;r<t;)n+=String.fromCharCode.apply(String,e.slice(r,r+=O));return n}(r)}t.lW=u,t.h2=50,u.TYPED_ARRAY_SUPPORT=void 0!==n.g.TYPED_ARRAY_SUPPORT?n.g.TYPED_ARRAY_SUPPORT:function(){try{var e=new Uint8Array(1);return e.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===e.foo()&&"function"==typeof e.subarray&&0===e.subarray(1,1).byteLength}catch(e){return!1}}(),s(),u.poolSize=8192,u._augment=function(e){return e.__proto__=u.prototype,e},u.from=function(e,t,n){return c(null,e,t,n)},u.TYPED_ARRAY_SUPPORT&&(u.prototype.__proto__=Uint8Array.prototype,u.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&u[Symbol.species]===u&&Object.defineProperty(u,Symbol.species,{value:null,configurable:!0})),u.alloc=function(e,t,n){return function(e,t,n,r){return l(t),t<=0?a(e,t):void 0!==n?"string"==typeof r?a(e,t).fill(n,r):a(e,t).fill(n):a(e,t)}(null,e,t,n)},u.allocUnsafe=function(e){return f(null,e)},u.allocUnsafeSlow=function(e){return f(null,e)},u.isBuffer=function(e){return!(null==e||!e._isBuffer)},u.compare=function(e,t){if(!u.isBuffer(e)||!u.isBuffer(t))throw new TypeError("Arguments must be Buffers");if(e===t)return 0;for(var n=e.length,r=t.length,o=0,i=Math.min(n,r);o<i;++o)if(e[o]!==t[o]){n=e[o],r=t[o];break}return n<r?-1:r<n?1:0},u.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},u.concat=function(e,t){if(!i(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return u.alloc(0);var n;if(void 0===t)for(t=0,n=0;n<e.length;++n)t+=e[n].length;var r=u.allocUnsafe(t),o=0;for(n=0;n<e.length;++n){var s=e[n];if(!u.isBuffer(s))throw new TypeError('"list" argument must be an Array of Buffers');s.copy(r,o),o+=s.length}return r},u.byteLength=p,u.prototype._isBuffer=!0,u.prototype.swap16=function(){var e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var t=0;t<e;t+=2)y(this,t,t+1);return this},u.prototype.swap32=function(){var e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var t=0;t<e;t+=4)y(this,t,t+3),y(this,t+1,t+2);return this},u.prototype.swap64=function(){var e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var t=0;t<e;t+=8)y(this,t,t+7),y(this,t+1,t+6),y(this,t+2,t+5),y(this,t+3,t+4);return this},u.prototype.toString=function(){var e=0|this.length;return 0===e?"":0===arguments.length?x(this,0,e):g.apply(this,arguments)},u.prototype.equals=function(e){if(!u.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===u.compare(this,e)},u.prototype.inspect=function(){var e="",n=t.h2;return this.length>0&&(e=this.toString("hex",0,n).match(/.{2}/g).join(" "),this.length>n&&(e+=" ... ")),"<Buffer "+e+">"},u.prototype.compare=function(e,t,n,r,o){if(!u.isBuffer(e))throw new TypeError("Argument must be a Buffer");if(void 0===t&&(t=0),void 0===n&&(n=e?e.length:0),void 0===r&&(r=0),void 0===o&&(o=this.length),t<0||n>e.length||r<0||o>this.length)throw new RangeError("out of range index");if(r>=o&&t>=n)return 0;if(r>=o)return-1;if(t>=n)return 1;if(this===e)return 0;for(var i=(o>>>=0)-(r>>>=0),s=(n>>>=0)-(t>>>=0),a=Math.min(i,s),c=this.slice(r,o),l=e.slice(t,n),f=0;f<a;++f)if(c[f]!==l[f]){i=c[f],s=l[f];break}return i<s?-1:s<i?1:0},u.prototype.includes=function(e,t,n){return-1!==this.indexOf(e,t,n)},u.prototype.indexOf=function(e,t,n){return v(this,e,t,n,!0)},u.prototype.lastIndexOf=function(e,t,n){return v(this,e,t,n,!1)},u.prototype.write=function(e,t,n,r){if(void 0===t)r="utf8",n=this.length,t=0;else if(void 0===n&&"string"==typeof t)r=t,n=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t|=0,isFinite(n)?(n|=0,void 0===r&&(r="utf8")):(r=n,n=void 0)}var o=this.length-t;if((void 0===n||n>o)&&(n=o),e.length>0&&(n<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");r||(r="utf8");for(var i=!1;;)switch(r){case"hex":return b(this,e,t,n);case"utf8":case"utf-8":return w(this,e,t,n);case"ascii":return S(this,e,t,n);case"latin1":case"binary":return _(this,e,t,n);case"base64":return A(this,e,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return E(this,e,t,n);default:if(i)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),i=!0}},u.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var O=4096;function I(e,t,n){var r="";n=Math.min(e.length,n);for(var o=t;o<n;++o)r+=String.fromCharCode(127&e[o]);return r}function C(e,t,n){var r="";n=Math.min(e.length,n);for(var o=t;o<n;++o)r+=String.fromCharCode(e[o]);return r}function T(e,t,n){var r,o=e.length;(!t||t<0)&&(t=0),(!n||n<0||n>o)&&(n=o);for(var i="",s=t;s<n;++s)i+=(r=e[s])<16?"0"+r.toString(16):r.toString(16);return i}function k(e,t,n){for(var r=e.slice(t,n),o="",i=0;i<r.length;i+=2)o+=String.fromCharCode(r[i]+256*r[i+1]);return o}function U(e,t,n){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>n)throw new RangeError("Trying to access beyond buffer length")}function R(e,t,n,r,o,i){if(!u.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>o||t<i)throw new RangeError('"value" argument is out of bounds');if(n+r>e.length)throw new RangeError("Index out of range")}function j(e,t,n,r){t<0&&(t=65535+t+1);for(var o=0,i=Math.min(e.length-n,2);o<i;++o)e[n+o]=(t&255<<8*(r?o:1-o))>>>8*(r?o:1-o)}function M(e,t,n,r){t<0&&(t=4294967295+t+1);for(var o=0,i=Math.min(e.length-n,4);o<i;++o)e[n+o]=t>>>8*(r?o:3-o)&255}function N(e,t,n,r,o,i){if(n+r>e.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function D(e,t,n,r,i){return i||N(e,0,n,4),o.write(e,t,n,r,23,4),n+4}function F(e,t,n,r,i){return i||N(e,0,n,8),o.write(e,t,n,r,52,8),n+8}u.prototype.slice=function(e,t){var n,r=this.length;if((e=~~e)<0?(e+=r)<0&&(e=0):e>r&&(e=r),(t=void 0===t?r:~~t)<0?(t+=r)<0&&(t=0):t>r&&(t=r),t<e&&(t=e),u.TYPED_ARRAY_SUPPORT)(n=this.subarray(e,t)).__proto__=u.prototype;else{var o=t-e;n=new u(o,void 0);for(var i=0;i<o;++i)n[i]=this[i+e]}return n},u.prototype.readUIntLE=function(e,t,n){e|=0,t|=0,n||U(e,t,this.length);for(var r=this[e],o=1,i=0;++i<t&&(o*=256);)r+=this[e+i]*o;return r},u.prototype.readUIntBE=function(e,t,n){e|=0,t|=0,n||U(e,t,this.length);for(var r=this[e+--t],o=1;t>0&&(o*=256);)r+=this[e+--t]*o;return r},u.prototype.readUInt8=function(e,t){return t||U(e,1,this.length),this[e]},u.prototype.readUInt16LE=function(e,t){return t||U(e,2,this.length),this[e]|this[e+1]<<8},u.prototype.readUInt16BE=function(e,t){return t||U(e,2,this.length),this[e]<<8|this[e+1]},u.prototype.readUInt32LE=function(e,t){return t||U(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},u.prototype.readUInt32BE=function(e,t){return t||U(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},u.prototype.readIntLE=function(e,t,n){e|=0,t|=0,n||U(e,t,this.length);for(var r=this[e],o=1,i=0;++i<t&&(o*=256);)r+=this[e+i]*o;return r>=(o*=128)&&(r-=Math.pow(2,8*t)),r},u.prototype.readIntBE=function(e,t,n){e|=0,t|=0,n||U(e,t,this.length);for(var r=t,o=1,i=this[e+--r];r>0&&(o*=256);)i+=this[e+--r]*o;return i>=(o*=128)&&(i-=Math.pow(2,8*t)),i},u.prototype.readInt8=function(e,t){return t||U(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},u.prototype.readInt16LE=function(e,t){t||U(e,2,this.length);var n=this[e]|this[e+1]<<8;return 32768&n?4294901760|n:n},u.prototype.readInt16BE=function(e,t){t||U(e,2,this.length);var n=this[e+1]|this[e]<<8;return 32768&n?4294901760|n:n},u.prototype.readInt32LE=function(e,t){return t||U(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},u.prototype.readInt32BE=function(e,t){return t||U(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},u.prototype.readFloatLE=function(e,t){return t||U(e,4,this.length),o.read(this,e,!0,23,4)},u.prototype.readFloatBE=function(e,t){return t||U(e,4,this.length),o.read(this,e,!1,23,4)},u.prototype.readDoubleLE=function(e,t){return t||U(e,8,this.length),o.read(this,e,!0,52,8)},u.prototype.readDoubleBE=function(e,t){return t||U(e,8,this.length),o.read(this,e,!1,52,8)},u.prototype.writeUIntLE=function(e,t,n,r){e=+e,t|=0,n|=0,r||R(this,e,t,n,Math.pow(2,8*n)-1,0);var o=1,i=0;for(this[t]=255&e;++i<n&&(o*=256);)this[t+i]=e/o&255;return t+n},u.prototype.writeUIntBE=function(e,t,n,r){e=+e,t|=0,n|=0,r||R(this,e,t,n,Math.pow(2,8*n)-1,0);var o=n-1,i=1;for(this[t+o]=255&e;--o>=0&&(i*=256);)this[t+o]=e/i&255;return t+n},u.prototype.writeUInt8=function(e,t,n){return e=+e,t|=0,n||R(this,e,t,1,255,0),u.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),this[t]=255&e,t+1},u.prototype.writeUInt16LE=function(e,t,n){return e=+e,t|=0,n||R(this,e,t,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):j(this,e,t,!0),t+2},u.prototype.writeUInt16BE=function(e,t,n){return e=+e,t|=0,n||R(this,e,t,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):j(this,e,t,!1),t+2},u.prototype.writeUInt32LE=function(e,t,n){return e=+e,t|=0,n||R(this,e,t,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e):M(this,e,t,!0),t+4},u.prototype.writeUInt32BE=function(e,t,n){return e=+e,t|=0,n||R(this,e,t,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):M(this,e,t,!1),t+4},u.prototype.writeIntLE=function(e,t,n,r){if(e=+e,t|=0,!r){var o=Math.pow(2,8*n-1);R(this,e,t,n,o-1,-o)}var i=0,s=1,a=0;for(this[t]=255&e;++i<n&&(s*=256);)e<0&&0===a&&0!==this[t+i-1]&&(a=1),this[t+i]=(e/s>>0)-a&255;return t+n},u.prototype.writeIntBE=function(e,t,n,r){if(e=+e,t|=0,!r){var o=Math.pow(2,8*n-1);R(this,e,t,n,o-1,-o)}var i=n-1,s=1,a=0;for(this[t+i]=255&e;--i>=0&&(s*=256);)e<0&&0===a&&0!==this[t+i+1]&&(a=1),this[t+i]=(e/s>>0)-a&255;return t+n},u.prototype.writeInt8=function(e,t,n){return e=+e,t|=0,n||R(this,e,t,1,127,-128),u.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),e<0&&(e=255+e+1),this[t]=255&e,t+1},u.prototype.writeInt16LE=function(e,t,n){return e=+e,t|=0,n||R(this,e,t,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):j(this,e,t,!0),t+2},u.prototype.writeInt16BE=function(e,t,n){return e=+e,t|=0,n||R(this,e,t,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):j(this,e,t,!1),t+2},u.prototype.writeInt32LE=function(e,t,n){return e=+e,t|=0,n||R(this,e,t,4,2147483647,-2147483648),u.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24):M(this,e,t,!0),t+4},u.prototype.writeInt32BE=function(e,t,n){return e=+e,t|=0,n||R(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):M(this,e,t,!1),t+4},u.prototype.writeFloatLE=function(e,t,n){return D(this,e,t,!0,n)},u.prototype.writeFloatBE=function(e,t,n){return D(this,e,t,!1,n)},u.prototype.writeDoubleLE=function(e,t,n){return F(this,e,t,!0,n)},u.prototype.writeDoubleBE=function(e,t,n){return F(this,e,t,!1,n)},u.prototype.copy=function(e,t,n,r){if(n||(n=0),r||0===r||(r=this.length),t>=e.length&&(t=e.length),t||(t=0),r>0&&r<n&&(r=n),r===n)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("sourceStart out of bounds");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),e.length-t<r-n&&(r=e.length-t+n);var o,i=r-n;if(this===e&&n<t&&t<r)for(o=i-1;o>=0;--o)e[o+t]=this[o+n];else if(i<1e3||!u.TYPED_ARRAY_SUPPORT)for(o=0;o<i;++o)e[o+t]=this[o+n];else Uint8Array.prototype.set.call(e,this.subarray(n,n+i),t);return i},u.prototype.fill=function(e,t,n,r){if("string"==typeof e){if("string"==typeof t?(r=t,t=0,n=this.length):"string"==typeof n&&(r=n,n=this.length),1===e.length){var o=e.charCodeAt(0);o<256&&(e=o)}if(void 0!==r&&"string"!=typeof r)throw new TypeError("encoding must be a string");if("string"==typeof r&&!u.isEncoding(r))throw new TypeError("Unknown encoding: "+r)}else"number"==typeof e&&(e&=255);if(t<0||this.length<t||this.length<n)throw new RangeError("Out of range index");if(n<=t)return this;var i;if(t>>>=0,n=void 0===n?this.length:n>>>0,e||(e=0),"number"==typeof e)for(i=t;i<n;++i)this[i]=e;else{var s=u.isBuffer(e)?e:B(new u(e,r).toString()),a=s.length;for(i=0;i<n-t;++i)this[i+t]=s[i%a]}return this};var L=/[^+\/0-9A-Za-z-_]/g;function B(e,t){var n;t=t||1/0;for(var r=e.length,o=null,i=[],s=0;s<r;++s){if((n=e.charCodeAt(s))>55295&&n<57344){if(!o){if(n>56319){(t-=3)>-1&&i.push(239,191,189);continue}if(s+1===r){(t-=3)>-1&&i.push(239,191,189);continue}o=n;continue}if(n<56320){(t-=3)>-1&&i.push(239,191,189),o=n;continue}n=65536+(o-55296<<10|n-56320)}else o&&(t-=3)>-1&&i.push(239,191,189);if(o=null,n<128){if((t-=1)<0)break;i.push(n)}else if(n<2048){if((t-=2)<0)break;i.push(n>>6|192,63&n|128)}else if(n<65536){if((t-=3)<0)break;i.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;i.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return i}function V(e){return r.toByteArray(function(e){if((e=function(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")}(e).replace(L,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function q(e,t,n,r){for(var o=0;o<r&&!(o+n>=t.length||o>=e.length);++o)t[o+n]=e[o];return o}},2680:(e,t,n)=>{"use strict";var r=n(7286),o=n(9429),i=o(r("String.prototype.indexOf"));e.exports=function(e,t){var n=r(e,!!t);return"function"==typeof n&&i(e,".prototype.")>-1?o(n):n}},9429:(e,t,n)=>{"use strict";var r=n(4090),o=n(7286),i=n(7669),s=n(5408),a=o("%Function.prototype.apply%"),u=o("%Function.prototype.call%"),c=o("%Reflect.apply%",!0)||r.call(u,a),l=n(999),f=o("%Math.max%");e.exports=function(e){if("function"!=typeof e)throw new s("a function is required");var t=c(r,u,arguments);return i(t,1+f(0,e.length-(arguments.length-1)),!0)};var h=function(){return c(r,a,arguments)};l?l(e.exports,"apply",{value:h}):e.exports.apply=h},3421:(e,t)=>{"use strict";t.Q=function(e,t){if("string"!=typeof e)throw new TypeError("argument str must be a string");for(var r={},o=t||{},s=e.split(";"),a=o.decode||n,u=0;u<s.length;u++){var c=s[u],l=c.indexOf("=");if(!(l<0)){var f=c.substring(0,l).trim();if(null==r[f]){var h=c.substring(l+1,c.length).trim();'"'===h[0]&&(h=h.slice(1,-1)),r[f]=i(h,a)}}}return r},t.q=function(e,t,n){var i=n||{},s=i.encode||r;if("function"!=typeof s)throw new TypeError("option encode is invalid");if(!o.test(e))throw new TypeError("argument name is invalid");var a=s(t);if(a&&!o.test(a))throw new TypeError("argument val is invalid");var u=e+"="+a;if(null!=i.maxAge){var c=i.maxAge-0;if(isNaN(c)||!isFinite(c))throw new TypeError("option maxAge is invalid");u+="; Max-Age="+Math.floor(c)}if(i.domain){if(!o.test(i.domain))throw new TypeError("option domain is invalid");u+="; Domain="+i.domain}if(i.path){if(!o.test(i.path))throw new TypeError("option path is invalid");u+="; Path="+i.path}if(i.expires){if("function"!=typeof i.expires.toUTCString)throw new TypeError("option expires is invalid");u+="; Expires="+i.expires.toUTCString()}if(i.httpOnly&&(u+="; HttpOnly"),i.secure&&(u+="; Secure"),i.sameSite)switch("string"==typeof i.sameSite?i.sameSite.toLowerCase():i.sameSite){case!0:u+="; SameSite=Strict";break;case"lax":u+="; SameSite=Lax";break;case"strict":u+="; SameSite=Strict";break;case"none":u+="; SameSite=None";break;default:throw new TypeError("option sameSite is invalid")}return u};var n=decodeURIComponent,r=encodeURIComponent,o=/^[\u0009\u0020-\u007e\u0080-\u00ff]+$/;function i(e,t){try{return t(e)}catch(t){return e}}},7359:function(e,t,n){var r;e.exports=(r=r||function(e,t){var r;if("undefined"!=typeof window&&window.crypto&&(r=window.crypto),"undefined"!=typeof self&&self.crypto&&(r=self.crypto),"undefined"!=typeof globalThis&&globalThis.crypto&&(r=globalThis.crypto),!r&&"undefined"!=typeof window&&window.msCrypto&&(r=window.msCrypto),!r&&void 0!==n.g&&n.g.crypto&&(r=n.g.crypto),!r)try{r=n(633)}catch(e){}var o=function(){if(r){if("function"==typeof r.getRandomValues)try{return r.getRandomValues(new Uint32Array(1))[0]}catch(e){}if("function"==typeof r.randomBytes)try{return r.randomBytes(4).readInt32LE()}catch(e){}}throw new Error("Native crypto module could not be used to get secure random number.")},i=Object.create||function(){function e(){}return function(t){var n;return e.prototype=t,n=new e,e.prototype=null,n}}(),s={},a=s.lib={},u=a.Base={extend:function(e){var t=i(this);return e&&t.mixIn(e),t.hasOwnProperty("init")&&this.init!==t.init||(t.init=function(){t.$super.init.apply(this,arguments)}),t.init.prototype=t,t.$super=this,t},create:function(){var e=this.extend();return e.init.apply(e,arguments),e},init:function(){},mixIn:function(e){for(var t in e)e.hasOwnProperty(t)&&(this[t]=e[t]);e.hasOwnProperty("toString")&&(this.toString=e.toString)},clone:function(){return this.init.prototype.extend(this)}},c=a.WordArray=u.extend({init:function(e,t){e=this.words=e||[],this.sigBytes=null!=t?t:4*e.length},toString:function(e){return(e||f).stringify(this)},concat:function(e){var t=this.words,n=e.words,r=this.sigBytes,o=e.sigBytes;if(this.clamp(),r%4)for(var i=0;i<o;i++){var s=n[i>>>2]>>>24-i%4*8&255;t[r+i>>>2]|=s<<24-(r+i)%4*8}else for(var a=0;a<o;a+=4)t[r+a>>>2]=n[a>>>2];return this.sigBytes+=o,this},clamp:function(){var t=this.words,n=this.sigBytes;t[n>>>2]&=4294967295<<32-n%4*8,t.length=e.ceil(n/4)},clone:function(){var e=u.clone.call(this);return e.words=this.words.slice(0),e},random:function(e){for(var t=[],n=0;n<e;n+=4)t.push(o());return new c.init(t,e)}}),l=s.enc={},f=l.Hex={stringify:function(e){for(var t=e.words,n=e.sigBytes,r=[],o=0;o<n;o++){var i=t[o>>>2]>>>24-o%4*8&255;r.push((i>>>4).toString(16)),r.push((15&i).toString(16))}return r.join("")},parse:function(e){for(var t=e.length,n=[],r=0;r<t;r+=2)n[r>>>3]|=parseInt(e.substr(r,2),16)<<24-r%8*4;return new c.init(n,t/2)}},h=l.Latin1={stringify:function(e){for(var t=e.words,n=e.sigBytes,r=[],o=0;o<n;o++){var i=t[o>>>2]>>>24-o%4*8&255;r.push(String.fromCharCode(i))}return r.join("")},parse:function(e){for(var t=e.length,n=[],r=0;r<t;r++)n[r>>>2]|=(255&e.charCodeAt(r))<<24-r%4*8;return new c.init(n,t)}},d=l.Utf8={stringify:function(e){try{return decodeURIComponent(escape(h.stringify(e)))}catch(e){throw new Error("Malformed UTF-8 data")}},parse:function(e){return h.parse(unescape(encodeURIComponent(e)))}},p=a.BufferedBlockAlgorithm=u.extend({reset:function(){this._data=new c.init,this._nDataBytes=0},_append:function(e){"string"==typeof e&&(e=d.parse(e)),this._data.concat(e),this._nDataBytes+=e.sigBytes},_process:function(t){var n,r=this._data,o=r.words,i=r.sigBytes,s=this.blockSize,a=i/(4*s),u=(a=t?e.ceil(a):e.max((0|a)-this._minBufferSize,0))*s,l=e.min(4*u,i);if(u){for(var f=0;f<u;f+=s)this._doProcessBlock(o,f);n=o.splice(0,u),r.sigBytes-=l}return new c.init(n,l)},clone:function(){var e=u.clone.call(this);return e._data=this._data.clone(),e},_minBufferSize:0}),g=(a.Hasher=p.extend({cfg:u.extend(),init:function(e){this.cfg=this.cfg.extend(e),this.reset()},reset:function(){p.reset.call(this),this._doReset()},update:function(e){return this._append(e),this._process(),this},finalize:function(e){return e&&this._append(e),this._doFinalize()},blockSize:16,_createHelper:function(e){return function(t,n){return new e.init(n).finalize(t)}},_createHmacHelper:function(e){return function(t,n){return new g.HMAC.init(e,n).finalize(t)}}}),s.algo={});return s}(Math),r)},8139:function(e,t,n){var r,o,i;e.exports=(r=n(7359),i=(o=r).lib.WordArray,o.enc.Base64={stringify:function(e){var t=e.words,n=e.sigBytes,r=this._map;e.clamp();for(var o=[],i=0;i<n;i+=3)for(var s=(t[i>>>2]>>>24-i%4*8&255)<<16|(t[i+1>>>2]>>>24-(i+1)%4*8&255)<<8|t[i+2>>>2]>>>24-(i+2)%4*8&255,a=0;a<4&&i+.75*a<n;a++)o.push(r.charAt(s>>>6*(3-a)&63));var u=r.charAt(64);if(u)for(;o.length%4;)o.push(u);return o.join("")},parse:function(e){var t=e.length,n=this._map,r=this._reverseMap;if(!r){r=this._reverseMap=[];for(var o=0;o<n.length;o++)r[n.charCodeAt(o)]=o}var s=n.charAt(64);if(s){var a=e.indexOf(s);-1!==a&&(t=a)}return function(e,t,n){for(var r=[],o=0,s=0;s<t;s++)if(s%4){var a=n[e.charCodeAt(s-1)]<<s%4*2|n[e.charCodeAt(s)]>>>6-s%4*2;r[o>>>2]|=a<<24-o%4*8,o++}return i.create(r,o)}(e,t,r)},_map:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="},r.enc.Base64)},6061:function(e,t,n){var r;e.exports=(r=n(7359),n(1093),n(6423),r.HmacSHA256)},6423:function(e,t,n){var r,o,i;e.exports=(o=(r=n(7359)).lib.Base,i=r.enc.Utf8,void(r.algo.HMAC=o.extend({init:function(e,t){e=this._hasher=new e.init,"string"==typeof t&&(t=i.parse(t));var n=e.blockSize,r=4*n;t.sigBytes>r&&(t=e.finalize(t)),t.clamp();for(var o=this._oKey=t.clone(),s=this._iKey=t.clone(),a=o.words,u=s.words,c=0;c<n;c++)a[c]^=1549556828,u[c]^=909522486;o.sigBytes=s.sigBytes=r,this.reset()},reset:function(){var e=this._hasher;e.reset(),e.update(this._iKey)},update:function(e){return this._hasher.update(e),this},finalize:function(e){var t=this._hasher,n=t.finalize(e);return t.reset(),t.finalize(this._oKey.clone().concat(n))}})))},1816:function(e,t,n){var r;e.exports=(r=n(7359),function(){if("function"==typeof ArrayBuffer){var e=r.lib.WordArray,t=e.init,n=e.init=function(e){if(e instanceof ArrayBuffer&&(e=new Uint8Array(e)),(e instanceof Int8Array||"undefined"!=typeof Uint8ClampedArray&&e instanceof Uint8ClampedArray||e instanceof Int16Array||e instanceof Uint16Array||e instanceof Int32Array||e instanceof Uint32Array||e instanceof Float32Array||e instanceof Float64Array)&&(e=new Uint8Array(e.buffer,e.byteOffset,e.byteLength)),e instanceof Uint8Array){for(var n=e.byteLength,r=[],o=0;o<n;o++)r[o>>>2]|=e[o]<<24-o%4*8;t.call(this,r,n)}else t.apply(this,arguments)};n.prototype=e}}(),r.lib.WordArray)},1093:function(e,t,n){var r;e.exports=(r=n(7359),function(e){var t=r,n=t.lib,o=n.WordArray,i=n.Hasher,s=t.algo,a=[],u=[];!function(){function t(t){for(var n=e.sqrt(t),r=2;r<=n;r++)if(!(t%r))return!1;return!0}function n(e){return 4294967296*(e-(0|e))|0}for(var r=2,o=0;o<64;)t(r)&&(o<8&&(a[o]=n(e.pow(r,.5))),u[o]=n(e.pow(r,1/3)),o++),r++}();var c=[],l=s.SHA256=i.extend({_doReset:function(){this._hash=new o.init(a.slice(0))},_doProcessBlock:function(e,t){for(var n=this._hash.words,r=n[0],o=n[1],i=n[2],s=n[3],a=n[4],l=n[5],f=n[6],h=n[7],d=0;d<64;d++){if(d<16)c[d]=0|e[t+d];else{var p=c[d-15],g=(p<<25|p>>>7)^(p<<14|p>>>18)^p>>>3,y=c[d-2],v=(y<<15|y>>>17)^(y<<13|y>>>19)^y>>>10;c[d]=g+c[d-7]+v+c[d-16]}var m=r&o^r&i^o&i,b=(r<<30|r>>>2)^(r<<19|r>>>13)^(r<<10|r>>>22),w=h+((a<<26|a>>>6)^(a<<21|a>>>11)^(a<<7|a>>>25))+(a&l^~a&f)+u[d]+c[d];h=f,f=l,l=a,a=s+w|0,s=i,i=o,o=r,r=w+(b+m)|0}n[0]=n[0]+r|0,n[1]=n[1]+o|0,n[2]=n[2]+i|0,n[3]=n[3]+s|0,n[4]=n[4]+a|0,n[5]=n[5]+l|0,n[6]=n[6]+f|0,n[7]=n[7]+h|0},_doFinalize:function(){var t=this._data,n=t.words,r=8*this._nDataBytes,o=8*t.sigBytes;return n[o>>>5]|=128<<24-o%32,n[14+(o+64>>>9<<4)]=e.floor(r/4294967296),n[15+(o+64>>>9<<4)]=r,t.sigBytes=4*n.length,this._process(),this._hash},clone:function(){var e=i.clone.call(this);return e._hash=this._hash.clone(),e}});t.SHA256=i._createHelper(l),t.HmacSHA256=i._createHmacHelper(l)}(Math),r.SHA256)},5195:(e,t,n)=>{"use strict";var r=n(999),o=n(8342),i=n(5408),s=n(326);e.exports=function(e,t,n){if(!e||"object"!=typeof e&&"function"!=typeof e)throw new i("`obj` must be an object or a function`");if("string"!=typeof t&&"symbol"!=typeof t)throw new i("`property` must be a string or a symbol`");if(arguments.length>3&&"boolean"!=typeof arguments[3]&&null!==arguments[3])throw new i("`nonEnumerable`, if provided, must be a boolean or null");if(arguments.length>4&&"boolean"!=typeof arguments[4]&&null!==arguments[4])throw new i("`nonWritable`, if provided, must be a boolean or null");if(arguments.length>5&&"boolean"!=typeof arguments[5]&&null!==arguments[5])throw new i("`nonConfigurable`, if provided, must be a boolean or null");if(arguments.length>6&&"boolean"!=typeof arguments[6])throw new i("`loose`, if provided, must be a boolean");var a=arguments.length>3?arguments[3]:null,u=arguments.length>4?arguments[4]:null,c=arguments.length>5?arguments[5]:null,l=arguments.length>6&&arguments[6],f=!!s&&s(e,t);if(r)r(e,t,{configurable:null===c&&f?f.configurable:!c,enumerable:null===a&&f?f.enumerable:!a,value:n,writable:null===u&&f?f.writable:!u});else{if(!l&&(a||u||c))throw new o("This environment does not support defining a property as non-configurable, non-writable, or non-enumerable.");e[t]=n}}},999:(e,t,n)=>{"use strict";var r=n(7286)("%Object.defineProperty%",!0)||!1;if(r)try{r({},"a",{value:1})}catch(e){r=!1}e.exports=r},9654:e=>{"use strict";e.exports=EvalError},2321:e=>{"use strict";e.exports=Error},8205:e=>{"use strict";e.exports=RangeError},2976:e=>{"use strict";e.exports=ReferenceError},8342:e=>{"use strict";e.exports=SyntaxError},5408:e=>{"use strict";e.exports=TypeError},2885:e=>{"use strict";e.exports=URIError},2215:(e,t,n)=>{"use strict";const r=n(3325),o=n(3281),i=n(7932);e.exports={XMLParser:o,XMLValidator:r,XMLBuilder:i}},4056:(e,t)=>{"use strict";const n=":A-Za-z_\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD",r="["+n+"]["+n+"\\-.\\d\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*",o=new RegExp("^"+r+"$");t.isExist=function(e){return void 0!==e},t.isEmptyObject=function(e){return 0===Object.keys(e).length},t.merge=function(e,t,n){if(t){const r=Object.keys(t),o=r.length;for(let i=0;i<o;i++)e[r[i]]="strict"===n?[t[r[i]]]:t[r[i]]}},t.getValue=function(e){return t.isExist(e)?e:""},t.isName=function(e){return!(null==o.exec(e))},t.getAllMatches=function(e,t){const n=[];let r=t.exec(e);for(;r;){const o=[];o.startIndex=t.lastIndex-r[0].length;const i=r.length;for(let e=0;e<i;e++)o.push(r[e]);n.push(o),r=t.exec(e)}return n},t.nameRegexp=r},3325:(e,t,n)=>{"use strict";const r=n(4056),o={allowBooleanAttributes:!1,unpairedTags:[]};function i(e){return" "===e||"\t"===e||"\n"===e||"\r"===e}function s(e,t){const n=t;for(;t<e.length;t++)if("?"!=e[t]&&" "!=e[t]);else{const r=e.substr(n,t-n);if(t>5&&"xml"===r)return p("InvalidXml","XML declaration allowed only at the start of the document.",y(e,t));if("?"==e[t]&&">"==e[t+1]){t++;break}}return t}function a(e,t){if(e.length>t+5&&"-"===e[t+1]&&"-"===e[t+2]){for(t+=3;t<e.length;t++)if("-"===e[t]&&"-"===e[t+1]&&">"===e[t+2]){t+=2;break}}else if(e.length>t+8&&"D"===e[t+1]&&"O"===e[t+2]&&"C"===e[t+3]&&"T"===e[t+4]&&"Y"===e[t+5]&&"P"===e[t+6]&&"E"===e[t+7]){let n=1;for(t+=8;t<e.length;t++)if("<"===e[t])n++;else if(">"===e[t]&&(n--,0===n))break}else if(e.length>t+9&&"["===e[t+1]&&"C"===e[t+2]&&"D"===e[t+3]&&"A"===e[t+4]&&"T"===e[t+5]&&"A"===e[t+6]&&"["===e[t+7])for(t+=8;t<e.length;t++)if("]"===e[t]&&"]"===e[t+1]&&">"===e[t+2]){t+=2;break}return t}t.validate=function(e,t){t=Object.assign({},o,t);const n=[];let u=!1,c=!1;"\ufeff"===e[0]&&(e=e.substr(1));for(let o=0;o<e.length;o++)if("<"===e[o]&&"?"===e[o+1]){if(o+=2,o=s(e,o),o.err)return o}else{if("<"!==e[o]){if(i(e[o]))continue;return p("InvalidChar","char '"+e[o]+"' is not expected.",y(e,o))}{let g=o;if(o++,"!"===e[o]){o=a(e,o);continue}{let v=!1;"/"===e[o]&&(v=!0,o++);let m="";for(;o<e.length&&">"!==e[o]&&" "!==e[o]&&"\t"!==e[o]&&"\n"!==e[o]&&"\r"!==e[o];o++)m+=e[o];if(m=m.trim(),"/"===m[m.length-1]&&(m=m.substring(0,m.length-1),o--),f=m,!r.isName(f)){let t;return t=0===m.trim().length?"Invalid space after '<'.":"Tag '"+m+"' is an invalid name.",p("InvalidTag",t,y(e,o))}const b=l(e,o);if(!1===b)return p("InvalidAttr","Attributes for '"+m+"' have open quote.",y(e,o));let w=b.value;if(o=b.index,"/"===w[w.length-1]){const n=o-w.length;w=w.substring(0,w.length-1);const r=h(w,t);if(!0!==r)return p(r.err.code,r.err.msg,y(e,n+r.err.line));u=!0}else if(v){if(!b.tagClosed)return p("InvalidTag","Closing tag '"+m+"' doesn't have proper closing.",y(e,o));if(w.trim().length>0)return p("InvalidTag","Closing tag '"+m+"' can't have attributes or invalid starting.",y(e,g));{const t=n.pop();if(m!==t.tagName){let n=y(e,t.tagStartPos);return p("InvalidTag","Expected closing tag '"+t.tagName+"' (opened in line "+n.line+", col "+n.col+") instead of closing tag '"+m+"'.",y(e,g))}0==n.length&&(c=!0)}}else{const r=h(w,t);if(!0!==r)return p(r.err.code,r.err.msg,y(e,o-w.length+r.err.line));if(!0===c)return p("InvalidXml","Multiple possible root nodes found.",y(e,o));-1!==t.unpairedTags.indexOf(m)||n.push({tagName:m,tagStartPos:g}),u=!0}for(o++;o<e.length;o++)if("<"===e[o]){if("!"===e[o+1]){o++,o=a(e,o);continue}if("?"!==e[o+1])break;if(o=s(e,++o),o.err)return o}else if("&"===e[o]){const t=d(e,o);if(-1==t)return p("InvalidChar","char '&' is not expected.",y(e,o));o=t}else if(!0===c&&!i(e[o]))return p("InvalidXml","Extra text at the end",y(e,o));"<"===e[o]&&o--}}}var f;return u?1==n.length?p("InvalidTag","Unclosed tag '"+n[0].tagName+"'.",y(e,n[0].tagStartPos)):!(n.length>0)||p("InvalidXml","Invalid '"+JSON.stringify(n.map((e=>e.tagName)),null,4).replace(/\r?\n/g,"")+"' found.",{line:1,col:1}):p("InvalidXml","Start tag expected.",1)};const u='"',c="'";function l(e,t){let n="",r="",o=!1;for(;t<e.length;t++){if(e[t]===u||e[t]===c)""===r?r=e[t]:r!==e[t]||(r="");else if(">"===e[t]&&""===r){o=!0;break}n+=e[t]}return""===r&&{value:n,index:t,tagClosed:o}}const f=new RegExp("(\\s*)([^\\s=]+)(\\s*=)?(\\s*(['\"])(([\\s\\S])*?)\\5)?","g");function h(e,t){const n=r.getAllMatches(e,f),o={};for(let e=0;e<n.length;e++){if(0===n[e][1].length)return p("InvalidAttr","Attribute '"+n[e][2]+"' has no space in starting.",v(n[e]));if(void 0!==n[e][3]&&void 0===n[e][4])return p("InvalidAttr","Attribute '"+n[e][2]+"' is without value.",v(n[e]));if(void 0===n[e][3]&&!t.allowBooleanAttributes)return p("InvalidAttr","boolean attribute '"+n[e][2]+"' is not allowed.",v(n[e]));const r=n[e][2];if(!g(r))return p("InvalidAttr","Attribute '"+r+"' is an invalid name.",v(n[e]));if(o.hasOwnProperty(r))return p("InvalidAttr","Attribute '"+r+"' is repeated.",v(n[e]));o[r]=1}return!0}function d(e,t){if(";"===e[++t])return-1;if("#"===e[t])return function(e,t){let n=/\d/;for("x"===e[t]&&(t++,n=/[\da-fA-F]/);t<e.length;t++){if(";"===e[t])return t;if(!e[t].match(n))break}return-1}(e,++t);let n=0;for(;t<e.length;t++,n++)if(!(e[t].match(/\w/)&&n<20)){if(";"===e[t])break;return-1}return t}function p(e,t,n){return{err:{code:e,msg:t,line:n.line||n,col:n.col}}}function g(e){return r.isName(e)}function y(e,t){const n=e.substring(0,t).split(/\r?\n/);return{line:n.length,col:n[n.length-1].length+1}}function v(e){return e.startIndex+e[1].length}},7932:(e,t,n)=>{"use strict";const r=n(6704),o={attributeNamePrefix:"@_",attributesGroupName:!1,textNodeName:"#text",ignoreAttributes:!0,cdataPropName:!1,format:!1,indentBy:"  ",suppressEmptyNode:!1,suppressUnpairedNode:!0,suppressBooleanAttributes:!0,tagValueProcessor:function(e,t){return t},attributeValueProcessor:function(e,t){return t},preserveOrder:!1,commentPropName:!1,unpairedTags:[],entities:[{regex:new RegExp("&","g"),val:"&amp;"},{regex:new RegExp(">","g"),val:"&gt;"},{regex:new RegExp("<","g"),val:"&lt;"},{regex:new RegExp("'","g"),val:"&apos;"},{regex:new RegExp('"',"g"),val:"&quot;"}],processEntities:!0,stopNodes:[],oneListGroup:!1};function i(e){this.options=Object.assign({},o,e),this.options.ignoreAttributes||this.options.attributesGroupName?this.isAttribute=function(){return!1}:(this.attrPrefixLen=this.options.attributeNamePrefix.length,this.isAttribute=u),this.processTextOrObjNode=s,this.options.format?(this.indentate=a,this.tagEndChar=">\n",this.newLine="\n"):(this.indentate=function(){return""},this.tagEndChar=">",this.newLine="")}function s(e,t,n){const r=this.j2x(e,n+1);return void 0!==e[this.options.textNodeName]&&1===Object.keys(e).length?this.buildTextValNode(e[this.options.textNodeName],t,r.attrStr,n):this.buildObjectNode(r.val,t,r.attrStr,n)}function a(e){return this.options.indentBy.repeat(e)}function u(e){return!(!e.startsWith(this.options.attributeNamePrefix)||e===this.options.textNodeName)&&e.substr(this.attrPrefixLen)}i.prototype.build=function(e){return this.options.preserveOrder?r(e,this.options):(Array.isArray(e)&&this.options.arrayNodeName&&this.options.arrayNodeName.length>1&&(e={[this.options.arrayNodeName]:e}),this.j2x(e,0).val)},i.prototype.j2x=function(e,t){let n="",r="";for(let o in e)if(Object.prototype.hasOwnProperty.call(e,o))if(void 0===e[o])this.isAttribute(o)&&(r+="");else if(null===e[o])this.isAttribute(o)?r+="":"?"===o[0]?r+=this.indentate(t)+"<"+o+"?"+this.tagEndChar:r+=this.indentate(t)+"<"+o+"/"+this.tagEndChar;else if(e[o]instanceof Date)r+=this.buildTextValNode(e[o],o,"",t);else if("object"!=typeof e[o]){const i=this.isAttribute(o);if(i)n+=this.buildAttrPairStr(i,""+e[o]);else if(o===this.options.textNodeName){let t=this.options.tagValueProcessor(o,""+e[o]);r+=this.replaceEntitiesValue(t)}else r+=this.buildTextValNode(e[o],o,"",t)}else if(Array.isArray(e[o])){const n=e[o].length;let i="";for(let s=0;s<n;s++){const n=e[o][s];void 0===n||(null===n?"?"===o[0]?r+=this.indentate(t)+"<"+o+"?"+this.tagEndChar:r+=this.indentate(t)+"<"+o+"/"+this.tagEndChar:"object"==typeof n?this.options.oneListGroup?i+=this.j2x(n,t+1).val:i+=this.processTextOrObjNode(n,o,t):i+=this.buildTextValNode(n,o,"",t))}this.options.oneListGroup&&(i=this.buildObjectNode(i,o,"",t)),r+=i}else if(this.options.attributesGroupName&&o===this.options.attributesGroupName){const t=Object.keys(e[o]),r=t.length;for(let i=0;i<r;i++)n+=this.buildAttrPairStr(t[i],""+e[o][t[i]])}else r+=this.processTextOrObjNode(e[o],o,t);return{attrStr:n,val:r}},i.prototype.buildAttrPairStr=function(e,t){return t=this.options.attributeValueProcessor(e,""+t),t=this.replaceEntitiesValue(t),this.options.suppressBooleanAttributes&&"true"===t?" "+e:" "+e+'="'+t+'"'},i.prototype.buildObjectNode=function(e,t,n,r){if(""===e)return"?"===t[0]?this.indentate(r)+"<"+t+n+"?"+this.tagEndChar:this.indentate(r)+"<"+t+n+this.closeTag(t)+this.tagEndChar;{let o="</"+t+this.tagEndChar,i="";return"?"===t[0]&&(i="?",o=""),!n&&""!==n||-1!==e.indexOf("<")?!1!==this.options.commentPropName&&t===this.options.commentPropName&&0===i.length?this.indentate(r)+`\x3c!--${e}--\x3e`+this.newLine:this.indentate(r)+"<"+t+n+i+this.tagEndChar+e+this.indentate(r)+o:this.indentate(r)+"<"+t+n+i+">"+e+o}},i.prototype.closeTag=function(e){let t="";return-1!==this.options.unpairedTags.indexOf(e)?this.options.suppressUnpairedNode||(t="/"):t=this.options.suppressEmptyNode?"/":`></${e}`,t},i.prototype.buildTextValNode=function(e,t,n,r){if(!1!==this.options.cdataPropName&&t===this.options.cdataPropName)return this.indentate(r)+`<![CDATA[${e}]]>`+this.newLine;if(!1!==this.options.commentPropName&&t===this.options.commentPropName)return this.indentate(r)+`\x3c!--${e}--\x3e`+this.newLine;if("?"===t[0])return this.indentate(r)+"<"+t+n+"?"+this.tagEndChar;{let o=this.options.tagValueProcessor(t,e);return o=this.replaceEntitiesValue(o),""===o?this.indentate(r)+"<"+t+n+this.closeTag(t)+this.tagEndChar:this.indentate(r)+"<"+t+n+">"+o+"</"+t+this.tagEndChar}},i.prototype.replaceEntitiesValue=function(e){if(e&&e.length>0&&this.options.processEntities)for(let t=0;t<this.options.entities.length;t++){const n=this.options.entities[t];e=e.replace(n.regex,n.val)}return e},e.exports=i},6704:e=>{function t(e,s,a,u){let c="",l=!1;for(let f=0;f<e.length;f++){const h=e[f],d=n(h);if(void 0===d)continue;let p="";if(p=0===a.length?d:`${a}.${d}`,d===s.textNodeName){let e=h[d];o(p,s)||(e=s.tagValueProcessor(d,e),e=i(e,s)),l&&(c+=u),c+=e,l=!1;continue}if(d===s.cdataPropName){l&&(c+=u),c+=`<![CDATA[${h[d][0][s.textNodeName]}]]>`,l=!1;continue}if(d===s.commentPropName){c+=u+`\x3c!--${h[d][0][s.textNodeName]}--\x3e`,l=!0;continue}if("?"===d[0]){const e=r(h[":@"],s),t="?xml"===d?"":u;let n=h[d][0][s.textNodeName];n=0!==n.length?" "+n:"",c+=t+`<${d}${n}${e}?>`,l=!0;continue}let g=u;""!==g&&(g+=s.indentBy);const y=u+`<${d}${r(h[":@"],s)}`,v=t(h[d],s,p,g);-1!==s.unpairedTags.indexOf(d)?s.suppressUnpairedNode?c+=y+">":c+=y+"/>":v&&0!==v.length||!s.suppressEmptyNode?v&&v.endsWith(">")?c+=y+`>${v}${u}</${d}>`:(c+=y+">",v&&""!==u&&(v.includes("/>")||v.includes("</"))?c+=u+s.indentBy+v+u:c+=v,c+=`</${d}>`):c+=y+"/>",l=!0}return c}function n(e){const t=Object.keys(e);for(let n=0;n<t.length;n++){const r=t[n];if(e.hasOwnProperty(r)&&":@"!==r)return r}}function r(e,t){let n="";if(e&&!t.ignoreAttributes)for(let r in e){if(!e.hasOwnProperty(r))continue;let o=t.attributeValueProcessor(r,e[r]);o=i(o,t),!0===o&&t.suppressBooleanAttributes?n+=` ${r.substr(t.attributeNamePrefix.length)}`:n+=` ${r.substr(t.attributeNamePrefix.length)}="${o}"`}return n}function o(e,t){let n=(e=e.substr(0,e.length-t.textNodeName.length-1)).substr(e.lastIndexOf(".")+1);for(let r in t.stopNodes)if(t.stopNodes[r]===e||t.stopNodes[r]==="*."+n)return!0;return!1}function i(e,t){if(e&&e.length>0&&t.processEntities)for(let n=0;n<t.entities.length;n++){const r=t.entities[n];e=e.replace(r.regex,r.val)}return e}e.exports=function(e,n){let r="";return n.format&&n.indentBy.length>0&&(r="\n"),t(e,n,"",r)}},3770:(e,t,n)=>{const r=n(4056);function o(e,t){let n="";for(;t<e.length&&"'"!==e[t]&&'"'!==e[t];t++)n+=e[t];if(n=n.trim(),-1!==n.indexOf(" "))throw new Error("External entites are not supported");const r=e[t++];let o="";for(;t<e.length&&e[t]!==r;t++)o+=e[t];return[n,o,t]}function i(e,t){return"!"===e[t+1]&&"-"===e[t+2]&&"-"===e[t+3]}function s(e,t){return"!"===e[t+1]&&"E"===e[t+2]&&"N"===e[t+3]&&"T"===e[t+4]&&"I"===e[t+5]&&"T"===e[t+6]&&"Y"===e[t+7]}function a(e,t){return"!"===e[t+1]&&"E"===e[t+2]&&"L"===e[t+3]&&"E"===e[t+4]&&"M"===e[t+5]&&"E"===e[t+6]&&"N"===e[t+7]&&"T"===e[t+8]}function u(e,t){return"!"===e[t+1]&&"A"===e[t+2]&&"T"===e[t+3]&&"T"===e[t+4]&&"L"===e[t+5]&&"I"===e[t+6]&&"S"===e[t+7]&&"T"===e[t+8]}function c(e,t){return"!"===e[t+1]&&"N"===e[t+2]&&"O"===e[t+3]&&"T"===e[t+4]&&"A"===e[t+5]&&"T"===e[t+6]&&"I"===e[t+7]&&"O"===e[t+8]&&"N"===e[t+9]}function l(e){if(r.isName(e))return e;throw new Error(`Invalid entity name ${e}`)}e.exports=function(e,t){const n={};if("O"!==e[t+3]||"C"!==e[t+4]||"T"!==e[t+5]||"Y"!==e[t+6]||"P"!==e[t+7]||"E"!==e[t+8])throw new Error("Invalid Tag instead of DOCTYPE");{t+=9;let r=1,f=!1,h=!1,d="";for(;t<e.length;t++)if("<"!==e[t]||h)if(">"===e[t]){if(h?"-"===e[t-1]&&"-"===e[t-2]&&(h=!1,r--):r--,0===r)break}else"["===e[t]?f=!0:d+=e[t];else{if(f&&s(e,t))t+=7,[entityName,val,t]=o(e,t+1),-1===val.indexOf("&")&&(n[l(entityName)]={regx:RegExp(`&${entityName};`,"g"),val});else if(f&&a(e,t))t+=8;else if(f&&u(e,t))t+=8;else if(f&&c(e,t))t+=9;else{if(!i)throw new Error("Invalid DOCTYPE");h=!0}r++,d=""}if(0!==r)throw new Error("Unclosed DOCTYPE")}return{entities:n,i:t}}},4238:(e,t)=>{const n={preserveOrder:!1,attributeNamePrefix:"@_",attributesGroupName:!1,textNodeName:"#text",ignoreAttributes:!0,removeNSPrefix:!1,allowBooleanAttributes:!1,parseTagValue:!0,parseAttributeValue:!1,trimValues:!0,cdataPropName:!1,numberParseOptions:{hex:!0,leadingZeros:!0,eNotation:!0},tagValueProcessor:function(e,t){return t},attributeValueProcessor:function(e,t){return t},stopNodes:[],alwaysCreateTextNode:!1,isArray:()=>!1,commentPropName:!1,unpairedTags:[],processEntities:!0,htmlEntities:!1,ignoreDeclaration:!1,ignorePiTags:!1,transformTagName:!1,transformAttributeName:!1,updateTag:function(e,t,n){return e}};t.buildOptions=function(e){return Object.assign({},n,e)},t.defaultOptions=n},2848:(e,t,n)=>{"use strict";const r=n(4056),o=n(4499),i=n(3770),s=n(5580);function a(e){const t=Object.keys(e);for(let n=0;n<t.length;n++){const r=t[n];this.lastEntities[r]={regex:new RegExp("&"+r+";","g"),val:e[r]}}}function u(e,t,n,r,o,i,s){if(void 0!==e&&(this.options.trimValues&&!r&&(e=e.trim()),e.length>0)){s||(e=this.replaceEntitiesValue(e));const r=this.options.tagValueProcessor(t,e,n,o,i);return null==r?e:typeof r!=typeof e||r!==e?r:this.options.trimValues||e.trim()===e?w(e,this.options.parseTagValue,this.options.numberParseOptions):e}}function c(e){if(this.options.removeNSPrefix){const t=e.split(":"),n="/"===e.charAt(0)?"/":"";if("xmlns"===t[0])return"";2===t.length&&(e=n+t[1])}return e}const l=new RegExp("([^\\s=]+)\\s*(=\\s*(['\"])([\\s\\S]*?)\\3)?","gm");function f(e,t,n){if(!this.options.ignoreAttributes&&"string"==typeof e){const n=r.getAllMatches(e,l),o=n.length,i={};for(let e=0;e<o;e++){const r=this.resolveNameSpace(n[e][1]);let o=n[e][4],s=this.options.attributeNamePrefix+r;if(r.length)if(this.options.transformAttributeName&&(s=this.options.transformAttributeName(s)),"__proto__"===s&&(s="#__proto__"),void 0!==o){this.options.trimValues&&(o=o.trim()),o=this.replaceEntitiesValue(o);const e=this.options.attributeValueProcessor(r,o,t);i[s]=null==e?o:typeof e!=typeof o||e!==o?e:w(o,this.options.parseAttributeValue,this.options.numberParseOptions)}else this.options.allowBooleanAttributes&&(i[s]=!0)}if(!Object.keys(i).length)return;if(this.options.attributesGroupName){const e={};return e[this.options.attributesGroupName]=i,e}return i}}const h=function(e){e=e.replace(/\r\n?/g,"\n");const t=new o("!xml");let n=t,r="",s="";for(let a=0;a<e.length;a++)if("<"===e[a])if("/"===e[a+1]){const t=v(e,">",a,"Closing Tag is not closed.");let o=e.substring(a+2,t).trim();if(this.options.removeNSPrefix){const e=o.indexOf(":");-1!==e&&(o=o.substr(e+1))}this.options.transformTagName&&(o=this.options.transformTagName(o)),n&&(r=this.saveTextToParentTag(r,n,s));const i=s.substring(s.lastIndexOf(".")+1);if(o&&-1!==this.options.unpairedTags.indexOf(o))throw new Error(`Unpaired tag can not be used as closing tag: </${o}>`);let u=0;i&&-1!==this.options.unpairedTags.indexOf(i)?(u=s.lastIndexOf(".",s.lastIndexOf(".")-1),this.tagsNodeStack.pop()):u=s.lastIndexOf("."),s=s.substring(0,u),n=this.tagsNodeStack.pop(),r="",a=t}else if("?"===e[a+1]){let t=m(e,a,!1,"?>");if(!t)throw new Error("Pi Tag is not closed.");if(r=this.saveTextToParentTag(r,n,s),this.options.ignoreDeclaration&&"?xml"===t.tagName||this.options.ignorePiTags);else{const e=new o(t.tagName);e.add(this.options.textNodeName,""),t.tagName!==t.tagExp&&t.attrExpPresent&&(e[":@"]=this.buildAttributesMap(t.tagExp,s,t.tagName)),this.addChild(n,e,s)}a=t.closeIndex+1}else if("!--"===e.substr(a+1,3)){const t=v(e,"--\x3e",a+4,"Comment is not closed.");if(this.options.commentPropName){const o=e.substring(a+4,t-2);r=this.saveTextToParentTag(r,n,s),n.add(this.options.commentPropName,[{[this.options.textNodeName]:o}])}a=t}else if("!D"===e.substr(a+1,2)){const t=i(e,a);this.docTypeEntities=t.entities,a=t.i}else if("!["===e.substr(a+1,2)){const t=v(e,"]]>",a,"CDATA is not closed.")-2,o=e.substring(a+9,t);r=this.saveTextToParentTag(r,n,s);let i=this.parseTextData(o,n.tagname,s,!0,!1,!0,!0);null==i&&(i=""),this.options.cdataPropName?n.add(this.options.cdataPropName,[{[this.options.textNodeName]:o}]):n.add(this.options.textNodeName,i),a=t+2}else{let i=m(e,a,this.options.removeNSPrefix),u=i.tagName;const c=i.rawTagName;let l=i.tagExp,f=i.attrExpPresent,h=i.closeIndex;this.options.transformTagName&&(u=this.options.transformTagName(u)),n&&r&&"!xml"!==n.tagname&&(r=this.saveTextToParentTag(r,n,s,!1));const d=n;if(d&&-1!==this.options.unpairedTags.indexOf(d.tagname)&&(n=this.tagsNodeStack.pop(),s=s.substring(0,s.lastIndexOf("."))),u!==t.tagname&&(s+=s?"."+u:u),this.isItStopNode(this.options.stopNodes,s,u)){let t="";if(l.length>0&&l.lastIndexOf("/")===l.length-1)a=i.closeIndex;else if(-1!==this.options.unpairedTags.indexOf(u))a=i.closeIndex;else{const n=this.readStopNodeData(e,c,h+1);if(!n)throw new Error(`Unexpected end of ${c}`);a=n.i,t=n.tagContent}const r=new o(u);u!==l&&f&&(r[":@"]=this.buildAttributesMap(l,s,u)),t&&(t=this.parseTextData(t,u,s,!0,f,!0,!0)),s=s.substr(0,s.lastIndexOf(".")),r.add(this.options.textNodeName,t),this.addChild(n,r,s)}else{if(l.length>0&&l.lastIndexOf("/")===l.length-1){"/"===u[u.length-1]?(u=u.substr(0,u.length-1),s=s.substr(0,s.length-1),l=u):l=l.substr(0,l.length-1),this.options.transformTagName&&(u=this.options.transformTagName(u));const e=new o(u);u!==l&&f&&(e[":@"]=this.buildAttributesMap(l,s,u)),this.addChild(n,e,s),s=s.substr(0,s.lastIndexOf("."))}else{const e=new o(u);this.tagsNodeStack.push(n),u!==l&&f&&(e[":@"]=this.buildAttributesMap(l,s,u)),this.addChild(n,e,s),n=e}r="",a=h}}else r+=e[a];return t.child};function d(e,t,n){const r=this.options.updateTag(t.tagname,n,t[":@"]);!1===r||("string"==typeof r?(t.tagname=r,e.addChild(t)):e.addChild(t))}const p=function(e){if(this.options.processEntities){for(let t in this.docTypeEntities){const n=this.docTypeEntities[t];e=e.replace(n.regx,n.val)}for(let t in this.lastEntities){const n=this.lastEntities[t];e=e.replace(n.regex,n.val)}if(this.options.htmlEntities)for(let t in this.htmlEntities){const n=this.htmlEntities[t];e=e.replace(n.regex,n.val)}e=e.replace(this.ampEntity.regex,this.ampEntity.val)}return e};function g(e,t,n,r){return e&&(void 0===r&&(r=0===Object.keys(t.child).length),void 0!==(e=this.parseTextData(e,t.tagname,n,!1,!!t[":@"]&&0!==Object.keys(t[":@"]).length,r))&&""!==e&&t.add(this.options.textNodeName,e),e=""),e}function y(e,t,n){const r="*."+n;for(const n in e){const o=e[n];if(r===o||t===o)return!0}return!1}function v(e,t,n,r){const o=e.indexOf(t,n);if(-1===o)throw new Error(r);return o+t.length-1}function m(e,t,n,r=">"){const o=function(e,t,n=">"){let r,o="";for(let i=t;i<e.length;i++){let t=e[i];if(r)t===r&&(r="");else if('"'===t||"'"===t)r=t;else if(t===n[0]){if(!n[1])return{data:o,index:i};if(e[i+1]===n[1])return{data:o,index:i}}else"\t"===t&&(t=" ");o+=t}}(e,t+1,r);if(!o)return;let i=o.data;const s=o.index,a=i.search(/\s/);let u=i,c=!0;-1!==a&&(u=i.substring(0,a),i=i.substring(a+1).trimStart());const l=u;if(n){const e=u.indexOf(":");-1!==e&&(u=u.substr(e+1),c=u!==o.data.substr(e+1))}return{tagName:u,tagExp:i,closeIndex:s,attrExpPresent:c,rawTagName:l}}function b(e,t,n){const r=n;let o=1;for(;n<e.length;n++)if("<"===e[n])if("/"===e[n+1]){const i=v(e,">",n,`${t} is not closed`);if(e.substring(n+2,i).trim()===t&&(o--,0===o))return{tagContent:e.substring(r,n),i};n=i}else if("?"===e[n+1])n=v(e,"?>",n+1,"StopNode is not closed.");else if("!--"===e.substr(n+1,3))n=v(e,"--\x3e",n+3,"StopNode is not closed.");else if("!["===e.substr(n+1,2))n=v(e,"]]>",n,"StopNode is not closed.")-2;else{const r=m(e,n,">");r&&((r&&r.tagName)===t&&"/"!==r.tagExp[r.tagExp.length-1]&&o++,n=r.closeIndex)}}function w(e,t,n){if(t&&"string"==typeof e){const t=e.trim();return"true"===t||"false"!==t&&s(e,n)}return r.isExist(e)?e:""}e.exports=class{constructor(e){this.options=e,this.currentNode=null,this.tagsNodeStack=[],this.docTypeEntities={},this.lastEntities={apos:{regex:/&(apos|#39|#x27);/g,val:"'"},gt:{regex:/&(gt|#62|#x3E);/g,val:">"},lt:{regex:/&(lt|#60|#x3C);/g,val:"<"},quot:{regex:/&(quot|#34|#x22);/g,val:'"'}},this.ampEntity={regex:/&(amp|#38|#x26);/g,val:"&"},this.htmlEntities={space:{regex:/&(nbsp|#160);/g,val:" "},cent:{regex:/&(cent|#162);/g,val:"¢"},pound:{regex:/&(pound|#163);/g,val:"£"},yen:{regex:/&(yen|#165);/g,val:"¥"},euro:{regex:/&(euro|#8364);/g,val:"€"},copyright:{regex:/&(copy|#169);/g,val:"©"},reg:{regex:/&(reg|#174);/g,val:"®"},inr:{regex:/&(inr|#8377);/g,val:"₹"}},this.addExternalEntities=a,this.parseXml=h,this.parseTextData=u,this.resolveNameSpace=c,this.buildAttributesMap=f,this.isItStopNode=y,this.replaceEntitiesValue=p,this.readStopNodeData=b,this.saveTextToParentTag=g,this.addChild=d}}},3281:(e,t,n)=>{const{buildOptions:r}=n(4238),o=n(2848),{prettify:i}=n(4416),s=n(3325);e.exports=class{constructor(e){this.externalEntities={},this.options=r(e)}parse(e,t){if("string"==typeof e);else{if(!e.toString)throw new Error("XML data is accepted in String or Bytes[] form.");e=e.toString()}if(t){!0===t&&(t={});const n=s.validate(e,t);if(!0!==n)throw Error(`${n.err.msg}:${n.err.line}:${n.err.col}`)}const n=new o(this.options);n.addExternalEntities(this.externalEntities);const r=n.parseXml(e);return this.options.preserveOrder||void 0===r?r:i(r,this.options)}addEntity(e,t){if(-1!==t.indexOf("&"))throw new Error("Entity value can't have '&'");if(-1!==e.indexOf("&")||-1!==e.indexOf(";"))throw new Error("An entity must be set without '&' and ';'. Eg. use '#xD' for '&#xD;'");if("&"===t)throw new Error("An entity with value '&' is not permitted");this.externalEntities[e]=t}}},4416:(e,t)=>{"use strict";function n(e,t,s){let a;const u={};for(let c=0;c<e.length;c++){const l=e[c],f=r(l);let h="";if(h=void 0===s?f:s+"."+f,f===t.textNodeName)void 0===a?a=l[f]:a+=""+l[f];else{if(void 0===f)continue;if(l[f]){let e=n(l[f],t,h);const r=i(e,t);l[":@"]?o(e,l[":@"],h,t):1!==Object.keys(e).length||void 0===e[t.textNodeName]||t.alwaysCreateTextNode?0===Object.keys(e).length&&(t.alwaysCreateTextNode?e[t.textNodeName]="":e=""):e=e[t.textNodeName],void 0!==u[f]&&u.hasOwnProperty(f)?(Array.isArray(u[f])||(u[f]=[u[f]]),u[f].push(e)):t.isArray(f,h,r)?u[f]=[e]:u[f]=e}}}return"string"==typeof a?a.length>0&&(u[t.textNodeName]=a):void 0!==a&&(u[t.textNodeName]=a),u}function r(e){const t=Object.keys(e);for(let e=0;e<t.length;e++){const n=t[e];if(":@"!==n)return n}}function o(e,t,n,r){if(t){const o=Object.keys(t),i=o.length;for(let s=0;s<i;s++){const i=o[s];r.isArray(i,n+"."+i,!0,!0)?e[i]=[t[i]]:e[i]=t[i]}}}function i(e,t){const{textNodeName:n}=t,r=Object.keys(e).length;return 0===r||!(1!==r||!e[n]&&"boolean"!=typeof e[n]&&0!==e[n])}t.prettify=function(e,t){return n(e,t)}},4499:e=>{"use strict";e.exports=class{constructor(e){this.tagname=e,this.child=[],this[":@"]={}}add(e,t){"__proto__"===e&&(e="#__proto__"),this.child.push({[e]:t})}addChild(e){"__proto__"===e.tagname&&(e.tagname="#__proto__"),e[":@"]&&Object.keys(e[":@"]).length>0?this.child.push({[e.tagname]:e.child,":@":e[":@"]}):this.child.push({[e.tagname]:e.child})}}},7795:e=>{"use strict";var t=Object.prototype.toString,n=Math.max,r=function(e,t){for(var n=[],r=0;r<e.length;r+=1)n[r]=e[r];for(var o=0;o<t.length;o+=1)n[o+e.length]=t[o];return n};e.exports=function(e){var o=this;if("function"!=typeof o||"[object Function]"!==t.apply(o))throw new TypeError("Function.prototype.bind called on incompatible "+o);for(var i,s=function(e,t){for(var n=[],r=1,o=0;r<e.length;r+=1,o+=1)n[o]=e[r];return n}(arguments),a=n(0,o.length-s.length),u=[],c=0;c<a;c++)u[c]="$"+c;if(i=Function("binder","return function ("+function(e,t){for(var n="",r=0;r<e.length;r+=1)n+=e[r],r+1<e.length&&(n+=",");return n}(u)+"){ return binder.apply(this,arguments); }")((function(){if(this instanceof i){var t=o.apply(this,r(s,arguments));return Object(t)===t?t:this}return o.apply(e,r(s,arguments))})),o.prototype){var l=function(){};l.prototype=o.prototype,i.prototype=new l,l.prototype=null}return i}},4090:(e,t,n)=>{"use strict";var r=n(7795);e.exports=Function.prototype.bind||r},7286:(e,t,n)=>{"use strict";var r,o=n(2321),i=n(9654),s=n(8205),a=n(2976),u=n(8342),c=n(5408),l=n(2885),f=Function,h=function(e){try{return f('"use strict"; return ('+e+").constructor;")()}catch(e){}},d=Object.getOwnPropertyDescriptor;if(d)try{d({},"")}catch(e){d=null}var p=function(){throw new c},g=d?function(){try{return p}catch(e){try{return d(arguments,"callee").get}catch(e){return p}}}():p,y=n(2636)(),v=n(8486)(),m=Object.getPrototypeOf||(v?function(e){return e.__proto__}:null),b={},w="undefined"!=typeof Uint8Array&&m?m(Uint8Array):r,S={__proto__:null,"%AggregateError%":"undefined"==typeof AggregateError?r:AggregateError,"%Array%":Array,"%ArrayBuffer%":"undefined"==typeof ArrayBuffer?r:ArrayBuffer,"%ArrayIteratorPrototype%":y&&m?m([][Symbol.iterator]()):r,"%AsyncFromSyncIteratorPrototype%":r,"%AsyncFunction%":b,"%AsyncGenerator%":b,"%AsyncGeneratorFunction%":b,"%AsyncIteratorPrototype%":b,"%Atomics%":"undefined"==typeof Atomics?r:Atomics,"%BigInt%":"undefined"==typeof BigInt?r:BigInt,"%BigInt64Array%":"undefined"==typeof BigInt64Array?r:BigInt64Array,"%BigUint64Array%":"undefined"==typeof BigUint64Array?r:BigUint64Array,"%Boolean%":Boolean,"%DataView%":"undefined"==typeof DataView?r:DataView,"%Date%":Date,"%decodeURI%":decodeURI,"%decodeURIComponent%":decodeURIComponent,"%encodeURI%":encodeURI,"%encodeURIComponent%":encodeURIComponent,"%Error%":o,"%eval%":eval,"%EvalError%":i,"%Float32Array%":"undefined"==typeof Float32Array?r:Float32Array,"%Float64Array%":"undefined"==typeof Float64Array?r:Float64Array,"%FinalizationRegistry%":"undefined"==typeof FinalizationRegistry?r:FinalizationRegistry,"%Function%":f,"%GeneratorFunction%":b,"%Int8Array%":"undefined"==typeof Int8Array?r:Int8Array,"%Int16Array%":"undefined"==typeof Int16Array?r:Int16Array,"%Int32Array%":"undefined"==typeof Int32Array?r:Int32Array,"%isFinite%":isFinite,"%isNaN%":isNaN,"%IteratorPrototype%":y&&m?m(m([][Symbol.iterator]())):r,"%JSON%":"object"==typeof JSON?JSON:r,"%Map%":"undefined"==typeof Map?r:Map,"%MapIteratorPrototype%":"undefined"!=typeof Map&&y&&m?m((new Map)[Symbol.iterator]()):r,"%Math%":Math,"%Number%":Number,"%Object%":Object,"%parseFloat%":parseFloat,"%parseInt%":parseInt,"%Promise%":"undefined"==typeof Promise?r:Promise,"%Proxy%":"undefined"==typeof Proxy?r:Proxy,"%RangeError%":s,"%ReferenceError%":a,"%Reflect%":"undefined"==typeof Reflect?r:Reflect,"%RegExp%":RegExp,"%Set%":"undefined"==typeof Set?r:Set,"%SetIteratorPrototype%":"undefined"!=typeof Set&&y&&m?m((new Set)[Symbol.iterator]()):r,"%SharedArrayBuffer%":"undefined"==typeof SharedArrayBuffer?r:SharedArrayBuffer,"%String%":String,"%StringIteratorPrototype%":y&&m?m(""[Symbol.iterator]()):r,"%Symbol%":y?Symbol:r,"%SyntaxError%":u,"%ThrowTypeError%":g,"%TypedArray%":w,"%TypeError%":c,"%Uint8Array%":"undefined"==typeof Uint8Array?r:Uint8Array,"%Uint8ClampedArray%":"undefined"==typeof Uint8ClampedArray?r:Uint8ClampedArray,"%Uint16Array%":"undefined"==typeof Uint16Array?r:Uint16Array,"%Uint32Array%":"undefined"==typeof Uint32Array?r:Uint32Array,"%URIError%":l,"%WeakMap%":"undefined"==typeof WeakMap?r:WeakMap,"%WeakRef%":"undefined"==typeof WeakRef?r:WeakRef,"%WeakSet%":"undefined"==typeof WeakSet?r:WeakSet};if(m)try{null.error}catch(e){var _=m(m(e));S["%Error.prototype%"]=_}var A=function e(t){var n;if("%AsyncFunction%"===t)n=h("async function () {}");else if("%GeneratorFunction%"===t)n=h("function* () {}");else if("%AsyncGeneratorFunction%"===t)n=h("async function* () {}");else if("%AsyncGenerator%"===t){var r=e("%AsyncGeneratorFunction%");r&&(n=r.prototype)}else if("%AsyncIteratorPrototype%"===t){var o=e("%AsyncGenerator%");o&&m&&(n=m(o.prototype))}return S[t]=n,n},E={__proto__:null,"%ArrayBufferPrototype%":["ArrayBuffer","prototype"],"%ArrayPrototype%":["Array","prototype"],"%ArrayProto_entries%":["Array","prototype","entries"],"%ArrayProto_forEach%":["Array","prototype","forEach"],"%ArrayProto_keys%":["Array","prototype","keys"],"%ArrayProto_values%":["Array","prototype","values"],"%AsyncFunctionPrototype%":["AsyncFunction","prototype"],"%AsyncGenerator%":["AsyncGeneratorFunction","prototype"],"%AsyncGeneratorPrototype%":["AsyncGeneratorFunction","prototype","prototype"],"%BooleanPrototype%":["Boolean","prototype"],"%DataViewPrototype%":["DataView","prototype"],"%DatePrototype%":["Date","prototype"],"%ErrorPrototype%":["Error","prototype"],"%EvalErrorPrototype%":["EvalError","prototype"],"%Float32ArrayPrototype%":["Float32Array","prototype"],"%Float64ArrayPrototype%":["Float64Array","prototype"],"%FunctionPrototype%":["Function","prototype"],"%Generator%":["GeneratorFunction","prototype"],"%GeneratorPrototype%":["GeneratorFunction","prototype","prototype"],"%Int8ArrayPrototype%":["Int8Array","prototype"],"%Int16ArrayPrototype%":["Int16Array","prototype"],"%Int32ArrayPrototype%":["Int32Array","prototype"],"%JSONParse%":["JSON","parse"],"%JSONStringify%":["JSON","stringify"],"%MapPrototype%":["Map","prototype"],"%NumberPrototype%":["Number","prototype"],"%ObjectPrototype%":["Object","prototype"],"%ObjProto_toString%":["Object","prototype","toString"],"%ObjProto_valueOf%":["Object","prototype","valueOf"],"%PromisePrototype%":["Promise","prototype"],"%PromiseProto_then%":["Promise","prototype","then"],"%Promise_all%":["Promise","all"],"%Promise_reject%":["Promise","reject"],"%Promise_resolve%":["Promise","resolve"],"%RangeErrorPrototype%":["RangeError","prototype"],"%ReferenceErrorPrototype%":["ReferenceError","prototype"],"%RegExpPrototype%":["RegExp","prototype"],"%SetPrototype%":["Set","prototype"],"%SharedArrayBufferPrototype%":["SharedArrayBuffer","prototype"],"%StringPrototype%":["String","prototype"],"%SymbolPrototype%":["Symbol","prototype"],"%SyntaxErrorPrototype%":["SyntaxError","prototype"],"%TypedArrayPrototype%":["TypedArray","prototype"],"%TypeErrorPrototype%":["TypeError","prototype"],"%Uint8ArrayPrototype%":["Uint8Array","prototype"],"%Uint8ClampedArrayPrototype%":["Uint8ClampedArray","prototype"],"%Uint16ArrayPrototype%":["Uint16Array","prototype"],"%Uint32ArrayPrototype%":["Uint32Array","prototype"],"%URIErrorPrototype%":["URIError","prototype"],"%WeakMapPrototype%":["WeakMap","prototype"],"%WeakSetPrototype%":["WeakSet","prototype"]},P=n(4090),x=n(2196),O=P.call(Function.call,Array.prototype.concat),I=P.call(Function.apply,Array.prototype.splice),C=P.call(Function.call,String.prototype.replace),T=P.call(Function.call,String.prototype.slice),k=P.call(Function.call,RegExp.prototype.exec),U=/[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g,R=/\\(\\)?/g,j=function(e,t){var n,r=e;if(x(E,r)&&(r="%"+(n=E[r])[0]+"%"),x(S,r)){var o=S[r];if(o===b&&(o=A(r)),void 0===o&&!t)throw new c("intrinsic "+e+" exists, but is not available. Please file an issue!");return{alias:n,name:r,value:o}}throw new u("intrinsic "+e+" does not exist!")};e.exports=function(e,t){if("string"!=typeof e||0===e.length)throw new c("intrinsic name must be a non-empty string");if(arguments.length>1&&"boolean"!=typeof t)throw new c('"allowMissing" argument must be a boolean');if(null===k(/^%?[^%]*%?$/,e))throw new u("`%` may not be present anywhere but at the beginning and end of the intrinsic name");var n=function(e){var t=T(e,0,1),n=T(e,-1);if("%"===t&&"%"!==n)throw new u("invalid intrinsic syntax, expected closing `%`");if("%"===n&&"%"!==t)throw new u("invalid intrinsic syntax, expected opening `%`");var r=[];return C(e,U,(function(e,t,n,o){r[r.length]=n?C(o,R,"$1"):t||e})),r}(e),r=n.length>0?n[0]:"",o=j("%"+r+"%",t),i=o.name,s=o.value,a=!1,l=o.alias;l&&(r=l[0],I(n,O([0,1],l)));for(var f=1,h=!0;f<n.length;f+=1){var p=n[f],g=T(p,0,1),y=T(p,-1);if(('"'===g||"'"===g||"`"===g||'"'===y||"'"===y||"`"===y)&&g!==y)throw new u("property names with quotes must have matching quotes");if("constructor"!==p&&h||(a=!0),x(S,i="%"+(r+="."+p)+"%"))s=S[i];else if(null!=s){if(!(p in s)){if(!t)throw new c("base intrinsic for "+e+" exists, but the property is not available.");return}if(d&&f+1>=n.length){var v=d(s,p);s=(h=!!v)&&"get"in v&&!("originalValue"in v.get)?v.get:s[p]}else h=x(s,p),s=s[p];h&&!a&&(S[i]=s)}}return s}},326:(e,t,n)=>{"use strict";var r=n(7286)("%Object.getOwnPropertyDescriptor%",!0);if(r)try{r([],"length")}catch(e){r=null}e.exports=r},1181:(e,t,n)=>{"use strict";var r=n(999),o=function(){return!!r};o.hasArrayLengthDefineBug=function(){if(!r)return null;try{return 1!==r([],"length",{value:1}).length}catch(e){return!0}},e.exports=o},8486:e=>{"use strict";var t={__proto__:null,foo:{}},n=Object;e.exports=function(){return{__proto__:t}.foo===t.foo&&!(t instanceof n)}},2636:(e,t,n)=>{"use strict";var r="undefined"!=typeof Symbol&&Symbol,o=n(6679);e.exports=function(){return"function"==typeof r&&"function"==typeof Symbol&&"symbol"==typeof r("foo")&&"symbol"==typeof Symbol("bar")&&o()}},6679:e=>{"use strict";e.exports=function(){if("function"!=typeof Symbol||"function"!=typeof Object.getOwnPropertySymbols)return!1;if("symbol"==typeof Symbol.iterator)return!0;var e={},t=Symbol("test"),n=Object(t);if("string"==typeof t)return!1;if("[object Symbol]"!==Object.prototype.toString.call(t))return!1;if("[object Symbol]"!==Object.prototype.toString.call(n))return!1;for(t in e[t]=42,e)return!1;if("function"==typeof Object.keys&&0!==Object.keys(e).length)return!1;if("function"==typeof Object.getOwnPropertyNames&&0!==Object.getOwnPropertyNames(e).length)return!1;var r=Object.getOwnPropertySymbols(e);if(1!==r.length||r[0]!==t)return!1;if(!Object.prototype.propertyIsEnumerable.call(e,t))return!1;if("function"==typeof Object.getOwnPropertyDescriptor){var o=Object.getOwnPropertyDescriptor(e,t);if(42!==o.value||!0!==o.enumerable)return!1}return!0}},2196:(e,t,n)=>{"use strict";var r=Function.prototype.call,o=Object.prototype.hasOwnProperty,i=n(4090);e.exports=i.call(r,o)},2333:(e,t)=>{t.read=function(e,t,n,r,o){var i,s,a=8*o-r-1,u=(1<<a)-1,c=u>>1,l=-7,f=n?o-1:0,h=n?-1:1,d=e[t+f];for(f+=h,i=d&(1<<-l)-1,d>>=-l,l+=a;l>0;i=256*i+e[t+f],f+=h,l-=8);for(s=i&(1<<-l)-1,i>>=-l,l+=r;l>0;s=256*s+e[t+f],f+=h,l-=8);if(0===i)i=1-c;else{if(i===u)return s?NaN:1/0*(d?-1:1);s+=Math.pow(2,r),i-=c}return(d?-1:1)*s*Math.pow(2,i-r)},t.write=function(e,t,n,r,o,i){var s,a,u,c=8*i-o-1,l=(1<<c)-1,f=l>>1,h=23===o?Math.pow(2,-24)-Math.pow(2,-77):0,d=r?0:i-1,p=r?1:-1,g=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(a=isNaN(t)?1:0,s=l):(s=Math.floor(Math.log(t)/Math.LN2),t*(u=Math.pow(2,-s))<1&&(s--,u*=2),(t+=s+f>=1?h/u:h*Math.pow(2,1-f))*u>=2&&(s++,u/=2),s+f>=l?(a=0,s=l):s+f>=1?(a=(t*u-1)*Math.pow(2,o),s+=f):(a=t*Math.pow(2,f-1)*Math.pow(2,o),s=0));o>=8;e[n+d]=255&a,d+=p,a/=256,o-=8);for(s=s<<o|a,c+=o;c>0;e[n+d]=255&s,d+=p,s/=256,c-=8);e[n+d-p]|=128*g}},7906:e=>{var t={}.toString;e.exports=Array.isArray||function(e){return"[object Array]"==t.call(e)}},2405:(e,t,n)=>{e.exports=self.fetch||(self.fetch=n(4677).default||n(4677))},2034:(e,t,n)=>{var r,o,i;void 0===(o="function"==typeof(r=i=function(){function e(){for(var e=0,t={};e<arguments.length;e++){var n=arguments[e];for(var r in n)t[r]=n[r]}return t}function t(e){return e.replace(/(%[0-9A-Z]{2})+/g,decodeURIComponent)}return function n(r){function o(){}function i(t,n,i){if("undefined"!=typeof document){"number"==typeof(i=e({path:"/"},o.defaults,i)).expires&&(i.expires=new Date(1*new Date+864e5*i.expires)),i.expires=i.expires?i.expires.toUTCString():"";try{var s=JSON.stringify(n);/^[\{\[]/.test(s)&&(n=s)}catch(e){}n=r.write?r.write(n,t):encodeURIComponent(String(n)).replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g,decodeURIComponent),t=encodeURIComponent(String(t)).replace(/%(23|24|26|2B|5E|60|7C)/g,decodeURIComponent).replace(/[\(\)]/g,escape);var a="";for(var u in i)i[u]&&(a+="; "+u,!0!==i[u]&&(a+="="+i[u].split(";")[0]));return document.cookie=t+"="+n+a}}function s(e,n){if("undefined"!=typeof document){for(var o={},i=document.cookie?document.cookie.split("; "):[],s=0;s<i.length;s++){var a=i[s].split("="),u=a.slice(1).join("=");n||'"'!==u.charAt(0)||(u=u.slice(1,-1));try{var c=t(a[0]);if(u=(r.read||r)(u,c)||t(u),n)try{u=JSON.parse(u)}catch(e){}if(o[c]=u,e===c)break}catch(e){}}return e?o[e]:o}}return o.set=i,o.get=function(e){return s(e,!1)},o.getJSON=function(e){return s(e,!0)},o.remove=function(t,n){i(t,"",e(n,{expires:-1}))},o.defaults={},o.withConverter=n,o}((function(){}))})?r.call(t,n,t,e):r)||(e.exports=o),e.exports=i()},9500:(e,t,n)=>{var r="function"==typeof Map&&Map.prototype,o=Object.getOwnPropertyDescriptor&&r?Object.getOwnPropertyDescriptor(Map.prototype,"size"):null,i=r&&o&&"function"==typeof o.get?o.get:null,s=r&&Map.prototype.forEach,a="function"==typeof Set&&Set.prototype,u=Object.getOwnPropertyDescriptor&&a?Object.getOwnPropertyDescriptor(Set.prototype,"size"):null,c=a&&u&&"function"==typeof u.get?u.get:null,l=a&&Set.prototype.forEach,f="function"==typeof WeakMap&&WeakMap.prototype?WeakMap.prototype.has:null,h="function"==typeof WeakSet&&WeakSet.prototype?WeakSet.prototype.has:null,d="function"==typeof WeakRef&&WeakRef.prototype?WeakRef.prototype.deref:null,p=Boolean.prototype.valueOf,g=Object.prototype.toString,y=Function.prototype.toString,v=String.prototype.match,m=String.prototype.slice,b=String.prototype.replace,w=String.prototype.toUpperCase,S=String.prototype.toLowerCase,_=RegExp.prototype.test,A=Array.prototype.concat,E=Array.prototype.join,P=Array.prototype.slice,x=Math.floor,O="function"==typeof BigInt?BigInt.prototype.valueOf:null,I=Object.getOwnPropertySymbols,C="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?Symbol.prototype.toString:null,T="function"==typeof Symbol&&"object"==typeof Symbol.iterator,k="function"==typeof Symbol&&Symbol.toStringTag&&(Symbol.toStringTag,1)?Symbol.toStringTag:null,U=Object.prototype.propertyIsEnumerable,R=("function"==typeof Reflect?Reflect.getPrototypeOf:Object.getPrototypeOf)||([].__proto__===Array.prototype?function(e){return e.__proto__}:null);function j(e,t){if(e===1/0||e===-1/0||e!=e||e&&e>-1e3&&e<1e3||_.call(/e/,t))return t;var n=/[0-9](?=(?:[0-9]{3})+(?![0-9]))/g;if("number"==typeof e){var r=e<0?-x(-e):x(e);if(r!==e){var o=String(r),i=m.call(t,o.length+1);return b.call(o,n,"$&_")+"."+b.call(b.call(i,/([0-9]{3})/g,"$&_"),/_$/,"")}}return b.call(t,n,"$&_")}var M=n(3260),N=M.custom,D=q(N)?N:null;function F(e,t,n){var r="double"===(n.quoteStyle||t)?'"':"'";return r+e+r}function L(e){return b.call(String(e),/"/g,"&quot;")}function B(e){return!("[object Array]"!==H(e)||k&&"object"==typeof e&&k in e)}function V(e){return!("[object RegExp]"!==H(e)||k&&"object"==typeof e&&k in e)}function q(e){if(T)return e&&"object"==typeof e&&e instanceof Symbol;if("symbol"==typeof e)return!0;if(!e||"object"!=typeof e||!C)return!1;try{return C.call(e),!0}catch(e){}return!1}e.exports=function e(t,r,o,a){var u=r||{};if(W(u,"quoteStyle")&&"single"!==u.quoteStyle&&"double"!==u.quoteStyle)throw new TypeError('option "quoteStyle" must be "single" or "double"');if(W(u,"maxStringLength")&&("number"==typeof u.maxStringLength?u.maxStringLength<0&&u.maxStringLength!==1/0:null!==u.maxStringLength))throw new TypeError('option "maxStringLength", if provided, must be a positive integer, Infinity, or `null`');var g=!W(u,"customInspect")||u.customInspect;if("boolean"!=typeof g&&"symbol"!==g)throw new TypeError("option \"customInspect\", if provided, must be `true`, `false`, or `'symbol'`");if(W(u,"indent")&&null!==u.indent&&"\t"!==u.indent&&!(parseInt(u.indent,10)===u.indent&&u.indent>0))throw new TypeError('option "indent" must be "\\t", an integer > 0, or `null`');if(W(u,"numericSeparator")&&"boolean"!=typeof u.numericSeparator)throw new TypeError('option "numericSeparator", if provided, must be `true` or `false`');var w=u.numericSeparator;if(void 0===t)return"undefined";if(null===t)return"null";if("boolean"==typeof t)return t?"true":"false";if("string"==typeof t)return G(t,u);if("number"==typeof t){if(0===t)return 1/0/t>0?"0":"-0";var _=String(t);return w?j(t,_):_}if("bigint"==typeof t){var x=String(t)+"n";return w?j(t,x):x}var I=void 0===u.depth?5:u.depth;if(void 0===o&&(o=0),o>=I&&I>0&&"object"==typeof t)return B(t)?"[Array]":"[Object]";var N,z=function(e,t){var n;if("\t"===e.indent)n="\t";else{if(!("number"==typeof e.indent&&e.indent>0))return null;n=E.call(Array(e.indent+1)," ")}return{base:n,prev:E.call(Array(t+1),n)}}(u,o);if(void 0===a)a=[];else if(K(a,t)>=0)return"[Circular]";function $(t,n,r){if(n&&(a=P.call(a)).push(n),r){var i={depth:u.depth};return W(u,"quoteStyle")&&(i.quoteStyle=u.quoteStyle),e(t,i,o+1,a)}return e(t,u,o+1,a)}if("function"==typeof t&&!V(t)){var ee=function(e){if(e.name)return e.name;var t=v.call(y.call(e),/^function\s*([\w$]+)/);return t?t[1]:null}(t),te=X(t,$);return"[Function"+(ee?": "+ee:" (anonymous)")+"]"+(te.length>0?" { "+E.call(te,", ")+" }":"")}if(q(t)){var ne=T?b.call(String(t),/^(Symbol\(.*\))_[^)]*$/,"$1"):C.call(t);return"object"!=typeof t||T?ne:Y(ne)}if((N=t)&&"object"==typeof N&&("undefined"!=typeof HTMLElement&&N instanceof HTMLElement||"string"==typeof N.nodeName&&"function"==typeof N.getAttribute)){for(var re="<"+S.call(String(t.nodeName)),oe=t.attributes||[],ie=0;ie<oe.length;ie++)re+=" "+oe[ie].name+"="+F(L(oe[ie].value),"double",u);return re+=">",t.childNodes&&t.childNodes.length&&(re+="..."),re+"</"+S.call(String(t.nodeName))+">"}if(B(t)){if(0===t.length)return"[]";var se=X(t,$);return z&&!function(e){for(var t=0;t<e.length;t++)if(K(e[t],"\n")>=0)return!1;return!0}(se)?"["+Q(se,z)+"]":"[ "+E.call(se,", ")+" ]"}if(function(e){return!("[object Error]"!==H(e)||k&&"object"==typeof e&&k in e)}(t)){var ae=X(t,$);return"cause"in Error.prototype||!("cause"in t)||U.call(t,"cause")?0===ae.length?"["+String(t)+"]":"{ ["+String(t)+"] "+E.call(ae,", ")+" }":"{ ["+String(t)+"] "+E.call(A.call("[cause]: "+$(t.cause),ae),", ")+" }"}if("object"==typeof t&&g){if(D&&"function"==typeof t[D]&&M)return M(t,{depth:I-o});if("symbol"!==g&&"function"==typeof t.inspect)return t.inspect()}if(function(e){if(!i||!e||"object"!=typeof e)return!1;try{i.call(e);try{c.call(e)}catch(e){return!0}return e instanceof Map}catch(e){}return!1}(t)){var ue=[];return s&&s.call(t,(function(e,n){ue.push($(n,t,!0)+" => "+$(e,t))})),Z("Map",i.call(t),ue,z)}if(function(e){if(!c||!e||"object"!=typeof e)return!1;try{c.call(e);try{i.call(e)}catch(e){return!0}return e instanceof Set}catch(e){}return!1}(t)){var ce=[];return l&&l.call(t,(function(e){ce.push($(e,t))})),Z("Set",c.call(t),ce,z)}if(function(e){if(!f||!e||"object"!=typeof e)return!1;try{f.call(e,f);try{h.call(e,h)}catch(e){return!0}return e instanceof WeakMap}catch(e){}return!1}(t))return J("WeakMap");if(function(e){if(!h||!e||"object"!=typeof e)return!1;try{h.call(e,h);try{f.call(e,f)}catch(e){return!0}return e instanceof WeakSet}catch(e){}return!1}(t))return J("WeakSet");if(function(e){if(!d||!e||"object"!=typeof e)return!1;try{return d.call(e),!0}catch(e){}return!1}(t))return J("WeakRef");if(function(e){return!("[object Number]"!==H(e)||k&&"object"==typeof e&&k in e)}(t))return Y($(Number(t)));if(function(e){if(!e||"object"!=typeof e||!O)return!1;try{return O.call(e),!0}catch(e){}return!1}(t))return Y($(O.call(t)));if(function(e){return!("[object Boolean]"!==H(e)||k&&"object"==typeof e&&k in e)}(t))return Y(p.call(t));if(function(e){return!("[object String]"!==H(e)||k&&"object"==typeof e&&k in e)}(t))return Y($(String(t)));if("undefined"!=typeof window&&t===window)return"{ [object Window] }";if(t===n.g)return"{ [object globalThis] }";if(!function(e){return!("[object Date]"!==H(e)||k&&"object"==typeof e&&k in e)}(t)&&!V(t)){var le=X(t,$),fe=R?R(t)===Object.prototype:t instanceof Object||t.constructor===Object,he=t instanceof Object?"":"null prototype",de=!fe&&k&&Object(t)===t&&k in t?m.call(H(t),8,-1):he?"Object":"",pe=(fe||"function"!=typeof t.constructor?"":t.constructor.name?t.constructor.name+" ":"")+(de||he?"["+E.call(A.call([],de||[],he||[]),": ")+"] ":"");return 0===le.length?pe+"{}":z?pe+"{"+Q(le,z)+"}":pe+"{ "+E.call(le,", ")+" }"}return String(t)};var z=Object.prototype.hasOwnProperty||function(e){return e in this};function W(e,t){return z.call(e,t)}function H(e){return g.call(e)}function K(e,t){if(e.indexOf)return e.indexOf(t);for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1}function G(e,t){if(e.length>t.maxStringLength){var n=e.length-t.maxStringLength,r="... "+n+" more character"+(n>1?"s":"");return G(m.call(e,0,t.maxStringLength),t)+r}return F(b.call(b.call(e,/(['\\])/g,"\\$1"),/[\x00-\x1f]/g,$),"single",t)}function $(e){var t=e.charCodeAt(0),n={8:"b",9:"t",10:"n",12:"f",13:"r"}[t];return n?"\\"+n:"\\x"+(t<16?"0":"")+w.call(t.toString(16))}function Y(e){return"Object("+e+")"}function J(e){return e+" { ? }"}function Z(e,t,n,r){return e+" ("+t+") {"+(r?Q(n,r):E.call(n,", "))+"}"}function Q(e,t){if(0===e.length)return"";var n="\n"+t.prev+t.base;return n+E.call(e,","+n)+"\n"+t.prev}function X(e,t){var n=B(e),r=[];if(n){r.length=e.length;for(var o=0;o<e.length;o++)r[o]=W(e,o)?t(e[o],e):""}var i,s="function"==typeof I?I(e):[];if(T){i={};for(var a=0;a<s.length;a++)i["$"+s[a]]=s[a]}for(var u in e)W(e,u)&&(n&&String(Number(u))===u&&u<e.length||T&&i["$"+u]instanceof Symbol||(_.call(/[^\w$]/,u)?r.push(t(u,e)+": "+t(e[u],e)):r.push(u+": "+t(e[u],e))));if("function"==typeof I)for(var c=0;c<s.length;c++)U.call(e,s[c])&&r.push("["+t(s[c])+"]: "+t(e[s[c]],e));return r}},7669:(e,t,n)=>{"use strict";var r=n(7286),o=n(5195),i=n(1181)(),s=n(326),a=n(5408),u=r("%Math.floor%");e.exports=function(e,t){if("function"!=typeof e)throw new a("`fn` is not a function");if("number"!=typeof t||t<0||t>4294967295||u(t)!==t)throw new a("`length` must be a positive 32-bit integer");var n=arguments.length>2&&!!arguments[2],r=!0,c=!0;if("length"in e&&s){var l=s(e,"length");l&&!l.configurable&&(r=!1),l&&!l.writable&&(c=!1)}return(r||c||!n)&&(i?o(e,"length",t,!0,!0):o(e,"length",t)),e}},4294:(e,t,n)=>{"use strict";var r=n(7286),o=n(2680),i=n(9500),s=n(5408),a=r("%WeakMap%",!0),u=r("%Map%",!0),c=o("WeakMap.prototype.get",!0),l=o("WeakMap.prototype.set",!0),f=o("WeakMap.prototype.has",!0),h=o("Map.prototype.get",!0),d=o("Map.prototype.set",!0),p=o("Map.prototype.has",!0),g=function(e,t){for(var n,r=e;null!==(n=r.next);r=n)if(n.key===t)return r.next=n.next,n.next=e.next,e.next=n,n};e.exports=function(){var e,t,n,r={assert:function(e){if(!r.has(e))throw new s("Side channel does not contain "+i(e))},get:function(r){if(a&&r&&("object"==typeof r||"function"==typeof r)){if(e)return c(e,r)}else if(u){if(t)return h(t,r)}else if(n)return function(e,t){var n=g(e,t);return n&&n.value}(n,r)},has:function(r){if(a&&r&&("object"==typeof r||"function"==typeof r)){if(e)return f(e,r)}else if(u){if(t)return p(t,r)}else if(n)return function(e,t){return!!g(e,t)}(n,r);return!1},set:function(r,o){a&&r&&("object"==typeof r||"function"==typeof r)?(e||(e=new a),l(e,r,o)):u?(t||(t=new u),d(t,r,o)):(n||(n={key:{},next:null}),function(e,t,n){var r=g(e,t);r?r.value=n:e.next={key:t,next:e.next,value:n}}(n,r,o))}};return r}},5580:e=>{const t=/^[-+]?0x[a-fA-F0-9]+$/,n=/^([\-\+])?(0*)(\.[0-9]+([eE]\-?[0-9]+)?|[0-9]+(\.[0-9]+([eE]\-?[0-9]+)?)?)$/;!Number.parseInt&&window.parseInt&&(Number.parseInt=window.parseInt),!Number.parseFloat&&window.parseFloat&&(Number.parseFloat=window.parseFloat);const r={hex:!0,leadingZeros:!0,decimalPoint:".",eNotation:!0};e.exports=function(e,o={}){if(o=Object.assign({},r,o),!e||"string"!=typeof e)return e;let i=e.trim();if(void 0!==o.skipLike&&o.skipLike.test(i))return e;if(o.hex&&t.test(i))return Number.parseInt(i,16);{const t=n.exec(i);if(t){const n=t[1],r=t[2];let a=(s=t[3])&&-1!==s.indexOf(".")?("."===(s=s.replace(/0+$/,""))?s="0":"."===s[0]?s="0"+s:"."===s[s.length-1]&&(s=s.substr(0,s.length-1)),s):s;const u=t[4]||t[6];if(!o.leadingZeros&&r.length>0&&n&&"."!==i[2])return e;if(!o.leadingZeros&&r.length>0&&!n&&"."!==i[1])return e;{const t=Number(i),s=""+t;return-1!==s.search(/[eE]/)||u?o.eNotation?t:e:-1!==i.indexOf(".")?"0"===s&&""===a||s===a||n&&s==="-"+a?t:e:r?a===s||n+a===s?t:e:i===s||i===n+s?t:e}}return e}var s}},4677:(e,t,n)=>{"use strict";function r(e,t){return t=t||{},new Promise((function(n,r){var o=new XMLHttpRequest,i=[],s=[],a={},u=function(){return{ok:2==(o.status/100|0),statusText:o.statusText,status:o.status,url:o.responseURL,text:function(){return Promise.resolve(o.responseText)},json:function(){return Promise.resolve(o.responseText).then(JSON.parse)},blob:function(){return Promise.resolve(new Blob([o.response]))},clone:u,headers:{keys:function(){return i},entries:function(){return s},get:function(e){return a[e.toLowerCase()]},has:function(e){return e.toLowerCase()in a}}}};for(var c in o.open(t.method||"get",e,!0),o.onload=function(){o.getAllResponseHeaders().replace(/^(.*?):[^\S\n]*([\s\S]*?)$/gm,(function(e,t,n){i.push(t=t.toLowerCase()),s.push([t,n]),a[t]=a[t]?a[t]+","+n:n})),n(u())},o.onerror=r,o.withCredentials="include"==t.credentials,t.headers)o.setRequestHeader(c,t.headers[c]);o.send(t.body||null)}))}n.r(t),n.d(t,{default:()=>r})},9639:function(e,t,n){var r;e=n.nmd(e),function(o){t&&t.nodeType,e&&e.nodeType;var i="object"==typeof n.g&&n.g;i.global!==i&&i.window!==i&&i.self;var s,a=2147483647,u=36,c=26,l=38,f=700,h=/^xn--/,d=/[^\x20-\x7E]/,p=/[\x2E\u3002\uFF0E\uFF61]/g,g={overflow:"Overflow: input needs wider integers to process","not-basic":"Illegal input >= 0x80 (not a basic code point)","invalid-input":"Invalid input"},y=u-1,v=Math.floor,m=String.fromCharCode;function b(e){throw new RangeError(g[e])}function w(e,t){for(var n=e.length,r=[];n--;)r[n]=t(e[n]);return r}function S(e,t){var n=e.split("@"),r="";return n.length>1&&(r=n[0]+"@",e=n[1]),r+w((e=e.replace(p,".")).split("."),t).join(".")}function _(e){for(var t,n,r=[],o=0,i=e.length;o<i;)(t=e.charCodeAt(o++))>=55296&&t<=56319&&o<i?56320==(64512&(n=e.charCodeAt(o++)))?r.push(((1023&t)<<10)+(1023&n)+65536):(r.push(t),o--):r.push(t);return r}function A(e){return w(e,(function(e){var t="";return e>65535&&(t+=m((e-=65536)>>>10&1023|55296),e=56320|1023&e),t+m(e)})).join("")}function E(e,t){return e+22+75*(e<26)-((0!=t)<<5)}function P(e,t,n){var r=0;for(e=n?v(e/f):e>>1,e+=v(e/t);e>y*c>>1;r+=u)e=v(e/y);return v(r+(y+1)*e/(e+l))}function x(e){var t,n,r,o,i,s,l,f,h,d,p,g=[],y=e.length,m=0,w=128,S=72;for((n=e.lastIndexOf("-"))<0&&(n=0),r=0;r<n;++r)e.charCodeAt(r)>=128&&b("not-basic"),g.push(e.charCodeAt(r));for(o=n>0?n+1:0;o<y;){for(i=m,s=1,l=u;o>=y&&b("invalid-input"),((f=(p=e.charCodeAt(o++))-48<10?p-22:p-65<26?p-65:p-97<26?p-97:u)>=u||f>v((a-m)/s))&&b("overflow"),m+=f*s,!(f<(h=l<=S?1:l>=S+c?c:l-S));l+=u)s>v(a/(d=u-h))&&b("overflow"),s*=d;S=P(m-i,t=g.length+1,0==i),v(m/t)>a-w&&b("overflow"),w+=v(m/t),m%=t,g.splice(m++,0,w)}return A(g)}function O(e){var t,n,r,o,i,s,l,f,h,d,p,g,y,w,S,A=[];for(g=(e=_(e)).length,t=128,n=0,i=72,s=0;s<g;++s)(p=e[s])<128&&A.push(m(p));for(r=o=A.length,o&&A.push("-");r<g;){for(l=a,s=0;s<g;++s)(p=e[s])>=t&&p<l&&(l=p);for(l-t>v((a-n)/(y=r+1))&&b("overflow"),n+=(l-t)*y,t=l,s=0;s<g;++s)if((p=e[s])<t&&++n>a&&b("overflow"),p==t){for(f=n,h=u;!(f<(d=h<=i?1:h>=i+c?c:h-i));h+=u)S=f-d,w=u-d,A.push(m(E(d+S%w,0))),f=v(S/w);A.push(m(E(f,0))),i=P(n,y,r==o),n=0,++r}++n,++t}return A.join("")}s={version:"1.4.1",ucs2:{decode:_,encode:A},decode:x,encode:O,toASCII:function(e){return S(e,(function(e){return d.test(e)?"xn--"+O(e):e}))},toUnicode:function(e){return S(e,(function(e){return h.test(e)?x(e.slice(4).toLowerCase()):e}))}},void 0===(r=function(){return s}.call(t,n,t,e))||(e.exports=r)}()},2573:e=>{"use strict";var t=String.prototype.replace,n=/%20/g,r="RFC3986";e.exports={default:r,formatters:{RFC1738:function(e){return t.call(e,n,"+")},RFC3986:function(e){return String(e)}},RFC1738:"RFC1738",RFC3986:r}},2420:(e,t,n)=>{"use strict";var r=n(3079),o=n(3177),i=n(2573);e.exports={formats:i,parse:o,stringify:r}},3177:(e,t,n)=>{"use strict";var r=n(3435),o=Object.prototype.hasOwnProperty,i=Array.isArray,s={allowDots:!1,allowPrototypes:!1,allowSparse:!1,arrayLimit:20,charset:"utf-8",charsetSentinel:!1,comma:!1,decoder:r.decode,delimiter:"&",depth:5,ignoreQueryPrefix:!1,interpretNumericEntities:!1,parameterLimit:1e3,parseArrays:!0,plainObjects:!1,strictNullHandling:!1},a=function(e){return e.replace(/&#(\d+);/g,(function(e,t){return String.fromCharCode(parseInt(t,10))}))},u=function(e,t){return e&&"string"==typeof e&&t.comma&&e.indexOf(",")>-1?e.split(","):e},c=function(e,t,n,r){if(e){var i=n.allowDots?e.replace(/\.([^.[]+)/g,"[$1]"):e,s=/(\[[^[\]]*])/g,a=n.depth>0&&/(\[[^[\]]*])/.exec(i),c=a?i.slice(0,a.index):i,l=[];if(c){if(!n.plainObjects&&o.call(Object.prototype,c)&&!n.allowPrototypes)return;l.push(c)}for(var f=0;n.depth>0&&null!==(a=s.exec(i))&&f<n.depth;){if(f+=1,!n.plainObjects&&o.call(Object.prototype,a[1].slice(1,-1))&&!n.allowPrototypes)return;l.push(a[1])}return a&&l.push("["+i.slice(a.index)+"]"),function(e,t,n,r){for(var o=r?t:u(t,n),i=e.length-1;i>=0;--i){var s,a=e[i];if("[]"===a&&n.parseArrays)s=[].concat(o);else{s=n.plainObjects?Object.create(null):{};var c="["===a.charAt(0)&&"]"===a.charAt(a.length-1)?a.slice(1,-1):a,l=parseInt(c,10);n.parseArrays||""!==c?!isNaN(l)&&a!==c&&String(l)===c&&l>=0&&n.parseArrays&&l<=n.arrayLimit?(s=[])[l]=o:"__proto__"!==c&&(s[c]=o):s={0:o}}o=s}return o}(l,t,n,r)}};e.exports=function(e,t){var n=function(e){if(!e)return s;if(null!==e.decoder&&void 0!==e.decoder&&"function"!=typeof e.decoder)throw new TypeError("Decoder has to be a function.");if(void 0!==e.charset&&"utf-8"!==e.charset&&"iso-8859-1"!==e.charset)throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");var t=void 0===e.charset?s.charset:e.charset;return{allowDots:void 0===e.allowDots?s.allowDots:!!e.allowDots,allowPrototypes:"boolean"==typeof e.allowPrototypes?e.allowPrototypes:s.allowPrototypes,allowSparse:"boolean"==typeof e.allowSparse?e.allowSparse:s.allowSparse,arrayLimit:"number"==typeof e.arrayLimit?e.arrayLimit:s.arrayLimit,charset:t,charsetSentinel:"boolean"==typeof e.charsetSentinel?e.charsetSentinel:s.charsetSentinel,comma:"boolean"==typeof e.comma?e.comma:s.comma,decoder:"function"==typeof e.decoder?e.decoder:s.decoder,delimiter:"string"==typeof e.delimiter||r.isRegExp(e.delimiter)?e.delimiter:s.delimiter,depth:"number"==typeof e.depth||!1===e.depth?+e.depth:s.depth,ignoreQueryPrefix:!0===e.ignoreQueryPrefix,interpretNumericEntities:"boolean"==typeof e.interpretNumericEntities?e.interpretNumericEntities:s.interpretNumericEntities,parameterLimit:"number"==typeof e.parameterLimit?e.parameterLimit:s.parameterLimit,parseArrays:!1!==e.parseArrays,plainObjects:"boolean"==typeof e.plainObjects?e.plainObjects:s.plainObjects,strictNullHandling:"boolean"==typeof e.strictNullHandling?e.strictNullHandling:s.strictNullHandling}}(t);if(""===e||null==e)return n.plainObjects?Object.create(null):{};for(var l="string"==typeof e?function(e,t){var n,c={__proto__:null},l=t.ignoreQueryPrefix?e.replace(/^\?/,""):e,f=t.parameterLimit===1/0?void 0:t.parameterLimit,h=l.split(t.delimiter,f),d=-1,p=t.charset;if(t.charsetSentinel)for(n=0;n<h.length;++n)0===h[n].indexOf("utf8=")&&("utf8=%E2%9C%93"===h[n]?p="utf-8":"utf8=%26%2310003%3B"===h[n]&&(p="iso-8859-1"),d=n,n=h.length);for(n=0;n<h.length;++n)if(n!==d){var g,y,v=h[n],m=v.indexOf("]="),b=-1===m?v.indexOf("="):m+1;-1===b?(g=t.decoder(v,s.decoder,p,"key"),y=t.strictNullHandling?null:""):(g=t.decoder(v.slice(0,b),s.decoder,p,"key"),y=r.maybeMap(u(v.slice(b+1),t),(function(e){return t.decoder(e,s.decoder,p,"value")}))),y&&t.interpretNumericEntities&&"iso-8859-1"===p&&(y=a(y)),v.indexOf("[]=")>-1&&(y=i(y)?[y]:y),o.call(c,g)?c[g]=r.combine(c[g],y):c[g]=y}return c}(e,n):e,f=n.plainObjects?Object.create(null):{},h=Object.keys(l),d=0;d<h.length;++d){var p=h[d],g=c(p,l[p],n,"string"==typeof e);f=r.merge(f,g,n)}return!0===n.allowSparse?f:r.compact(f)}},3079:(e,t,n)=>{"use strict";var r=n(4294),o=n(3435),i=n(2573),s=Object.prototype.hasOwnProperty,a={brackets:function(e){return e+"[]"},comma:"comma",indices:function(e,t){return e+"["+t+"]"},repeat:function(e){return e}},u=Array.isArray,c=Array.prototype.push,l=function(e,t){c.apply(e,u(t)?t:[t])},f=Date.prototype.toISOString,h=i.default,d={addQueryPrefix:!1,allowDots:!1,charset:"utf-8",charsetSentinel:!1,delimiter:"&",encode:!0,encoder:o.encode,encodeValuesOnly:!1,format:h,formatter:i.formatters[h],indices:!1,serializeDate:function(e){return f.call(e)},skipNulls:!1,strictNullHandling:!1},p={},g=function e(t,n,i,s,a,c,f,h,g,y,v,m,b,w,S,_){for(var A,E=t,P=_,x=0,O=!1;void 0!==(P=P.get(p))&&!O;){var I=P.get(t);if(x+=1,void 0!==I){if(I===x)throw new RangeError("Cyclic object value");O=!0}void 0===P.get(p)&&(x=0)}if("function"==typeof h?E=h(n,E):E instanceof Date?E=v(E):"comma"===i&&u(E)&&(E=o.maybeMap(E,(function(e){return e instanceof Date?v(e):e}))),null===E){if(a)return f&&!w?f(n,d.encoder,S,"key",m):n;E=""}if("string"==typeof(A=E)||"number"==typeof A||"boolean"==typeof A||"symbol"==typeof A||"bigint"==typeof A||o.isBuffer(E))return f?[b(w?n:f(n,d.encoder,S,"key",m))+"="+b(f(E,d.encoder,S,"value",m))]:[b(n)+"="+b(String(E))];var C,T=[];if(void 0===E)return T;if("comma"===i&&u(E))w&&f&&(E=o.maybeMap(E,f)),C=[{value:E.length>0?E.join(",")||null:void 0}];else if(u(h))C=h;else{var k=Object.keys(E);C=g?k.sort(g):k}for(var U=s&&u(E)&&1===E.length?n+"[]":n,R=0;R<C.length;++R){var j=C[R],M="object"==typeof j&&void 0!==j.value?j.value:E[j];if(!c||null!==M){var N=u(E)?"function"==typeof i?i(U,j):U:U+(y?"."+j:"["+j+"]");_.set(t,x);var D=r();D.set(p,_),l(T,e(M,N,i,s,a,c,"comma"===i&&w&&u(E)?null:f,h,g,y,v,m,b,w,S,D))}}return T};e.exports=function(e,t){var n,o=e,c=function(e){if(!e)return d;if(null!==e.encoder&&void 0!==e.encoder&&"function"!=typeof e.encoder)throw new TypeError("Encoder has to be a function.");var t=e.charset||d.charset;if(void 0!==e.charset&&"utf-8"!==e.charset&&"iso-8859-1"!==e.charset)throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");var n=i.default;if(void 0!==e.format){if(!s.call(i.formatters,e.format))throw new TypeError("Unknown format option provided.");n=e.format}var r=i.formatters[n],o=d.filter;return("function"==typeof e.filter||u(e.filter))&&(o=e.filter),{addQueryPrefix:"boolean"==typeof e.addQueryPrefix?e.addQueryPrefix:d.addQueryPrefix,allowDots:void 0===e.allowDots?d.allowDots:!!e.allowDots,charset:t,charsetSentinel:"boolean"==typeof e.charsetSentinel?e.charsetSentinel:d.charsetSentinel,delimiter:void 0===e.delimiter?d.delimiter:e.delimiter,encode:"boolean"==typeof e.encode?e.encode:d.encode,encoder:"function"==typeof e.encoder?e.encoder:d.encoder,encodeValuesOnly:"boolean"==typeof e.encodeValuesOnly?e.encodeValuesOnly:d.encodeValuesOnly,filter:o,format:n,formatter:r,serializeDate:"function"==typeof e.serializeDate?e.serializeDate:d.serializeDate,skipNulls:"boolean"==typeof e.skipNulls?e.skipNulls:d.skipNulls,sort:"function"==typeof e.sort?e.sort:null,strictNullHandling:"boolean"==typeof e.strictNullHandling?e.strictNullHandling:d.strictNullHandling}}(t);"function"==typeof c.filter?o=(0,c.filter)("",o):u(c.filter)&&(n=c.filter);var f,h=[];if("object"!=typeof o||null===o)return"";f=t&&t.arrayFormat in a?t.arrayFormat:t&&"indices"in t?t.indices?"indices":"repeat":"indices";var p=a[f];if(t&&"commaRoundTrip"in t&&"boolean"!=typeof t.commaRoundTrip)throw new TypeError("`commaRoundTrip` must be a boolean, or absent");var y="comma"===p&&t&&t.commaRoundTrip;n||(n=Object.keys(o)),c.sort&&n.sort(c.sort);for(var v=r(),m=0;m<n.length;++m){var b=n[m];c.skipNulls&&null===o[b]||l(h,g(o[b],b,p,y,c.strictNullHandling,c.skipNulls,c.encode?c.encoder:null,c.filter,c.sort,c.allowDots,c.serializeDate,c.format,c.formatter,c.encodeValuesOnly,c.charset,v))}var w=h.join(c.delimiter),S=!0===c.addQueryPrefix?"?":"";return c.charsetSentinel&&("iso-8859-1"===c.charset?S+="utf8=%26%2310003%3B&":S+="utf8=%E2%9C%93&"),w.length>0?S+w:""}},3435:(e,t,n)=>{"use strict";var r=n(2573),o=Object.prototype.hasOwnProperty,i=Array.isArray,s=function(){for(var e=[],t=0;t<256;++t)e.push("%"+((t<16?"0":"")+t.toString(16)).toUpperCase());return e}(),a=function(e,t){for(var n=t&&t.plainObjects?Object.create(null):{},r=0;r<e.length;++r)void 0!==e[r]&&(n[r]=e[r]);return n};e.exports={arrayToObject:a,assign:function(e,t){return Object.keys(t).reduce((function(e,n){return e[n]=t[n],e}),e)},combine:function(e,t){return[].concat(e,t)},compact:function(e){for(var t=[{obj:{o:e},prop:"o"}],n=[],r=0;r<t.length;++r)for(var o=t[r],s=o.obj[o.prop],a=Object.keys(s),u=0;u<a.length;++u){var c=a[u],l=s[c];"object"==typeof l&&null!==l&&-1===n.indexOf(l)&&(t.push({obj:s,prop:c}),n.push(l))}return function(e){for(;e.length>1;){var t=e.pop(),n=t.obj[t.prop];if(i(n)){for(var r=[],o=0;o<n.length;++o)void 0!==n[o]&&r.push(n[o]);t.obj[t.prop]=r}}}(t),e},decode:function(e,t,n){var r=e.replace(/\+/g," ");if("iso-8859-1"===n)return r.replace(/%[0-9a-f]{2}/gi,unescape);try{return decodeURIComponent(r)}catch(e){return r}},encode:function(e,t,n,o,i){if(0===e.length)return e;var a=e;if("symbol"==typeof e?a=Symbol.prototype.toString.call(e):"string"!=typeof e&&(a=String(e)),"iso-8859-1"===n)return escape(a).replace(/%u[0-9a-f]{4}/gi,(function(e){return"%26%23"+parseInt(e.slice(2),16)+"%3B"}));for(var u="",c=0;c<a.length;++c){var l=a.charCodeAt(c);45===l||46===l||95===l||126===l||l>=48&&l<=57||l>=65&&l<=90||l>=97&&l<=122||i===r.RFC1738&&(40===l||41===l)?u+=a.charAt(c):l<128?u+=s[l]:l<2048?u+=s[192|l>>6]+s[128|63&l]:l<55296||l>=57344?u+=s[224|l>>12]+s[128|l>>6&63]+s[128|63&l]:(c+=1,l=65536+((1023&l)<<10|1023&a.charCodeAt(c)),u+=s[240|l>>18]+s[128|l>>12&63]+s[128|l>>6&63]+s[128|63&l])}return u},isBuffer:function(e){return!(!e||"object"!=typeof e||!(e.constructor&&e.constructor.isBuffer&&e.constructor.isBuffer(e)))},isRegExp:function(e){return"[object RegExp]"===Object.prototype.toString.call(e)},maybeMap:function(e,t){if(i(e)){for(var n=[],r=0;r<e.length;r+=1)n.push(t(e[r]));return n}return t(e)},merge:function e(t,n,r){if(!n)return t;if("object"!=typeof n){if(i(t))t.push(n);else{if(!t||"object"!=typeof t)return[t,n];(r&&(r.plainObjects||r.allowPrototypes)||!o.call(Object.prototype,n))&&(t[n]=!0)}return t}if(!t||"object"!=typeof t)return[t].concat(n);var s=t;return i(t)&&!i(n)&&(s=a(t,r)),i(t)&&i(n)?(n.forEach((function(n,i){if(o.call(t,i)){var s=t[i];s&&"object"==typeof s&&n&&"object"==typeof n?t[i]=e(s,n,r):t.push(n)}else t[i]=n})),t):Object.keys(n).reduce((function(t,i){var s=n[i];return o.call(t,i)?t[i]=e(t[i],s,r):t[i]=s,t}),s)}}},883:(e,t,n)=>{"use strict";var r=n(9639);function o(){this.protocol=null,this.slashes=null,this.auth=null,this.host=null,this.port=null,this.hostname=null,this.hash=null,this.search=null,this.query=null,this.pathname=null,this.path=null,this.href=null}var i=/^([a-z0-9.+-]+:)/i,s=/:[0-9]*$/,a=/^(\/\/?(?!\/)[^?\s]*)(\?[^\s]*)?$/,u=["{","}","|","\\","^","`"].concat(["<",">",'"',"`"," ","\r","\n","\t"]),c=["'"].concat(u),l=["%","/","?",";","#"].concat(c),f=["/","?","#"],h=/^[+a-z0-9A-Z_-]{0,63}$/,d=/^([+a-z0-9A-Z_-]{0,63})(.*)$/,p={javascript:!0,"javascript:":!0},g={javascript:!0,"javascript:":!0},y={http:!0,https:!0,ftp:!0,gopher:!0,file:!0,"http:":!0,"https:":!0,"ftp:":!0,"gopher:":!0,"file:":!0},v=n(2420);function m(e,t,n){if(e&&"object"==typeof e&&e instanceof o)return e;var r=new o;return r.parse(e,t,n),r}o.prototype.parse=function(e,t,n){if("string"!=typeof e)throw new TypeError("Parameter 'url' must be a string, not "+typeof e);var o=e.indexOf("?"),s=-1!==o&&o<e.indexOf("#")?"?":"#",u=e.split(s);u[0]=u[0].replace(/\\/g,"/");var m=e=u.join(s);if(m=m.trim(),!n&&1===e.split("#").length){var b=a.exec(m);if(b)return this.path=m,this.href=m,this.pathname=b[1],b[2]?(this.search=b[2],this.query=t?v.parse(this.search.substr(1)):this.search.substr(1)):t&&(this.search="",this.query={}),this}var w=i.exec(m);if(w){var S=(w=w[0]).toLowerCase();this.protocol=S,m=m.substr(w.length)}if(n||w||m.match(/^\/\/[^@/]+@[^@/]+/)){var _="//"===m.substr(0,2);!_||w&&g[w]||(m=m.substr(2),this.slashes=!0)}if(!g[w]&&(_||w&&!y[w])){for(var A,E,P=-1,x=0;x<f.length;x++)-1!==(O=m.indexOf(f[x]))&&(-1===P||O<P)&&(P=O);for(-1!==(E=-1===P?m.lastIndexOf("@"):m.lastIndexOf("@",P))&&(A=m.slice(0,E),m=m.slice(E+1),this.auth=decodeURIComponent(A)),P=-1,x=0;x<l.length;x++){var O;-1!==(O=m.indexOf(l[x]))&&(-1===P||O<P)&&(P=O)}-1===P&&(P=m.length),this.host=m.slice(0,P),m=m.slice(P),this.parseHost(),this.hostname=this.hostname||"";var I="["===this.hostname[0]&&"]"===this.hostname[this.hostname.length-1];if(!I)for(var C=this.hostname.split(/\./),T=(x=0,C.length);x<T;x++){var k=C[x];if(k&&!k.match(h)){for(var U="",R=0,j=k.length;R<j;R++)k.charCodeAt(R)>127?U+="x":U+=k[R];if(!U.match(h)){var M=C.slice(0,x),N=C.slice(x+1),D=k.match(d);D&&(M.push(D[1]),N.unshift(D[2])),N.length&&(m="/"+N.join(".")+m),this.hostname=M.join(".");break}}}this.hostname.length>255?this.hostname="":this.hostname=this.hostname.toLowerCase(),I||(this.hostname=r.toASCII(this.hostname));var F=this.port?":"+this.port:"",L=this.hostname||"";this.host=L+F,this.href+=this.host,I&&(this.hostname=this.hostname.substr(1,this.hostname.length-2),"/"!==m[0]&&(m="/"+m))}if(!p[S])for(x=0,T=c.length;x<T;x++){var B=c[x];if(-1!==m.indexOf(B)){var V=encodeURIComponent(B);V===B&&(V=escape(B)),m=m.split(B).join(V)}}var q=m.indexOf("#");-1!==q&&(this.hash=m.substr(q),m=m.slice(0,q));var z=m.indexOf("?");if(-1!==z?(this.search=m.substr(z),this.query=m.substr(z+1),t&&(this.query=v.parse(this.query)),m=m.slice(0,z)):t&&(this.search="",this.query={}),m&&(this.pathname=m),y[S]&&this.hostname&&!this.pathname&&(this.pathname="/"),this.pathname||this.search){F=this.pathname||"";var W=this.search||"";this.path=F+W}return this.href=this.format(),this},o.prototype.format=function(){var e=this.auth||"";e&&(e=(e=encodeURIComponent(e)).replace(/%3A/i,":"),e+="@");var t=this.protocol||"",n=this.pathname||"",r=this.hash||"",o=!1,i="";this.host?o=e+this.host:this.hostname&&(o=e+(-1===this.hostname.indexOf(":")?this.hostname:"["+this.hostname+"]"),this.port&&(o+=":"+this.port)),this.query&&"object"==typeof this.query&&Object.keys(this.query).length&&(i=v.stringify(this.query,{arrayFormat:"repeat",addQueryPrefix:!1}));var s=this.search||i&&"?"+i||"";return t&&":"!==t.substr(-1)&&(t+=":"),this.slashes||(!t||y[t])&&!1!==o?(o="//"+(o||""),n&&"/"!==n.charAt(0)&&(n="/"+n)):o||(o=""),r&&"#"!==r.charAt(0)&&(r="#"+r),s&&"?"!==s.charAt(0)&&(s="?"+s),t+o+(n=n.replace(/[?#]/g,(function(e){return encodeURIComponent(e)})))+(s=s.replace("#","%23"))+r},o.prototype.resolve=function(e){return this.resolveObject(m(e,!1,!0)).format()},o.prototype.resolveObject=function(e){if("string"==typeof e){var t=new o;t.parse(e,!1,!0),e=t}for(var n=new o,r=Object.keys(this),i=0;i<r.length;i++){var s=r[i];n[s]=this[s]}if(n.hash=e.hash,""===e.href)return n.href=n.format(),n;if(e.slashes&&!e.protocol){for(var a=Object.keys(e),u=0;u<a.length;u++){var c=a[u];"protocol"!==c&&(n[c]=e[c])}return y[n.protocol]&&n.hostname&&!n.pathname&&(n.pathname="/",n.path=n.pathname),n.href=n.format(),n}if(e.protocol&&e.protocol!==n.protocol){if(!y[e.protocol]){for(var l=Object.keys(e),f=0;f<l.length;f++){var h=l[f];n[h]=e[h]}return n.href=n.format(),n}if(n.protocol=e.protocol,e.host||g[e.protocol])n.pathname=e.pathname;else{for(var d=(e.pathname||"").split("/");d.length&&!(e.host=d.shift()););e.host||(e.host=""),e.hostname||(e.hostname=""),""!==d[0]&&d.unshift(""),d.length<2&&d.unshift(""),n.pathname=d.join("/")}if(n.search=e.search,n.query=e.query,n.host=e.host||"",n.auth=e.auth,n.hostname=e.hostname||e.host,n.port=e.port,n.pathname||n.search){var p=n.pathname||"",v=n.search||"";n.path=p+v}return n.slashes=n.slashes||e.slashes,n.href=n.format(),n}var m=n.pathname&&"/"===n.pathname.charAt(0),b=e.host||e.pathname&&"/"===e.pathname.charAt(0),w=b||m||n.host&&e.pathname,S=w,_=n.pathname&&n.pathname.split("/")||[],A=(d=e.pathname&&e.pathname.split("/")||[],n.protocol&&!y[n.protocol]);if(A&&(n.hostname="",n.port=null,n.host&&(""===_[0]?_[0]=n.host:_.unshift(n.host)),n.host="",e.protocol&&(e.hostname=null,e.port=null,e.host&&(""===d[0]?d[0]=e.host:d.unshift(e.host)),e.host=null),w=w&&(""===d[0]||""===_[0])),b)n.host=e.host||""===e.host?e.host:n.host,n.hostname=e.hostname||""===e.hostname?e.hostname:n.hostname,n.search=e.search,n.query=e.query,_=d;else if(d.length)_||(_=[]),_.pop(),_=_.concat(d),n.search=e.search,n.query=e.query;else if(null!=e.search)return A&&(n.host=_.shift(),n.hostname=n.host,(I=!!(n.host&&n.host.indexOf("@")>0)&&n.host.split("@"))&&(n.auth=I.shift(),n.hostname=I.shift(),n.host=n.hostname)),n.search=e.search,n.query=e.query,null===n.pathname&&null===n.search||(n.path=(n.pathname?n.pathname:"")+(n.search?n.search:"")),n.href=n.format(),n;if(!_.length)return n.pathname=null,n.search?n.path="/"+n.search:n.path=null,n.href=n.format(),n;for(var E=_.slice(-1)[0],P=(n.host||e.host||_.length>1)&&("."===E||".."===E)||""===E,x=0,O=_.length;O>=0;O--)"."===(E=_[O])?_.splice(O,1):".."===E?(_.splice(O,1),x++):x&&(_.splice(O,1),x--);if(!w&&!S)for(;x--;x)_.unshift("..");!w||""===_[0]||_[0]&&"/"===_[0].charAt(0)||_.unshift(""),P&&"/"!==_.join("/").substr(-1)&&_.push("");var I,C=""===_[0]||_[0]&&"/"===_[0].charAt(0);return A&&(n.hostname=C?"":_.length?_.shift():"",n.host=n.hostname,(I=!!(n.host&&n.host.indexOf("@")>0)&&n.host.split("@"))&&(n.auth=I.shift(),n.hostname=I.shift(),n.host=n.hostname)),(w=w||n.host&&_.length)&&!C&&_.unshift(""),_.length>0?n.pathname=_.join("/"):(n.pathname=null,n.path=null),null===n.pathname&&null===n.search||(n.path=(n.pathname?n.pathname:"")+(n.search?n.search:"")),n.auth=e.auth||n.auth,n.slashes=n.slashes||e.slashes,n.href=n.format(),n},o.prototype.parseHost=function(){var e=this.host,t=s.exec(e);t&&(":"!==(t=t[0])&&(this.port=t.substr(1)),e=e.substr(0,e.length-t.length)),e&&(this.hostname=e)},t.Qc=m},7993:()=>{self.window={crypto}},6538:()=>{},633:()=>{},3260:()=>{}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var i=t[r]={id:r,loaded:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.loaded=!0,i.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),(()=>{"use strict";var e,t,r;function o(e){return e&&!!["provider"].find((function(t){return e.hasOwnProperty(t)}))}function i(e){return void 0!==e.redirectSignIn}!function(e){e.Cognito="COGNITO",e.Google="Google",e.Facebook="Facebook",e.Amazon="LoginWithAmazon",e.Apple="SignInWithApple"}(e||(e={})),function(e){e.NoConfig="noConfig",e.MissingAuthConfig="missingAuthConfig",e.EmptyUsername="emptyUsername",e.InvalidUsername="invalidUsername",e.EmptyPassword="emptyPassword",e.EmptyCode="emptyCode",e.SignUpError="signUpError",e.NoMFA="noMFA",e.InvalidMFA="invalidMFA",e.EmptyChallengeResponse="emptyChallengeResponse",e.NoUserSession="noUserSession",e.Default="default",e.DeviceConfig="deviceConfig",e.NetworkError="networkError"}(t||(t={})),function(e){e.API_KEY="API_KEY",e.AWS_IAM="AWS_IAM",e.OPENID_CONNECT="OPENID_CONNECT",e.AMAZON_COGNITO_USER_POOLS="AMAZON_COGNITO_USER_POOLS",e.AWS_LAMBDA="AWS_LAMBDA"}(r||(r={}));var s,a=function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)s.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return s},u=function(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(a(arguments[t]));return e},c={VERBOSE:1,DEBUG:2,INFO:3,WARN:4,ERROR:5};!function(e){e.DEBUG="DEBUG",e.ERROR="ERROR",e.INFO="INFO",e.WARN="WARN",e.VERBOSE="VERBOSE"}(s||(s={}));var l=function(){function e(e,t){void 0===t&&(t=s.WARN),this.name=e,this.level=t,this._pluggables=[]}return e.prototype._padding=function(e){return e<10?"0"+e:""+e},e.prototype._ts=function(){var e=new Date;return[this._padding(e.getMinutes()),this._padding(e.getSeconds())].join(":")+"."+e.getMilliseconds()},e.prototype.configure=function(e){return e?(this._config=e,this._config):this._config},e.prototype._log=function(t){for(var n,r,o=[],i=1;i<arguments.length;i++)o[i-1]=arguments[i];var a=this.level;if(e.LOG_LEVEL&&(a=e.LOG_LEVEL),"undefined"!=typeof window&&window.LOG_LEVEL&&(a=window.LOG_LEVEL),c[t]>=c[a]){var u=console.log.bind(console);t===s.ERROR&&console.error&&(u=console.error.bind(console)),t===s.WARN&&console.warn&&(u=console.warn.bind(console));var l="["+t+"] "+this._ts()+" "+this.name,f="";if(1===o.length&&"string"==typeof o[0])u(f=l+" - "+o[0]);else if(1===o.length)f=l+" "+o[0],u(l,o[0]);else if("string"==typeof o[0]){var h=o.slice(1);1===h.length&&(h=h[0]),f=l+" - "+o[0]+" "+h,u(l+" - "+o[0],h)}else f=l+" "+o,u(l,o);try{for(var d=function(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}(this._pluggables),p=d.next();!p.done;p=d.next()){var g=p.value,y={message:f,timestamp:Date.now()};g.pushLogs([y])}}catch(e){n={error:e}}finally{try{p&&!p.done&&(r=d.return)&&r.call(d)}finally{if(n)throw n.error}}}},e.prototype.log=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];this._log.apply(this,u([s.INFO],e))},e.prototype.info=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];this._log.apply(this,u([s.INFO],e))},e.prototype.warn=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];this._log.apply(this,u([s.WARN],e))},e.prototype.error=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];this._log.apply(this,u([s.ERROR],e))},e.prototype.debug=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];this._log.apply(this,u([s.DEBUG],e))},e.prototype.verbose=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];this._log.apply(this,u([s.VERBOSE],e))},e.prototype.addPluggable=function(e){e&&"Logging"===e.getCategoryName()&&(this._pluggables.push(e),e.configure(this._config))},e.prototype.listPluggables=function(){return this._pluggables},e.LOG_LEVEL=null,e}(),f=function(){return f=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},f.apply(this,arguments)},h=function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)s.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return s},d=function(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(h(arguments[t]));return e},p=new l("Hub"),g="undefined"!=typeof Symbol&&"function"==typeof Symbol.for?Symbol.for("amplify_default"):"@@amplify_default",y=function(){function e(e){this.listeners=[],this.patterns=[],this.protectedChannels=["core","auth","api","analytics","interactions","pubsub","storage","ui","xr"],this.name=e}return e.prototype.remove=function(e,t){if(e instanceof RegExp){var n=this.patterns.find((function(t){return t.pattern.source===e.source}));if(!n)return void p.warn("No listeners for "+e);this.patterns=d(this.patterns.filter((function(e){return e!==n})))}else{var r=this.listeners[e];if(!r)return void p.warn("No listeners for "+e);this.listeners[e]=d(r.filter((function(e){return e.callback!==t})))}},e.prototype.dispatch=function(e,t,n,r){void 0===n&&(n=""),this.protectedChannels.indexOf(e)>-1&&(r===g||p.warn("WARNING: "+e+" is protected and dispatching on it can have unintended consequences"));var o={channel:e,payload:f({},t),source:n,patternInfo:[]};try{this._toListeners(o)}catch(e){p.error(e)}},e.prototype.listen=function(e,t,n){var r,o=this;if(void 0===n&&(n="noname"),function(e){return void 0!==e.onHubCapsule}(t))p.warn("WARNING onHubCapsule is Deprecated. Please pass in a callback."),r=t.onHubCapsule.bind(t);else{if("function"!=typeof t)throw new Error("No callback supplied to Hub");r=t}if(e instanceof RegExp)this.patterns.push({pattern:e,callback:r});else{var i=this.listeners[e];i||(i=[],this.listeners[e]=i),i.push({name:n,callback:r})}return function(){o.remove(e,r)}},e.prototype._toListeners=function(e){var t=e.channel,n=e.payload,r=this.listeners[t];if(r&&r.forEach((function(r){p.debug("Dispatching to "+t+" with ",n);try{r.callback(e)}catch(e){p.error(e)}})),this.patterns.length>0){if(!n.message)return void p.warn("Cannot perform pattern matching without a message key");var o=n.message;this.patterns.forEach((function(t){var n=o.match(t.pattern);if(n){var r=h(n).slice(1),i=f(f({},e),{patternInfo:r});try{t.callback(i)}catch(e){p.error(e)}}}))}},e}(),v=new y("__default__"),m={},b=function(){function e(){}return e.setItem=function(e,t){return m[e]=t,m[e]},e.getItem=function(e){return Object.prototype.hasOwnProperty.call(m,e)?m[e]:void 0},e.removeItem=function(e){return delete m[e]},e.clear=function(){return m={}},e}(),w=function(){function e(){try{this.storageWindow=window.localStorage,this.storageWindow.setItem("aws.amplify.test-ls",1),this.storageWindow.removeItem("aws.amplify.test-ls")}catch(e){this.storageWindow=b}}return e.prototype.getStorage=function(){return this.storageWindow},e}(),S=[{type:"text/plain",ext:"txt"},{type:"text/html",ext:"html"},{type:"text/javascript",ext:"js"},{type:"text/css",ext:"css"},{type:"text/csv",ext:"csv"},{type:"text/yaml",ext:"yml"},{type:"text/yaml",ext:"yaml"},{type:"text/calendar",ext:"ics"},{type:"text/calendar",ext:"ical"},{type:"image/apng",ext:"apng"},{type:"image/bmp",ext:"bmp"},{type:"image/gif",ext:"gif"},{type:"image/x-icon",ext:"ico"},{type:"image/x-icon",ext:"cur"},{type:"image/jpeg",ext:"jpg"},{type:"image/jpeg",ext:"jpeg"},{type:"image/jpeg",ext:"jfif"},{type:"image/jpeg",ext:"pjp"},{type:"image/jpeg",ext:"pjpeg"},{type:"image/png",ext:"png"},{type:"image/svg+xml",ext:"svg"},{type:"image/tiff",ext:"tif"},{type:"image/tiff",ext:"tiff"},{type:"image/webp",ext:"webp"},{type:"application/json",ext:"json"},{type:"application/xml",ext:"xml"},{type:"application/x-sh",ext:"sh"},{type:"application/zip",ext:"zip"},{type:"application/x-rar-compressed",ext:"rar"},{type:"application/x-tar",ext:"tar"},{type:"application/x-bzip",ext:"bz"},{type:"application/x-bzip2",ext:"bz2"},{type:"application/pdf",ext:"pdf"},{type:"application/java-archive",ext:"jar"},{type:"application/msword",ext:"doc"},{type:"application/vnd.ms-excel",ext:"xls"},{type:"application/vnd.ms-excel",ext:"xlsx"},{type:"message/rfc822",ext:"eml"}],_=function(e){return void 0===e&&(e={}),0===Object.keys(e).length},A=function(e,t,n){if(!e||!e.sort)return!1;var r=n&&"desc"===n?-1:1;return e.sort((function(e,n){var o=e[t],i=n[t];return void 0===i?void 0===o?0:1*r:void 0===o||o<i?-1*r:o>i?1*r:0})),!0},E=function(e,t){var n=Object.assign({},e);return t&&("string"==typeof t?delete n[t]:t.forEach((function(e){delete n[e]}))),n},P=function(e,t){void 0===t&&(t="application/octet-stream");var n=e.toLowerCase(),r=S.filter((function(e){return n.endsWith("."+e.ext)}));return r.length>0?r[0].type:t},x=function(e){var t=e.toLowerCase();return!!t.startsWith("text/")||"application/json"===t||"application/xml"===t||"application/sh"===t},O=function(){for(var e="",t=32;t>0;t-=1)e+="0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"[Math.floor(62*Math.random())];return e},I=function(e){if(e.isResolved)return e;var t=!0,n=!1,r=!1,o=e.then((function(e){return r=!0,t=!1,e}),(function(e){throw n=!0,t=!1,e}));return o.isFullfilled=function(){return r},o.isPending=function(){return t},o.isRejected=function(){return n},o},C=function(){if("undefined"==typeof self)return!1;var e=self;return void 0!==e.WorkerGlobalScope&&self instanceof e.WorkerGlobalScope},T=function(){return{isBrowser:"undefined"!=typeof window&&void 0!==window.document,isNode:"undefined"!=typeof process&&null!=process.versions&&null!=process.versions.node}},k=function(e,t,n){if(void 0===t&&(t=[]),void 0===n&&(n=[]),!R(e))return e;var r={};for(var o in e)e.hasOwnProperty(o)&&(r[t.includes(o)?o:o[0].toLowerCase()+o.slice(1)]=n.includes(o)?e[o]:k(e[o],t,n));return r},U=function(e,t,n){if(void 0===t&&(t=[]),void 0===n&&(n=[]),!R(e))return e;var r={};for(var o in e)e.hasOwnProperty(o)&&(r[t.includes(o)?o:o[0].toUpperCase()+o.slice(1)]=n.includes(o)?e[o]:U(e[o],t,n));return r},R=function(e){return!(!(e instanceof Object)||e instanceof Array||e instanceof Function||e instanceof Number||e instanceof String||e instanceof Boolean)};!function(){function e(){}e.isEmpty=_,e.sortByField=A,e.objectLessAttributes=E,e.filenameToContentType=P,e.isTextFile=x,e.generateRandomString=O,e.makeQuerablePromise=I,e.isWebWorker=C,e.browserOrNode=T,e.transferKeyToLowerCase=k,e.transferKeyToUpperCase=U,e.isStrictObject=R}();var j,M=(j=function(e,t){return j=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},j(e,t)},function(e,t){function n(){this.constructor=e}j(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),N=function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)s.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return s},D=function(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(N(arguments[t]));return e},F=new l("Util"),L=function(e){function t(t){var n=e.call(this,t)||this;return n.nonRetryable=!0,n}return M(t,e),t}(Error);function B(e,t,n,r){return void 0===r&&(r=1),o=this,i=void 0,a=function(){var o,i;return function(e,t){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}}(this,(function(s){switch(s.label){case 0:if("function"!=typeof e)throw Error("functionToRetry must be a function");F.debug(e.name+" attempt #"+r+" with this vars: "+JSON.stringify(t)),s.label=1;case 1:return s.trys.push([1,3,,8]),[4,e.apply(void 0,D(t))];case 2:return[2,s.sent()];case 3:if(o=s.sent(),F.debug("error on "+e.name,o),(a=o)&&a.nonRetryable)throw F.debug(e.name+" non retryable error",o),o;return i=n(r,t,o),F.debug(e.name+" retrying in "+i+" ms"),!1===i?[3,6]:[4,new Promise((function(e){return setTimeout(e,i)}))];case 4:return s.sent(),[4,B(e,t,n,r+1)];case 5:return[2,s.sent()];case 6:throw o;case 7:return[3,8];case 8:return[2]}var a}))},new((s=void 0)||(s=Promise))((function(e,t){function n(e){try{u(a.next(e))}catch(e){t(e)}}function r(e){try{u(a.throw(e))}catch(e){t(e)}}function u(t){var o;t.done?e(t.value):(o=t.value,o instanceof s?o:new s((function(e){e(o)}))).then(n,r)}u((a=a.apply(o,i||[])).next())}));var o,i,s,a}var V=3e5,q=new l("CognitoCredentials"),z=new Promise((function(e,t){return T().isBrowser?window.gapi&&window.gapi.auth2&&window.gapi.auth2?(q.debug("google api already loaded"),e()):void setTimeout((function(){return e()}),2e3):(q.debug("not in the browser, directly resolved"),e())})),W=function(){function e(){this.initialized=!1,this.refreshGoogleToken=this.refreshGoogleToken.bind(this),this._refreshGoogleTokenImpl=this._refreshGoogleTokenImpl.bind(this)}return e.prototype.refreshGoogleToken=function(){return e=this,t=void 0,r=function(){return function(e,t){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}}(this,(function(e){switch(e.label){case 0:return this.initialized?[3,2]:(q.debug("need to wait for the Google SDK loaded"),[4,z]);case 1:e.sent(),this.initialized=!0,q.debug("finish waiting"),e.label=2;case 2:return[2,this._refreshGoogleTokenImpl()]}}))},new((n=void 0)||(n=Promise))((function(o,i){function s(e){try{u(r.next(e))}catch(e){i(e)}}function a(e){try{u(r.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}u((r=r.apply(e,t||[])).next())}));var e,t,n,r},e.prototype._refreshGoogleTokenImpl=function(){var e=null;return T().isBrowser&&(e=window.gapi&&window.gapi.auth2?window.gapi.auth2:null),e?new Promise((function(t,n){e.getAuthInstance().then((function(e){e||(q.debug("google Auth undefined"),n(new L("google Auth undefined")));var r=e.currentUser.get();r.isSignedIn()?(q.debug("refreshing the google access token"),r.reloadAuthResponse().then((function(e){var n=e.id_token,r=e.expires_at;t({token:n,expires_at:r})})).catch((function(e){e&&"network_error"===e.error?n("Network error reloading google auth response"):n(new L("Failed to reload google auth response"))}))):n(new L("User is not signed in with Google"))})).catch((function(e){q.debug("Failed to refresh google token",e),n(new L("Failed to refresh google token"))}))})):(q.debug("no gapi auth2 available"),Promise.reject("no gapi auth2 available"))},e}(),H=new l("CognitoCredentials"),K=new Promise((function(e,t){return T().isBrowser?window.FB?(H.debug("FB SDK already loaded"),e()):void setTimeout((function(){return e()}),2e3):(H.debug("not in the browser, directly resolved"),e())})),G=function(){function e(){this.initialized=!1,this.refreshFacebookToken=this.refreshFacebookToken.bind(this),this._refreshFacebookTokenImpl=this._refreshFacebookTokenImpl.bind(this)}return e.prototype.refreshFacebookToken=function(){return e=this,t=void 0,r=function(){return function(e,t){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}}(this,(function(e){switch(e.label){case 0:return this.initialized?[3,2]:(H.debug("need to wait for the Facebook SDK loaded"),[4,K]);case 1:e.sent(),this.initialized=!0,H.debug("finish waiting"),e.label=2;case 2:return[2,this._refreshFacebookTokenImpl()]}}))},new((n=void 0)||(n=Promise))((function(o,i){function s(e){try{u(r.next(e))}catch(e){i(e)}}function a(e){try{u(r.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}u((r=r.apply(e,t||[])).next())}));var e,t,n,r},e.prototype._refreshFacebookTokenImpl=function(){var e=null;if(T().isBrowser&&(e=window.FB),!e){var t="no fb sdk available";return H.debug(t),Promise.reject(new L(t))}return new Promise((function(t,n){e.getLoginStatus((function(e){if(e&&e.authResponse){var r=e.authResponse,o=r.accessToken,i=1e3*r.expiresIn+(new Date).getTime();o||(s="the jwtToken is undefined",H.debug(s),n(new L(s))),t({token:o,expires_at:i})}else{var s="no response from facebook when refreshing the jwt token";H.debug(s),n(new L(s))}}),{scope:"public_profile,email"})}))},e}(),$=new W,Y=new G,J="aws-amplify/4.5.8",Z={userAgent:J+" js",product:"",navigator:null,isReactNative:!1};"undefined"!=typeof navigator&&navigator.product&&(Z.product=navigator.product||"",Z.navigator=navigator||null,"ReactNative"===navigator.product?(Z.userAgent=J+" react-native",Z.isReactNative=!0):(Z.userAgent=J+" js",Z.isReactNative=!1));var Q=function(){return Z.userAgent},X=new l("Amplify"),ee=function(){function e(){this._components=[],this._config={},this._modules={},this.Auth=null,this.Analytics=null,this.API=null,this.Credentials=null,this.Storage=null,this.I18n=null,this.Cache=null,this.PubSub=null,this.Interactions=null,this.Pushnotification=null,this.UI=null,this.XR=null,this.Predictions=null,this.DataStore=null,this.Geo=null,this.Logger=l,this.ServiceWorker=null}return e.prototype.register=function(e){X.debug("component registered in amplify",e),this._components.push(e),"function"==typeof e.getModuleName?(this._modules[e.getModuleName()]=e,this[e.getModuleName()]=e):X.debug("no getModuleName method for component",e),e.configure(this._config)},e.prototype.configure=function(e){var t=this;return e?(this._config=Object.assign(this._config,e),X.debug("amplify config",this._config),Object.entries(this._modules).forEach((function(e){var n=function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)s.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return s}(e,2),r=(n[0],n[1]);Object.keys(r).forEach((function(e){t._modules[e]&&(r[e]=t._modules[e])}))})),this._components.map((function(e){e.configure(t._config)})),this._config):this._config},e.prototype.addPluggable=function(e){e&&e.getCategory&&"function"==typeof e.getCategory&&this._components.map((function(t){t.addPluggable&&"function"==typeof t.addPluggable&&t.addPluggable(e)}))},e}(),te=new ee;function ne(e,t,n,r){return new(n||(n=Promise))((function(o,i){function s(e){try{u(r.next(e))}catch(e){i(e)}}function a(e){try{u(r.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}u((r=r.apply(e,t||[])).next())}))}function re(e,t){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}}var oe=function(e,t){return oe=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},oe(e,t)};function ie(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}oe(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}var se,ae,ue,ce,le,fe,he,de,pe,ge,ye,ve,me,be,we,Se,_e,Ae,Ee,Pe,xe,Oe,Ie,Ce,Te,ke,Ue,Re,je,Me,Ne,De,Fe,Le,Be,Ve,qe,ze,We,He,Ke,Ge,$e,Ye,Je,Ze,Qe,Xe,et,tt,nt,rt,ot,it,st,at,ut,ct=function(){return ct=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},ct.apply(this,arguments)};function lt(e,t,n,r){return new(n||(n=Promise))((function(o,i){function s(e){try{u(r.next(e))}catch(e){i(e)}}function a(e){try{u(r.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}u((r=r.apply(e,t||[])).next())}))}function ft(e,t){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}}Object.create,Object.create,function(e){e.AUTHENTICATED_ROLE="AuthenticatedRole",e.DENY="Deny"}(se||(se={})),function(e){e.filterSensitiveLog=function(e){return ct({},e)}}(ae||(ae={})),function(e){e.filterSensitiveLog=function(e){return ct({},e)}}(ue||(ue={})),function(e){e.filterSensitiveLog=function(e){return ct({},e)}}(ce||(ce={})),function(e){e.filterSensitiveLog=function(e){return ct({},e)}}(le||(le={})),function(e){e.filterSensitiveLog=function(e){return ct({},e)}}(fe||(fe={})),function(e){e.filterSensitiveLog=function(e){return ct({},e)}}(he||(he={})),function(e){e.filterSensitiveLog=function(e){return ct({},e)}}(de||(de={})),function(e){e.filterSensitiveLog=function(e){return ct({},e)}}(pe||(pe={})),function(e){e.filterSensitiveLog=function(e){return ct({},e)}}(ge||(ge={})),function(e){e.filterSensitiveLog=function(e){return ct({},e)}}(ye||(ye={})),function(e){e.ACCESS_DENIED="AccessDenied",e.INTERNAL_SERVER_ERROR="InternalServerError"}(ve||(ve={})),function(e){e.filterSensitiveLog=function(e){return ct({},e)}}(me||(me={})),function(e){e.filterSensitiveLog=function(e){return ct({},e)}}(be||(be={})),function(e){e.filterSensitiveLog=function(e){return ct({},e)}}(we||(we={})),function(e){e.filterSensitiveLog=function(e){return ct({},e)}}(Se||(Se={})),function(e){e.filterSensitiveLog=function(e){return ct({},e)}}(_e||(_e={})),function(e){e.filterSensitiveLog=function(e){return ct({},e)}}(Ae||(Ae={})),function(e){e.filterSensitiveLog=function(e){return ct({},e)}}(Ee||(Ee={})),function(e){e.filterSensitiveLog=function(e){return ct({},e)}}(Pe||(Pe={})),function(e){e.filterSensitiveLog=function(e){return ct({},e)}}(xe||(xe={})),function(e){e.filterSensitiveLog=function(e){return ct({},e)}}(Oe||(Oe={})),function(e){e.filterSensitiveLog=function(e){return ct({},e)}}(Ie||(Ie={})),function(e){e.filterSensitiveLog=function(e){return ct({},e)}}(Ce||(Ce={})),function(e){e.filterSensitiveLog=function(e){return ct({},e)}}(Te||(Te={})),function(e){e.filterSensitiveLog=function(e){return ct({},e)}}(ke||(ke={})),function(e){e.filterSensitiveLog=function(e){return ct({},e)}}(Ue||(Ue={})),function(e){e.CONTAINS="Contains",e.EQUALS="Equals",e.NOT_EQUAL="NotEqual",e.STARTS_WITH="StartsWith"}(Re||(Re={})),function(e){e.filterSensitiveLog=function(e){return ct({},e)}}(je||(je={})),function(e){e.filterSensitiveLog=function(e){return ct({},e)}}(Me||(Me={})),function(e){e.RULES="Rules",e.TOKEN="Token"}(Ne||(Ne={})),function(e){e.filterSensitiveLog=function(e){return ct({},e)}}(De||(De={})),function(e){e.filterSensitiveLog=function(e){return ct({},e)}}(Fe||(Fe={})),function(e){e.filterSensitiveLog=function(e){return ct({},e)}}(Le||(Le={})),function(e){e.filterSensitiveLog=function(e){return ct({},e)}}(Be||(Be={})),function(e){e.filterSensitiveLog=function(e){return ct({},e)}}(Ve||(Ve={})),function(e){e.filterSensitiveLog=function(e){return ct({},e)}}(qe||(qe={})),function(e){e.filterSensitiveLog=function(e){return ct({},e)}}(ze||(ze={})),function(e){e.filterSensitiveLog=function(e){return ct({},e)}}(We||(We={})),function(e){e.filterSensitiveLog=function(e){return ct({},e)}}(He||(He={})),function(e){e.filterSensitiveLog=function(e){return ct({},e)}}(Ke||(Ke={})),function(e){e.filterSensitiveLog=function(e){return ct({},e)}}(Ge||(Ge={})),function(e){e.filterSensitiveLog=function(e){return ct({},e)}}($e||($e={})),function(e){e.filterSensitiveLog=function(e){return ct({},e)}}(Ye||(Ye={})),function(e){e.filterSensitiveLog=function(e){return ct({},e)}}(Je||(Je={})),function(e){e.filterSensitiveLog=function(e){return ct({},e)}}(Ze||(Ze={})),function(e){e.filterSensitiveLog=function(e){return ct({},e)}}(Qe||(Qe={})),function(e){e.filterSensitiveLog=function(e){return ct({},e)}}(Xe||(Xe={})),function(e){e.filterSensitiveLog=function(e){return ct({},e)}}(et||(et={})),function(e){e.filterSensitiveLog=function(e){return ct({},e)}}(tt||(tt={})),function(e){e.filterSensitiveLog=function(e){return ct({},e)}}(nt||(nt={})),function(e){e.filterSensitiveLog=function(e){return ct({},e)}}(rt||(rt={})),function(e){e.filterSensitiveLog=function(e){return ct({},e)}}(ot||(ot={})),function(e){e.filterSensitiveLog=function(e){return ct({},e)}}(it||(it={})),function(e){e.filterSensitiveLog=function(e){return ct({},e)}}(st||(st={})),function(e){e.filterSensitiveLog=function(e){return ct({},e)}}(at||(at={})),function(e){e.filterSensitiveLog=function(e){return ct({},e)}}(ut||(ut={}));var ht=function(){function e(e){this.statusCode=e.statusCode,this.headers=e.headers||{},this.body=e.body}return e.isInstance=function(e){if(!e)return!1;var t=e;return"number"==typeof t.statusCode&&"object"==typeof t.headers},e}(),dt=function(){return dt=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},dt.apply(this,arguments)};function pt(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)s.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return s}var gt=function(){function e(e){this.method=e.method||"GET",this.hostname=e.hostname||"localhost",this.port=e.port,this.query=e.query||{},this.headers=e.headers||{},this.body=e.body,this.protocol=e.protocol?":"!==e.protocol.substr(-1)?e.protocol+":":e.protocol:"https:",this.path=e.path?"/"!==e.path.charAt(0)?"/"+e.path:e.path:"/"}return e.isInstance=function(e){if(!e)return!1;var t=e;return"method"in t&&"protocol"in t&&"hostname"in t&&"path"in t&&"object"==typeof t.query&&"object"==typeof t.headers},e.prototype.clone=function(){var t,n=new e(dt(dt({},this),{headers:dt({},this.headers)}));return n.query&&(n.query=(t=n.query,Object.keys(t).reduce((function(e,n){var r,o=t[n];return dt(dt({},e),((r={})[n]=Array.isArray(o)?function(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(pt(arguments[t]));return e}(o):o,r))}),{}))),n},e}(),yt=function(e,t){return lt(void 0,void 0,void 0,(function(){var n,r,o,i,s,a,u,c,l,f,h,d,p,g,y;return ft(this,(function(v){switch(v.label){case 0:return r=[ct({},e)],y={},[4,Bt(e.body,t)];case 1:switch(n=ct.apply(void 0,r.concat([(y.body=v.sent(),y)])),i="UnknownError",i=Vt(e,n.body)){case"ExternalServiceException":case"com.amazonaws.cognitoidentity#ExternalServiceException":return[3,2];case"InternalErrorException":case"com.amazonaws.cognitoidentity#InternalErrorException":return[3,4];case"InvalidIdentityPoolConfigurationException":case"com.amazonaws.cognitoidentity#InvalidIdentityPoolConfigurationException":return[3,6];case"InvalidParameterException":case"com.amazonaws.cognitoidentity#InvalidParameterException":return[3,8];case"NotAuthorizedException":case"com.amazonaws.cognitoidentity#NotAuthorizedException":return[3,10];case"ResourceConflictException":case"com.amazonaws.cognitoidentity#ResourceConflictException":return[3,12];case"ResourceNotFoundException":case"com.amazonaws.cognitoidentity#ResourceNotFoundException":return[3,14];case"TooManyRequestsException":case"com.amazonaws.cognitoidentity#TooManyRequestsException":return[3,16]}return[3,18];case 2:return s=[{}],[4,mt(n,t)];case 3:return o=ct.apply(void 0,[ct.apply(void 0,s.concat([v.sent()])),{name:i,$metadata:Ft(e)}]),[3,19];case 4:return a=[{}],[4,bt(n,t)];case 5:return o=ct.apply(void 0,[ct.apply(void 0,a.concat([v.sent()])),{name:i,$metadata:Ft(e)}]),[3,19];case 6:return u=[{}],[4,wt(n,t)];case 7:return o=ct.apply(void 0,[ct.apply(void 0,u.concat([v.sent()])),{name:i,$metadata:Ft(e)}]),[3,19];case 8:return c=[{}],[4,St(n,t)];case 9:return o=ct.apply(void 0,[ct.apply(void 0,c.concat([v.sent()])),{name:i,$metadata:Ft(e)}]),[3,19];case 10:return l=[{}],[4,At(n,t)];case 11:return o=ct.apply(void 0,[ct.apply(void 0,l.concat([v.sent()])),{name:i,$metadata:Ft(e)}]),[3,19];case 12:return f=[{}],[4,Et(n,t)];case 13:return o=ct.apply(void 0,[ct.apply(void 0,f.concat([v.sent()])),{name:i,$metadata:Ft(e)}]),[3,19];case 14:return h=[{}],[4,Pt(n,t)];case 15:return o=ct.apply(void 0,[ct.apply(void 0,h.concat([v.sent()])),{name:i,$metadata:Ft(e)}]),[3,19];case 16:return d=[{}],[4,xt(n,t)];case 17:return o=ct.apply(void 0,[ct.apply(void 0,d.concat([v.sent()])),{name:i,$metadata:Ft(e)}]),[3,19];case 18:p=n.body,i=p.code||p.Code||i,o=ct(ct({},p),{name:""+i,message:p.message||p.Message||i,$fault:"client",$metadata:Ft(e)}),v.label=19;case 19:return g=o.message||o.Message||i,o.message=g,delete o.Message,[2,Promise.reject(Object.assign(new Error(g),o))]}}))}))},vt=function(e,t){return lt(void 0,void 0,void 0,(function(){var n,r,o,i,s,a,u,c,l,f,h,d,p,g,y;return ft(this,(function(v){switch(v.label){case 0:return r=[ct({},e)],y={},[4,Bt(e.body,t)];case 1:switch(n=ct.apply(void 0,r.concat([(y.body=v.sent(),y)])),i="UnknownError",i=Vt(e,n.body)){case"ExternalServiceException":case"com.amazonaws.cognitoidentity#ExternalServiceException":return[3,2];case"InternalErrorException":case"com.amazonaws.cognitoidentity#InternalErrorException":return[3,4];case"InvalidParameterException":case"com.amazonaws.cognitoidentity#InvalidParameterException":return[3,6];case"LimitExceededException":case"com.amazonaws.cognitoidentity#LimitExceededException":return[3,8];case"NotAuthorizedException":case"com.amazonaws.cognitoidentity#NotAuthorizedException":return[3,10];case"ResourceConflictException":case"com.amazonaws.cognitoidentity#ResourceConflictException":return[3,12];case"ResourceNotFoundException":case"com.amazonaws.cognitoidentity#ResourceNotFoundException":return[3,14];case"TooManyRequestsException":case"com.amazonaws.cognitoidentity#TooManyRequestsException":return[3,16]}return[3,18];case 2:return s=[{}],[4,mt(n,t)];case 3:return o=ct.apply(void 0,[ct.apply(void 0,s.concat([v.sent()])),{name:i,$metadata:Ft(e)}]),[3,19];case 4:return a=[{}],[4,bt(n,t)];case 5:return o=ct.apply(void 0,[ct.apply(void 0,a.concat([v.sent()])),{name:i,$metadata:Ft(e)}]),[3,19];case 6:return u=[{}],[4,St(n,t)];case 7:return o=ct.apply(void 0,[ct.apply(void 0,u.concat([v.sent()])),{name:i,$metadata:Ft(e)}]),[3,19];case 8:return c=[{}],[4,_t(n,t)];case 9:return o=ct.apply(void 0,[ct.apply(void 0,c.concat([v.sent()])),{name:i,$metadata:Ft(e)}]),[3,19];case 10:return l=[{}],[4,At(n,t)];case 11:return o=ct.apply(void 0,[ct.apply(void 0,l.concat([v.sent()])),{name:i,$metadata:Ft(e)}]),[3,19];case 12:return f=[{}],[4,Et(n,t)];case 13:return o=ct.apply(void 0,[ct.apply(void 0,f.concat([v.sent()])),{name:i,$metadata:Ft(e)}]),[3,19];case 14:return h=[{}],[4,Pt(n,t)];case 15:return o=ct.apply(void 0,[ct.apply(void 0,h.concat([v.sent()])),{name:i,$metadata:Ft(e)}]),[3,19];case 16:return d=[{}],[4,xt(n,t)];case 17:return o=ct.apply(void 0,[ct.apply(void 0,d.concat([v.sent()])),{name:i,$metadata:Ft(e)}]),[3,19];case 18:p=n.body,i=p.code||p.Code||i,o=ct(ct({},p),{name:""+i,message:p.message||p.Message||i,$fault:"client",$metadata:Ft(e)}),v.label=19;case 19:return g=o.message||o.Message||i,o.message=g,delete o.Message,[2,Promise.reject(Object.assign(new Error(g),o))]}}))}))},mt=function(e,t){return lt(void 0,void 0,void 0,(function(){var n,r;return ft(this,(function(o){return n=e.body,r=Ct(n,t),[2,ct({name:"ExternalServiceException",$fault:"client",$metadata:Ft(e)},r)]}))}))},bt=function(e,t){return lt(void 0,void 0,void 0,(function(){var n,r;return ft(this,(function(o){return n=e.body,r=Tt(n,t),[2,ct({name:"InternalErrorException",$fault:"server",$metadata:Ft(e)},r)]}))}))},wt=function(e,t){return lt(void 0,void 0,void 0,(function(){var n,r;return ft(this,(function(o){return n=e.body,r=kt(n,t),[2,ct({name:"InvalidIdentityPoolConfigurationException",$fault:"client",$metadata:Ft(e)},r)]}))}))},St=function(e,t){return lt(void 0,void 0,void 0,(function(){var n,r;return ft(this,(function(o){return n=e.body,r=Ut(n,t),[2,ct({name:"InvalidParameterException",$fault:"client",$metadata:Ft(e)},r)]}))}))},_t=function(e,t){return lt(void 0,void 0,void 0,(function(){var n,r;return ft(this,(function(o){return n=e.body,r=Rt(n,t),[2,ct({name:"LimitExceededException",$fault:"client",$metadata:Ft(e)},r)]}))}))},At=function(e,t){return lt(void 0,void 0,void 0,(function(){var n,r;return ft(this,(function(o){return n=e.body,r=jt(n,t),[2,ct({name:"NotAuthorizedException",$fault:"client",$metadata:Ft(e)},r)]}))}))},Et=function(e,t){return lt(void 0,void 0,void 0,(function(){var n,r;return ft(this,(function(o){return n=e.body,r=Mt(n,t),[2,ct({name:"ResourceConflictException",$fault:"client",$metadata:Ft(e)},r)]}))}))},Pt=function(e,t){return lt(void 0,void 0,void 0,(function(){var n,r;return ft(this,(function(o){return n=e.body,r=Nt(n,t),[2,ct({name:"ResourceNotFoundException",$fault:"client",$metadata:Ft(e)},r)]}))}))},xt=function(e,t){return lt(void 0,void 0,void 0,(function(){var n,r;return ft(this,(function(o){return n=e.body,r=Dt(n,t),[2,ct({name:"TooManyRequestsException",$fault:"client",$metadata:Ft(e)},r)]}))}))},Ot=function(e,t){return Object.entries(e).reduce((function(e,t){var n,r=function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)s.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return s}(t,2),o=r[0],i=r[1];return null===i?e:ct(ct({},e),((n={})[o]=i,n))}),{})},It=function(e,t){return{AccessKeyId:void 0!==e.AccessKeyId&&null!==e.AccessKeyId?e.AccessKeyId:void 0,Expiration:void 0!==e.Expiration&&null!==e.Expiration?new Date(Math.round(1e3*e.Expiration)):void 0,SecretKey:void 0!==e.SecretKey&&null!==e.SecretKey?e.SecretKey:void 0,SessionToken:void 0!==e.SessionToken&&null!==e.SessionToken?e.SessionToken:void 0}},Ct=function(e,t){return{message:void 0!==e.message&&null!==e.message?e.message:void 0}},Tt=function(e,t){return{message:void 0!==e.message&&null!==e.message?e.message:void 0}},kt=function(e,t){return{message:void 0!==e.message&&null!==e.message?e.message:void 0}},Ut=function(e,t){return{message:void 0!==e.message&&null!==e.message?e.message:void 0}},Rt=function(e,t){return{message:void 0!==e.message&&null!==e.message?e.message:void 0}},jt=function(e,t){return{message:void 0!==e.message&&null!==e.message?e.message:void 0}},Mt=function(e,t){return{message:void 0!==e.message&&null!==e.message?e.message:void 0}},Nt=function(e,t){return{message:void 0!==e.message&&null!==e.message?e.message:void 0}},Dt=function(e,t){return{message:void 0!==e.message&&null!==e.message?e.message:void 0}},Ft=function(e){var t;return{httpStatusCode:e.statusCode,requestId:null!==(t=e.headers["x-amzn-requestid"])&&void 0!==t?t:e.headers["x-amzn-request-id"],extendedRequestId:e.headers["x-amz-id-2"],cfId:e.headers["x-amz-cf-id"]}},Lt=function(e,t,n,r,o){return lt(void 0,void 0,void 0,(function(){var i,s,a,u,c,l;return ft(this,(function(f){switch(f.label){case 0:return[4,e.endpoint()];case 1:return i=f.sent(),s=i.hostname,a=i.protocol,u=void 0===a?"https":a,c=i.port,l={protocol:u,hostname:s,port:c,method:"POST",path:n,headers:t},void 0!==r&&(l.hostname=r),void 0!==o&&(l.body=o),[2,new gt(l)]}}))}))},Bt=function(e,t){return function(e,t){return function(e,t){return void 0===e&&(e=new Uint8Array),e instanceof Uint8Array?Promise.resolve(e):t.streamCollector(e)||Promise.resolve(new Uint8Array)}(e,t).then((function(e){return t.utf8Encoder(e)}))}(e,t).then((function(e){return e.length?JSON.parse(e):{}}))},Vt=function(e,t){var n,r=function(e){var t=e;return t.indexOf(":")>=0&&(t=t.split(":")[0]),t.indexOf("#")>=0&&(t=t.split("#")[1]),t},o=(n=e.headers,"x-amzn-errortype",Object.keys(n).find((function(e){return e.toLowerCase()==="x-amzn-errortype".toLowerCase()})));return void 0!==o?r(e.headers[o]):void 0!==t.code?r(t.code):void 0!==t.__type?r(t.__type):""},qt=function(){return qt=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},qt.apply(this,arguments)};function zt(e,t,n,r){return new(n||(n=Promise))((function(o,i){function s(e){try{u(r.next(e))}catch(e){i(e)}}function a(e){try{u(r.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}u((r=r.apply(e,t||[])).next())}))}function Wt(e,t){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}}var Ht={name:"deserializerMiddleware",step:"deserialize",tags:["DESERIALIZER"],override:!0},Kt={name:"serializerMiddleware",step:"serialize",tags:["SERIALIZER"],override:!0};function Gt(e,t,n){return{applyToStack:function(r){r.add(function(e,t){return function(n,r){return function(r){return zt(void 0,void 0,void 0,(function(){var o,i;return Wt(this,(function(s){switch(s.label){case 0:return[4,n(r)];case 1:return o=s.sent().response,[4,t(o,e)];case 2:return i=s.sent(),[2,{response:o,output:i}]}}))}))}}}(e,n),Ht),r.add(function(e,t){return function(n,r){return function(r){return zt(void 0,void 0,void 0,(function(){var o;return Wt(this,(function(i){switch(i.label){case 0:return[4,t(r.input,e)];case 1:return o=i.sent(),[2,n(qt(qt({},r),{request:o}))]}}))}))}}}(e,t),Kt)}}}var $t=function(){return $t=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},$t.apply(this,arguments)};function Yt(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)s.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return s}function Jt(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(Yt(arguments[t]));return e}var Zt=function(){var e=[],t=[],n=new Set,r=function(n){return e.forEach((function(e){n.add(e.middleware,$t({},e))})),t.forEach((function(e){n.addRelativeTo(e.middleware,$t({},e))})),n},o=function(e){var t=[];return e.before.forEach((function(e){0===e.before.length&&0===e.after.length?t.push(e):t.push.apply(t,Jt(o(e)))})),t.push(e),e.after.reverse().forEach((function(e){0===e.before.length&&0===e.after.length?t.push(e):t.push.apply(t,Jt(o(e)))})),t},i={add:function(t,r){void 0===r&&(r={});var o=r.name,i=r.override,s=$t({step:"initialize",priority:"normal",middleware:t},r);if(o){if(n.has(o)){if(!i)throw new Error("Duplicate middleware name '"+o+"'");var a=e.findIndex((function(e){return e.name===o})),u=e[a];if(u.step!==s.step||u.priority!==s.priority)throw new Error('"'+o+'" middleware with '+u.priority+" priority in "+u.step+" step cannot be overridden by same-name middleware with "+s.priority+" priority in "+s.step+" step.");e.splice(a,1)}n.add(o)}e.push(s)},addRelativeTo:function(e,r){var o=r.name,i=r.override,s=$t({middleware:e},r);if(o){if(n.has(o)){if(!i)throw new Error("Duplicate middleware name '"+o+"'");var a=t.findIndex((function(e){return e.name===o})),u=t[a];if(u.toMiddleware!==s.toMiddleware||u.relation!==s.relation)throw new Error('"'+o+'" middleware '+u.relation+' "'+u.toMiddleware+'" middleware cannot be overridden by same-name middleware '+s.relation+' "'+s.toMiddleware+'" middleware.');t.splice(a,1)}n.add(o)}t.push(s)},clone:function(){return r(Zt())},use:function(e){e.applyToStack(i)},remove:function(r){return"string"==typeof r?function(r){var o=!1,i=function(e){return!e.name||e.name!==r||(o=!0,n.delete(r),!1)};return e=e.filter(i),t=t.filter(i),o}(r):function(r){var o=!1,i=function(e){return e.middleware!==r||(o=!0,e.name&&n.delete(e.name),!1)};return e=e.filter(i),t=t.filter(i),o}(r)},removeByTag:function(r){var o=!1,i=function(e){var t=e.tags,i=e.name;return!t||!t.includes(r)||(i&&n.delete(i),o=!0,!1)};return e=e.filter(i),t=t.filter(i),o},concat:function(e){var t=r(Zt());return t.use(e),t},applyToStack:r,resolve:function(n,r){var i,s;try{for(var a=function(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}(function(){var n,r=[],i=[],s={};return e.forEach((function(e){var t=$t($t({},e),{before:[],after:[]});t.name&&(s[t.name]=t),r.push(t)})),t.forEach((function(e){var t=$t($t({},e),{before:[],after:[]});t.name&&(s[t.name]=t),i.push(t)})),i.forEach((function(e){if(e.toMiddleware){var t=s[e.toMiddleware];if(void 0===t)throw new Error(e.toMiddleware+" is not found when adding "+(e.name||"anonymous")+" middleware "+e.relation+" "+e.toMiddleware);"after"===e.relation&&t.after.push(e),"before"===e.relation&&t.before.push(e)}})),(n=r,n.sort((function(e,t){return Qt[t.step]-Qt[e.step]||Xt[t.priority||"normal"]-Xt[e.priority||"normal"]}))).map(o).reduce((function(e,t){return e.push.apply(e,Jt(t)),e}),[]).map((function(e){return e.middleware}))}().reverse()),u=a.next();!u.done;u=a.next())n=(0,u.value)(n,r)}catch(e){i={error:e}}finally{try{u&&!u.done&&(s=a.return)&&s.call(a)}finally{if(i)throw i.error}}return n}};return i},Qt={initialize:5,serialize:4,build:3,finalizeRequest:2,deserialize:1},Xt={high:3,normal:2,low:1},en=function(){function e(e){this.middlewareStack=Zt(),this.config=e}return e.prototype.send=function(e,t,n){var r="function"!=typeof t?t:void 0,o="function"==typeof t?t:n,i=e.resolveMiddleware(this.middlewareStack,this.config,r);if(!o)return i(e).then((function(e){return e.output}));i(e).then((function(e){return o(null,e.output)}),(function(e){return o(e)})).catch((function(){}))},e.prototype.destroy=function(){this.config.requestHandler.destroy&&this.config.requestHandler.destroy()},e}(),tn=function(){this.middlewareStack=Zt()},nn=function(e,t){return nn=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},nn(e,t)};function rn(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)s.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return s}var on=function(){var e=Object.getPrototypeOf(this).constructor,t=Function.bind.apply(String,function(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(rn(arguments[t]));return e}([null],arguments)),n=new t;return Object.setPrototypeOf(n,e.prototype),n};on.prototype=Object.create(String.prototype,{constructor:{value:on,enumerable:!1,writable:!0,configurable:!0}}),Object.setPrototypeOf(on,String),function(e){function t(){return null!==e&&e.apply(this,arguments)||this}(function(e,t){function n(){this.constructor=e}nn(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)})(t,e),t.prototype.deserializeJSON=function(){return JSON.parse(e.prototype.toString.call(this))},t.prototype.toJSON=function(){return e.prototype.toString.call(this)},t.fromObject=function(e){return e instanceof t?e:new t(e instanceof String||"string"==typeof e?e:JSON.stringify(e))}}(on);var sn=function(e){function t(t){var n=e.call(this)||this;return n.input=t,n}return ie(t,e),t.prototype.resolveMiddleware=function(e,t,n){this.middlewareStack.use(Gt(t,this.serialize,this.deserialize));var r=e.concat(this.middlewareStack),o={logger:t.logger,clientName:"CognitoIdentityClient",commandName:"GetCredentialsForIdentityCommand",inputFilterSensitiveLog:xe.filterSensitiveLog,outputFilterSensitiveLog:Ie.filterSensitiveLog},i=t.requestHandler;return r.resolve((function(e){return i.handle(e.request,n||{})}),o)},t.prototype.serialize=function(e,t){return function(e,t){return lt(void 0,void 0,void 0,(function(){var n,r;return ft(this,(function(o){return n={"content-type":"application/x-amz-json-1.1","x-amz-target":"AWSCognitoIdentityService.GetCredentialsForIdentity"},r=JSON.stringify(function(e,t){return ct(ct(ct({},void 0!==e.CustomRoleArn&&null!==e.CustomRoleArn&&{CustomRoleArn:e.CustomRoleArn}),void 0!==e.IdentityId&&null!==e.IdentityId&&{IdentityId:e.IdentityId}),void 0!==e.Logins&&null!==e.Logins&&{Logins:Ot(e.Logins,t)})}(e,t)),[2,Lt(t,n,"/",void 0,r)]}))}))}(e,t)},t.prototype.deserialize=function(e,t){return function(e,t){return lt(void 0,void 0,void 0,(function(){var n,r,o;return ft(this,(function(i){switch(i.label){case 0:return e.statusCode>=300?[2,yt(e,t)]:[4,Bt(e.body,t)];case 1:return n=i.sent(),r=function(e,t){return{Credentials:void 0!==e.Credentials&&null!==e.Credentials?It(e.Credentials):void 0,IdentityId:void 0!==e.IdentityId&&null!==e.IdentityId?e.IdentityId:void 0}}(n),o=ct({$metadata:Ft(e)},r),[2,Promise.resolve(o)]}}))}))}(e,t)},t}(tn),an=function(e,t){return an=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},an(e,t)},un=function(e){function t(t,n){void 0===n&&(n=!0);var r=e.call(this,t)||this;return r.tryNextLink=n,r}return function(e,t){function n(){this.constructor=e}an(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}(t,e),t}(Error);function cn(e){return Promise.all(Object.keys(e).reduce((function(t,n){var r=e[n];return"string"==typeof r?t.push([n,r]):t.push(r().then((function(e){return[n,e]}))),t}),[])).then((function(e){return e.reduce((function(e,t){var n=function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)s.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return s}(t,2),r=n[0],o=n[1];return e[r]=o,e}),{})}))}function ln(e){var t=this;return function(){return ne(t,void 0,void 0,(function(){var t,n,r,o,i,s,a,u,c,l,f,h,d;return re(this,(function(p){switch(p.label){case 0:return l=(c=e.client).send,f=sn.bind,d={CustomRoleArn:e.customRoleArn,IdentityId:e.identityId},e.logins?[4,cn(e.logins)]:[3,2];case 1:return h=p.sent(),[3,3];case 2:h=void 0,p.label=3;case 3:return[4,l.apply(c,[new(f.apply(sn,[void 0,(d.Logins=h,d)]))])];case 4:return t=p.sent().Credentials,n=void 0===t?function(){throw new un("Response from Amazon Cognito contained no credentials")}():t,r=n.AccessKeyId,o=void 0===r?function(){throw new un("Response from Amazon Cognito contained no access key ID")}():r,i=n.Expiration,s=n.SecretKey,a=void 0===s?function(){throw new un("Response from Amazon Cognito contained no secret key")}():s,u=n.SessionToken,[2,{identityId:e.identityId,accessKeyId:o,secretAccessKey:a,sessionToken:u,expiration:i}]}}))}))}}var fn=function(e){function t(t){var n=e.call(this)||this;return n.input=t,n}return ie(t,e),t.prototype.resolveMiddleware=function(e,t,n){this.middlewareStack.use(Gt(t,this.serialize,this.deserialize));var r=e.concat(this.middlewareStack),o={logger:t.logger,clientName:"CognitoIdentityClient",commandName:"GetIdCommand",inputFilterSensitiveLog:Te.filterSensitiveLog,outputFilterSensitiveLog:ke.filterSensitiveLog},i=t.requestHandler;return r.resolve((function(e){return i.handle(e.request,n||{})}),o)},t.prototype.serialize=function(e,t){return function(e,t){return lt(void 0,void 0,void 0,(function(){var n,r;return ft(this,(function(o){return n={"content-type":"application/x-amz-json-1.1","x-amz-target":"AWSCognitoIdentityService.GetId"},r=JSON.stringify(function(e,t){return ct(ct(ct({},void 0!==e.AccountId&&null!==e.AccountId&&{AccountId:e.AccountId}),void 0!==e.IdentityPoolId&&null!==e.IdentityPoolId&&{IdentityPoolId:e.IdentityPoolId}),void 0!==e.Logins&&null!==e.Logins&&{Logins:Ot(e.Logins,t)})}(e,t)),[2,Lt(t,n,"/",void 0,r)]}))}))}(e,t)},t.prototype.deserialize=function(e,t){return function(e,t){return lt(void 0,void 0,void 0,(function(){var n,r,o;return ft(this,(function(i){switch(i.label){case 0:return e.statusCode>=300?[2,vt(e,t)]:[4,Bt(e.body,t)];case 1:return n=i.sent(),r=function(e,t){return{IdentityId:void 0!==e.IdentityId&&null!==e.IdentityId?e.IdentityId:void 0}}(n),o=ct({$metadata:Ft(e)},r),[2,Promise.resolve(o)]}}))}))}(e,t)},t}(tn),hn="IdentityIds",dn=function(){function e(e){void 0===e&&(e="aws:cognito-identity-ids"),this.dbName=e}return e.prototype.getItem=function(e){return this.withObjectStore("readonly",(function(t){var n=t.get(e);return new Promise((function(e){n.onerror=function(){return e(null)},n.onsuccess=function(){return e(n.result?n.result.value:null)}}))})).catch((function(){return null}))},e.prototype.removeItem=function(e){return this.withObjectStore("readwrite",(function(t){var n=t.delete(e);return new Promise((function(e,t){n.onerror=function(){return t(n.error)},n.onsuccess=function(){return e()}}))}))},e.prototype.setItem=function(e,t){return this.withObjectStore("readwrite",(function(n){var r=n.put({id:e,value:t});return new Promise((function(e,t){r.onerror=function(){return t(r.error)},r.onsuccess=function(){return e()}}))}))},e.prototype.getDb=function(){var e=self.indexedDB.open(this.dbName,1);return new Promise((function(t,n){e.onsuccess=function(){t(e.result)},e.onerror=function(){n(e.error)},e.onblocked=function(){n(new Error("Unable to access DB"))},e.onupgradeneeded=function(){var t=e.result;t.onerror=function(){n(new Error("Failed to create object store"))},t.createObjectStore(hn,{keyPath:"id"})}}))},e.prototype.withObjectStore=function(e,t){return this.getDb().then((function(n){var r=n.transaction(hn,e);return r.oncomplete=function(){return n.close()},new Promise((function(e,n){r.onerror=function(){return n(r.error)},e(t(r.objectStore(hn)))})).catch((function(e){throw n.close(),e}))}))},e}(),pn=new(function(){function e(e){void 0===e&&(e={}),this.store=e}return e.prototype.getItem=function(e){return e in this.store?this.store[e]:null},e.prototype.removeItem=function(e){delete this.store[e]},e.prototype.setItem=function(e,t){this.store[e]=t},e}());var gn=n(8322);function yn(e,t,n,r){return new(n||(n=Promise))((function(o,i){function s(e){try{u(r.next(e))}catch(e){i(e)}}function a(e){try{u(r.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}u((r=r.apply(e,t||[])).next())}))}function vn(e,t){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}}for(var mn=function(e){return encodeURIComponent(e).replace(/[!'()*]/g,bn)},bn=function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()},wn=function(){function e(e){var t=(void 0===e?{}:e).requestTimeout;this.requestTimeout=t}return e.prototype.destroy=function(){},e.prototype.handle=function(e,t){var n=(void 0===t?{}:t).abortSignal,r=this.requestTimeout;if(null==n?void 0:n.aborted){var o=new Error("Request aborted");return o.name="AbortError",Promise.reject(o)}var i=e.path;if(e.query){var s=function(e){var t,n,r=[];try{for(var o=function(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}(Object.keys(e).sort()),i=o.next();!i.done;i=o.next()){var s=i.value,a=e[s];if(s=mn(s),Array.isArray(a))for(var u=0,c=a.length;u<c;u++)r.push(s+"="+mn(a[u]));else{var l=s;(a||"string"==typeof a)&&(l+="="+mn(a)),r.push(l)}}}catch(e){t={error:e}}finally{try{i&&!i.done&&(n=o.return)&&n.call(o)}finally{if(t)throw t.error}}return r.join("&")}(e.query);s&&(i+="?"+s)}var a=e.port,u=e.method,c=e.protocol+"//"+e.hostname+(a?":"+a:"")+i,l={body:"GET"===u||"HEAD"===u?void 0:e.body,headers:new Headers(e.headers),method:u};"undefined"!=typeof AbortController&&(l.signal=n);var f,h=new Request(c,l),d=[fetch(h).then((function(e){var t,n,r=e.headers,o={};try{for(var i=function(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}(r.entries()),s=i.next();!s.done;s=i.next()){var a=s.value;o[a[0]]=a[1]}}catch(e){t={error:e}}finally{try{s&&!s.done&&(n=i.return)&&n.call(i)}finally{if(t)throw t.error}}return void 0!==e.body?{response:new ht({headers:o,statusCode:e.status,body:e.body})}:e.blob().then((function(t){return{response:new ht({headers:o,statusCode:e.status,body:t})}}))})),(f=r,void 0===f&&(f=0),new Promise((function(e,t){f&&setTimeout((function(){var e=new Error("Request did not complete within "+f+" ms");e.name="TimeoutError",t(e)}),f)})))];return n&&d.push(new Promise((function(e,t){n.onabort=function(){var e=new Error("Request aborted");e.name="AbortError",t(e)}}))),Promise.race(d)},e}(),Sn={},_n=new Array(64),An=0,En="A".charCodeAt(0),Pn="Z".charCodeAt(0);An+En<=Pn;An++){var xn=String.fromCharCode(An+En);Sn[xn]=An,_n[An]=xn}for(An=0,En="a".charCodeAt(0),Pn="z".charCodeAt(0);An+En<=Pn;An++){xn=String.fromCharCode(An+En);var On=An+26;Sn[xn]=On,_n[On]=xn}for(An=0;An<10;An++)Sn[An.toString(10)]=An+52,xn=An.toString(10),On=An+52,Sn[xn]=On,_n[On]=xn;Sn["+"]=62,_n[62]="+",Sn["/"]=63,_n[63]="/";function In(e){var t=e.length/4*3;"=="===e.substr(-2)?t-=2:"="===e.substr(-1)&&t--;for(var n=new ArrayBuffer(t),r=new DataView(n),o=0;o<e.length;o+=4){for(var i=0,s=0,a=o,u=o+3;a<=u;a++)"="!==e[a]?(i|=Sn[e[a]]<<6*(u-a),s+=6):i>>=6;var c=o/4*3;i>>=s%8;for(var l=Math.floor(s/8),f=0;f<l;f++){var h=8*(l-f-1);r.setUint8(c+f,(i&255<<h)>>h)}}return new Uint8Array(n)}function Cn(e){return new Promise((function(t,n){var r=new FileReader;r.onloadend=function(){var e;if(2!==r.readyState)return n(new Error("Reader aborted too early"));var o=null!==(e=r.result)&&void 0!==e?e:"",i=o.indexOf(","),s=i>-1?i+1:o.length;t(o.substring(s))},r.onabort=function(){return n(new Error("Read aborted"))},r.onerror=function(){return n(r.error)},r.readAsDataURL(e)}))}var Tn=function(){return Tn=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},Tn.apply(this,arguments)};function kn(e,t,n,r){return new(n||(n=Promise))((function(o,i){function s(e){try{u(r.next(e))}catch(e){i(e)}}function a(e){try{u(r.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}u((r=r.apply(e,t||[])).next())}))}function Un(e,t){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}}function Rn(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)s.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return s}var jn={name:"retryMiddleware",tags:["RETRY"],step:"finalizeRequest",priority:"high",override:!0},Mn=["AuthFailure","InvalidSignatureException","RequestExpired","RequestInTheFuture","RequestTimeTooSkewed","SignatureDoesNotMatch"],Nn=["BandwidthLimitExceeded","EC2ThrottledException","LimitExceededException","PriorRequestNotComplete","ProvisionedThroughputExceededException","RequestLimitExceeded","RequestThrottled","RequestThrottledException","SlowDown","ThrottledException","Throttling","ThrottlingException","TooManyRequestsException","TransactionInProgressException"],Dn=["AbortError","TimeoutError","RequestTimeout","RequestTimeoutException"],Fn=[500,502,503,504],Ln=function(e){var t,n;return 429===(null===(t=e.$metadata)||void 0===t?void 0:t.httpStatusCode)||Nn.includes(e.name)||1==(null===(n=e.$retryable)||void 0===n?void 0:n.throttling)},Bn=n(273),Vn=function(e,t){return Math.floor(Math.min(2e4,Math.random()*Math.pow(2,t)*e))},qn=function(e){return!!e&&(function(e){return void 0!==e.$retryable}(e)||function(e){return Mn.includes(e.name)}(e)||Ln(e)||function(e){var t;return Dn.includes(e.name)||Fn.includes((null===(t=e.$metadata)||void 0===t?void 0:t.httpStatusCode)||0)}(e))},zn=function(){function e(e,t){var n,r,o,i,s,a,u;this.maxAttemptsProvider=e,this.mode="standard",this.retryDecider=null!==(n=null==t?void 0:t.retryDecider)&&void 0!==n?n:qn,this.delayDecider=null!==(r=null==t?void 0:t.delayDecider)&&void 0!==r?r:Vn,this.retryQuota=null!==(o=null==t?void 0:t.retryQuota)&&void 0!==o?o:(i=500,s=500,a=function(e){return"TimeoutError"===e.name?10:5},u=function(e){return a(e)<=s},Object.freeze({hasRetryTokens:u,retrieveRetryTokens:function(e){if(!u(e))throw new Error("No retry token available");var t=a(e);return s-=t,t},releaseRetryTokens:function(e){s+=null!=e?e:1,s=Math.min(s,i)}}))}return e.prototype.shouldRetry=function(e,t,n){return t<n&&this.retryDecider(e)&&this.retryQuota.hasRetryTokens(e)},e.prototype.getMaxAttempts=function(){return kn(this,void 0,void 0,(function(){var e;return Un(this,(function(t){switch(t.label){case 0:return t.trys.push([0,2,,3]),[4,this.maxAttemptsProvider()];case 1:return e=t.sent(),[3,3];case 2:return t.sent(),e=3,[3,3];case 3:return[2,e]}}))}))},e.prototype.retry=function(e,t){return kn(this,void 0,void 0,(function(){var n,r,o,i,s,a,u,c;return Un(this,(function(l){switch(l.label){case 0:return r=0,o=0,[4,this.getMaxAttempts()];case 1:i=l.sent(),s=t.request,gt.isInstance(s)&&(s.headers["amz-sdk-invocation-id"]=(0,Bn.v4)()),a=function(){var a,c,l,f,h;return Un(this,(function(d){switch(d.label){case 0:return d.trys.push([0,2,,5]),gt.isInstance(s)&&(s.headers["amz-sdk-request"]="attempt="+(r+1)+"; max="+i),[4,e(t)];case 1:return a=d.sent(),c=a.response,l=a.output,u.retryQuota.releaseRetryTokens(n),l.$metadata.attempts=r+1,l.$metadata.totalRetryDelay=o,[2,{value:{response:c,output:l}}];case 2:return f=d.sent(),r++,u.shouldRetry(f,r,i)?(n=u.retryQuota.retrieveRetryTokens(f),h=u.delayDecider(Ln(f)?500:100,r),o+=h,[4,new Promise((function(e){return setTimeout(e,h)}))]):[3,4];case 3:return d.sent(),[2,"continue"];case 4:throw f.$metadata||(f.$metadata={}),f.$metadata.attempts=r,f.$metadata.totalRetryDelay=o,f;case 5:return[2]}}))},u=this,l.label=2;case 2:return[5,a()];case 3:return"object"==typeof(c=l.sent())?[2,c.value]:[3,2];case 4:return[2]}}))}))},e}();var Wn=n(7160),Hn=n.n(Wn),Kn="cognito-identity.{region}.amazonaws.com",Gn=new Set(["af-south-1","ap-east-1","ap-northeast-1","ap-northeast-2","ap-south-1","ap-southeast-1","ap-southeast-2","ca-central-1","eu-central-1","eu-north-1","eu-south-1","eu-west-1","eu-west-2","eu-west-3","me-south-1","sa-east-1","us-east-1","us-east-2","us-west-1","us-west-2"]),$n=new Set(["cn-north-1","cn-northwest-1"]),Yn=new Set(["us-iso-east-1"]),Jn=new Set(["us-isob-east-1"]),Zn=new Set(["us-gov-east-1","us-gov-west-1"]);function Qn(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)s.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return s}var Xn,er,tr,nr={apiVersion:"2014-06-30",disableHostPrefix:!1,logger:{},regionInfoProvider:function(e,t){var n=void 0;switch(e){case"ap-northeast-1":n={hostname:"cognito-identity.ap-northeast-1.amazonaws.com",partition:"aws"};break;case"ap-northeast-2":n={hostname:"cognito-identity.ap-northeast-2.amazonaws.com",partition:"aws"};break;case"ap-south-1":n={hostname:"cognito-identity.ap-south-1.amazonaws.com",partition:"aws"};break;case"ap-southeast-1":n={hostname:"cognito-identity.ap-southeast-1.amazonaws.com",partition:"aws"};break;case"ap-southeast-2":n={hostname:"cognito-identity.ap-southeast-2.amazonaws.com",partition:"aws"};break;case"ca-central-1":n={hostname:"cognito-identity.ca-central-1.amazonaws.com",partition:"aws"};break;case"cn-north-1":n={hostname:"cognito-identity.cn-north-1.amazonaws.com.cn",partition:"aws-cn"};break;case"eu-central-1":n={hostname:"cognito-identity.eu-central-1.amazonaws.com",partition:"aws"};break;case"eu-north-1":n={hostname:"cognito-identity.eu-north-1.amazonaws.com",partition:"aws"};break;case"eu-west-1":n={hostname:"cognito-identity.eu-west-1.amazonaws.com",partition:"aws"};break;case"eu-west-2":n={hostname:"cognito-identity.eu-west-2.amazonaws.com",partition:"aws"};break;case"eu-west-3":n={hostname:"cognito-identity.eu-west-3.amazonaws.com",partition:"aws"};break;case"fips-us-east-1":n={hostname:"cognito-identity-fips.us-east-1.amazonaws.com",partition:"aws",signingRegion:"us-east-1"};break;case"fips-us-east-2":n={hostname:"cognito-identity-fips.us-east-2.amazonaws.com",partition:"aws",signingRegion:"us-east-2"};break;case"fips-us-gov-west-1":n={hostname:"cognito-identity-fips.us-gov-west-1.amazonaws.com",partition:"aws-us-gov",signingRegion:"us-gov-west-1"};break;case"fips-us-west-2":n={hostname:"cognito-identity-fips.us-west-2.amazonaws.com",partition:"aws",signingRegion:"us-west-2"};break;case"sa-east-1":n={hostname:"cognito-identity.sa-east-1.amazonaws.com",partition:"aws"};break;case"us-east-1":n={hostname:"cognito-identity.us-east-1.amazonaws.com",partition:"aws"};break;case"us-east-2":n={hostname:"cognito-identity.us-east-2.amazonaws.com",partition:"aws"};break;case"us-gov-west-1":n={hostname:"cognito-identity.us-gov-west-1.amazonaws.com",partition:"aws-us-gov"};break;case"us-west-1":n={hostname:"cognito-identity.us-west-1.amazonaws.com",partition:"aws"};break;case"us-west-2":n={hostname:"cognito-identity.us-west-2.amazonaws.com",partition:"aws"};break;default:Gn.has(e)&&(n={hostname:Kn.replace("{region}",e),partition:"aws"}),$n.has(e)&&(n={hostname:"cognito-identity.{region}.amazonaws.com.cn".replace("{region}",e),partition:"aws-cn"}),Yn.has(e)&&(n={hostname:"cognito-identity.{region}.c2s.ic.gov".replace("{region}",e),partition:"aws-iso"}),Jn.has(e)&&(n={hostname:"cognito-identity.{region}.sc2s.sgov.gov".replace("{region}",e),partition:"aws-iso-b"}),Zn.has(e)&&(n={hostname:"cognito-identity.{region}.amazonaws.com".replace("{region}",e),partition:"aws-us-gov"}),void 0===n&&(n={hostname:Kn.replace("{region}",e),partition:"aws"})}return Promise.resolve(ct({signingService:"cognito-identity"},n))},serviceId:"Cognito Identity",urlParser:function(e){var t,n=new URL(e),r=n.hostname,o=n.pathname,i=n.port,s=n.protocol,a=n.search;return a&&(t=function(e){var t,n,r={};if(e=e.replace(/^\?/,""))try{for(var o=function(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}(e.split("&")),i=o.next();!i.done;i=o.next()){var s=Qn(i.value.split("="),2),a=s[0],u=s[1],c=void 0===u?null:u;a=decodeURIComponent(a),c&&(c=decodeURIComponent(c)),a in r?Array.isArray(r[a])?r[a].push(c):r[a]=[r[a],c]:r[a]=c}}catch(e){t={error:e}}finally{try{i&&!i.done&&(n=o.return)&&n.call(o)}finally{if(t)throw t.error}}return r}(a)),{hostname:r,port:i?parseInt(i):void 0,protocol:s,path:o,query:t}}},rr=ct(ct({},nr),{runtime:"browser",base64Decoder:In,base64Encoder:function(e){for(var t="",n=0;n<e.length;n+=3){for(var r=0,o=0,i=n,s=Math.min(n+3,e.length);i<s;i++)r|=e[i]<<8*(s-i-1),o+=8;var a=Math.ceil(o/6);r<<=6*a-o;for(var u=1;u<=a;u++){var c=6*(a-u);t+=_n[(r&63<<c)>>c]}t+="==".slice(0,4-a)}return t},bodyLengthChecker:function(e){if("string"==typeof e){for(var t=e.length,n=t-1;n>=0;n--){var r=e.charCodeAt(n);r>127&&r<=2047?t++:r>2047&&r<=65535&&(t+=2)}return t}return"number"==typeof e.byteLength?e.byteLength:"number"==typeof e.size?e.size:void 0},credentialDefaultProvider:function(e){return function(){return Promise.reject(new Error("Credential is missing"))}},defaultUserAgentProvider:(Xn={serviceId:nr.serviceId,clientVersion:"3.6.1"},er=Xn.serviceId,tr=Xn.clientVersion,function(){return e=void 0,t=void 0,r=function(){var e,t,n,r,o,i,s,a,u;return function(e,t){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}}(this,(function(c){return e=(null===(n=null===window||void 0===window?void 0:window.navigator)||void 0===n?void 0:n.userAgent)?Hn().parse(window.navigator.userAgent):void 0,t=[["aws-sdk-js",tr],["os/"+((null===(r=null==e?void 0:e.os)||void 0===r?void 0:r.name)||"other"),null===(o=null==e?void 0:e.os)||void 0===o?void 0:o.version],["lang/js"],["md/browser",(null!==(s=null===(i=null==e?void 0:e.browser)||void 0===i?void 0:i.name)&&void 0!==s?s:"unknown")+"_"+(null!==(u=null===(a=null==e?void 0:e.browser)||void 0===a?void 0:a.version)&&void 0!==u?u:"unknown")]],er&&t.push(["api/"+er,tr]),[2,t]}))},new((n=void 0)||(n=Promise))((function(o,i){function s(e){try{u(r.next(e))}catch(e){i(e)}}function a(e){try{u(r.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}u((r=r.apply(e,t||[])).next())}));var e,t,n,r}),maxAttempts:3,region:("Region is missing",function(){return Promise.reject("Region is missing")}),requestHandler:new wn,sha256:gn.Sha256,streamCollector:function(e){return"function"==typeof Blob&&e instanceof Blob?function(e){return yn(this,void 0,void 0,(function(){var t,n;return vn(this,(function(r){switch(r.label){case 0:return[4,Cn(e)];case 1:return t=r.sent(),n=In(t),[2,new Uint8Array(n)]}}))}))}(e):function(e){return yn(this,void 0,void 0,(function(){var t,n,r,o,i,s,a;return vn(this,(function(u){switch(u.label){case 0:t=new Uint8Array(0),n=e.getReader(),r=!1,u.label=1;case 1:return r?[3,3]:[4,n.read()];case 2:return o=u.sent(),i=o.done,(s=o.value)&&(a=t,(t=new Uint8Array(a.length+s.length)).set(a),t.set(s,a.length)),r=i,[3,1];case 3:return[2,t]}}))}))}(e)},utf8Decoder:function(e){return"function"==typeof TextEncoder?function(e){return(new TextEncoder).encode(e)}(e):function(e){for(var t=[],n=0,r=e.length;n<r;n++){var o=e.charCodeAt(n);if(o<128)t.push(o);else if(o<2048)t.push(o>>6|192,63&o|128);else if(n+1<e.length&&55296==(64512&o)&&56320==(64512&e.charCodeAt(n+1))){var i=65536+((1023&o)<<10)+(1023&e.charCodeAt(++n));t.push(i>>18|240,i>>12&63|128,i>>6&63|128,63&i|128)}else t.push(o>>12|224,o>>6&63|128,63&o|128)}return Uint8Array.from(t)}(e)},utf8Encoder:function(e){return"function"==typeof TextDecoder?function(e){return new TextDecoder("utf-8").decode(e)}(e):function(e){for(var t="",n=0,r=e.length;n<r;n++){var o=e[n];if(o<128)t+=String.fromCharCode(o);else if(192<=o&&o<224){var i=e[++n];t+=String.fromCharCode((31&o)<<6|63&i)}else if(240<=o&&o<365){var s="%"+[o,e[++n],e[++n],e[++n]].map((function(e){return e.toString(16)})).join("%");t+=decodeURIComponent(s)}else t+=String.fromCharCode((15&o)<<12|(63&e[++n])<<6|63&e[++n])}return t}(e)}}),or=function(){return or=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},or.apply(this,arguments)};var ir=function(e){var t=e.endpoint,n=e.urlParser;if("string"==typeof t){var r=Promise.resolve(n(t));return function(){return r}}if("object"==typeof t){var o=Promise.resolve(t);return function(){return o}}return t},sr=function(e){return t=void 0,n=void 0,o=function(){var t,n,r,o,i;return function(e,t){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}}(this,(function(s){switch(s.label){case 0:return t=e.tls,n=void 0===t||t,[4,e.region()];case 1:if(r=s.sent(),!new RegExp(/^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9])$/).test(r))throw new Error("Invalid region in client config");return[4,e.regionInfoProvider(r)];case 2:if(!(o=(null!==(i=s.sent())&&void 0!==i?i:{}).hostname))throw new Error("Cannot resolve hostname from client config");return[2,e.urlParser((n?"https:":"http:")+"//"+o)]}}))},new((r=void 0)||(r=Promise))((function(e,i){function s(e){try{u(o.next(e))}catch(e){i(e)}}function a(e){try{u(o.throw(e))}catch(e){i(e)}}function u(t){var n;t.done?e(t.value):(n=t.value,n instanceof r?n:new r((function(e){e(n)}))).then(s,a)}u((o=o.apply(t,n||[])).next())}));var t,n,r,o},ar=function(e){if("string"==typeof e){var t=Promise.resolve(e);return function(){return t}}return e},ur=function(){return ur=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},ur.apply(this,arguments)};var cr="content-length",lr={step:"build",tags:["SET_CONTENT_LENGTH","CONTENT_LENGTH"],name:"contentLengthMiddleware",override:!0},fr=function(e){return{applyToStack:function(t){t.add(function(e){var t=this;return function(n){return function(r){return o=t,i=void 0,a=function(){var t,o,i,s,a;return function(e,t){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}}(this,(function(u){return t=r.request,gt.isInstance(t)&&(o=t.body,i=t.headers,o&&-1===Object.keys(i).map((function(e){return e.toLowerCase()})).indexOf(cr)&&void 0!==(s=e(o))&&(t.headers=ur(ur({},t.headers),((a={})[cr]=String(s),a)))),[2,n(ur(ur({},r),{request:t}))]}))},new((s=void 0)||(s=Promise))((function(e,t){function n(e){try{u(a.next(e))}catch(e){t(e)}}function r(e){try{u(a.throw(e))}catch(e){t(e)}}function u(t){var o;t.done?e(t.value):(o=t.value,o instanceof s?o:new s((function(e){e(o)}))).then(n,r)}u((a=a.apply(o,i||[])).next())}));var o,i,s,a}}}(e.bodyLengthChecker),lr)}}};var hr={name:"hostHeaderMiddleware",step:"build",priority:"low",tags:["HOST"],override:!0},dr=function(e){return{applyToStack:function(t){t.add(function(e){return function(t){return function(n){return r=void 0,o=void 0,s=function(){var r,o;return function(e,t){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}}(this,(function(i){return gt.isInstance(n.request)?(r=n.request,(void 0===(o=(e.requestHandler.metadata||{}).handlerProtocol)?"":o).indexOf("h2")>=0&&!r.headers[":authority"]?(delete r.headers.host,r.headers[":authority"]=""):r.headers.host||(r.headers.host=r.hostname),[2,t(n)]):[2,t(n)]}))},new((i=void 0)||(i=Promise))((function(e,t){function n(e){try{u(s.next(e))}catch(e){t(e)}}function a(e){try{u(s.throw(e))}catch(e){t(e)}}function u(t){var r;t.done?e(t.value):(r=t.value,r instanceof i?r:new i((function(e){e(r)}))).then(n,a)}u((s=s.apply(r,o||[])).next())}));var r,o,i,s}}}(e),hr)}}};var pr=function(){return function(e,t){return function(n){return r=void 0,o=void 0,s=function(){var r,o,i,s,a,u,c,l,f;return function(e,t){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}}(this,(function(h){switch(h.label){case 0:return r=t.clientName,o=t.commandName,i=t.inputFilterSensitiveLog,s=t.logger,a=t.outputFilterSensitiveLog,[4,e(n)];case 1:return u=h.sent(),s?("function"==typeof s.info&&(c=u.output,l=c.$metadata,f=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n}(c,["$metadata"]),s.info({clientName:r,commandName:o,input:i(n.input),output:a(f),metadata:l})),[2,u]):[2,u]}}))},new((i=void 0)||(i=Promise))((function(e,t){function n(e){try{u(s.next(e))}catch(e){t(e)}}function a(e){try{u(s.throw(e))}catch(e){t(e)}}function u(t){var r;t.done?e(t.value):(r=t.value,r instanceof i?r:new i((function(e){e(r)}))).then(n,a)}u((s=s.apply(r,o||[])).next())}));var r,o,i,s}}},gr={name:"loggerMiddleware",tags:["LOGGER"],step:"initialize",override:!0},yr=function(){return yr=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},yr.apply(this,arguments)};var vr=function(){return vr=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},vr.apply(this,arguments)};function mr(e,t,n,r){return new(n||(n=Promise))((function(o,i){function s(e){try{u(r.next(e))}catch(e){i(e)}}function a(e){try{u(r.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}u((r=r.apply(e,t||[])).next())}))}function br(e,t){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}}function wr(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}function Sr(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)s.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return s}for(var _r={},Ar={},Er=0;Er<256;Er++){var Pr=Er.toString(16).toLowerCase();1===Pr.length&&(Pr="0"+Pr),_r[Er]=Pr,Ar[Pr]=Er}function xr(e){for(var t="",n=0;n<e.byteLength;n++)t+=_r[e[n]];return t}var Or="X-Amz-Date",Ir="X-Amz-Signature",Cr="X-Amz-Security-Token",Tr="authorization",kr=Or.toLowerCase(),Ur=[Tr,kr,"date"],Rr=Ir.toLowerCase(),jr="x-amz-content-sha256",Mr=Cr.toLowerCase(),Nr={authorization:!0,"cache-control":!0,connection:!0,expect:!0,from:!0,"keep-alive":!0,"max-forwards":!0,pragma:!0,referer:!0,te:!0,trailer:!0,"transfer-encoding":!0,upgrade:!0,"user-agent":!0,"x-amzn-trace-id":!0},Dr=/^proxy-/,Fr=/^sec-/,Lr="AWS4-HMAC-SHA256",Br="AWS4-HMAC-SHA256-PAYLOAD",Vr="aws4_request",qr={},zr=[];function Wr(e,t,n){return e+"/"+t+"/"+n+"/"+Vr}function Hr(e,t,n){var r=new e(t);return r.update(n),r.digest()}function Kr(e,t,n){var r,o,i=e.headers,s={};try{for(var a=wr(Object.keys(i).sort()),u=a.next();!u.done;u=a.next()){var c=u.value,l=c.toLowerCase();(l in Nr||(null==t?void 0:t.has(l))||Dr.test(l)||Fr.test(l))&&(!n||n&&!n.has(l))||(s[l]=i[c].trim().replace(/\s+/g," "))}}catch(e){r={error:e}}finally{try{u&&!u.done&&(o=a.return)&&o.call(a)}finally{if(r)throw r.error}}return s}function Gr(e,t){var n=e.headers,r=e.body;return mr(this,void 0,void 0,(function(){var e,o,i,s,a,u,c;return br(this,(function(l){switch(l.label){case 0:try{for(e=wr(Object.keys(n)),o=e.next();!o.done;o=e.next())if((i=o.value).toLowerCase()===jr)return[2,n[i]]}catch(e){u={error:e}}finally{try{o&&!o.done&&(c=e.return)&&c.call(e)}finally{if(u)throw u.error}}return null!=r?[3,1]:[2,"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"];case 1:return"string"==typeof r||ArrayBuffer.isView(r)||(f=r,"function"==typeof ArrayBuffer&&f instanceof ArrayBuffer||"[object ArrayBuffer]"===Object.prototype.toString.call(f))?((s=new t).update(r),a=xr,[4,s.digest()]):[3,3];case 2:return[2,a.apply(void 0,[l.sent()])];case 3:return[2,"UNSIGNED-PAYLOAD"]}var f}))}))}function $r(e){var t=e.headers,n=e.query,r=function(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n}(e,["headers","query"]);return vr(vr({},r),{headers:vr({},t),query:n?Yr(n):void 0})}function Yr(e){return Object.keys(e).reduce((function(t,n){var r,o=e[n];return vr(vr({},t),((r={})[n]=Array.isArray(o)?function(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(Sr(arguments[t]));return e}(o):o,r))}),{})}function Jr(e){var t,n;e="function"==typeof e.clone?e.clone():$r(e);try{for(var r=wr(Object.keys(e.headers)),o=r.next();!o.done;o=r.next()){var i=o.value;Ur.indexOf(i.toLowerCase())>-1&&delete e.headers[i]}}catch(e){t={error:e}}finally{try{o&&!o.done&&(n=r.return)&&n.call(r)}finally{if(t)throw t.error}}return e}var Zr=function(){function e(e){var t=e.applyChecksum,n=e.credentials,r=e.region,o=e.service,i=e.sha256,s=e.uriEscapePath,a=void 0===s||s;this.service=o,this.sha256=i,this.uriEscapePath=a,this.applyChecksum="boolean"!=typeof t||t,this.regionProvider=eo(r),this.credentialProvider=to(n)}return e.prototype.presign=function(e,t){return void 0===t&&(t={}),mr(this,void 0,void 0,(function(){var n,r,o,i,s,a,u,c,l,f,h,d,p,g,y,v,m,b,w,S,_,A,E,P;return br(this,(function(x){switch(x.label){case 0:return n=t.signingDate,r=void 0===n?new Date:n,o=t.expiresIn,i=void 0===o?3600:o,s=t.unsignableHeaders,a=t.unhoistableHeaders,u=t.signableHeaders,c=t.signingRegion,l=t.signingService,[4,this.credentialProvider()];case 1:return f=x.sent(),null==c?[3,2]:(d=c,[3,4]);case 2:return[4,this.regionProvider()];case 3:d=x.sent(),x.label=4;case 4:return h=d,p=Qr(r),g=p.longDate,y=p.shortDate,i>604800?[2,Promise.reject("Signature version 4 presigned URLs must have an expiration date less than one week in the future")]:(v=Wr(y,h,null!=l?l:this.service),m=function(e,t){var n,r,o;void 0===t&&(t={});var i="function"==typeof e.clone?e.clone():$r(e),s=i.headers,a=i.query,u=void 0===a?{}:a;try{for(var c=wr(Object.keys(s)),l=c.next();!l.done;l=c.next()){var f=l.value,h=f.toLowerCase();"x-amz-"!==h.substr(0,6)||(null===(o=t.unhoistableHeaders)||void 0===o?void 0:o.has(h))||(u[f]=s[f],delete s[f])}}catch(e){n={error:e}}finally{try{l&&!l.done&&(r=c.return)&&r.call(c)}finally{if(n)throw n.error}}return vr(vr({},e),{headers:s,query:u})}(Jr(e),{unhoistableHeaders:a}),f.sessionToken&&(m.query[Cr]=f.sessionToken),m.query["X-Amz-Algorithm"]=Lr,m.query["X-Amz-Credential"]=f.accessKeyId+"/"+v,m.query[Or]=g,m.query["X-Amz-Expires"]=i.toString(10),b=Kr(m,s,u),m.query["X-Amz-SignedHeaders"]=Xr(b),w=m.query,S=Ir,_=this.getSignature,A=[g,v,this.getSigningKey(f,h,y,l)],E=this.createCanonicalRequest,P=[m,b],[4,Gr(e,this.sha256)]);case 5:return[4,_.apply(this,A.concat([E.apply(this,P.concat([x.sent()]))]))];case 6:return w[S]=x.sent(),[2,m]}}))}))},e.prototype.sign=function(e,t){return mr(this,void 0,void 0,(function(){return br(this,(function(n){return"string"==typeof e?[2,this.signString(e,t)]:e.headers&&e.payload?[2,this.signEvent(e,t)]:[2,this.signRequest(e,t)]}))}))},e.prototype.signEvent=function(e,t){var n=e.headers,r=e.payload,o=t.signingDate,i=void 0===o?new Date:o,s=t.priorSignature,a=t.signingRegion,u=t.signingService;return mr(this,void 0,void 0,(function(){var e,t,o,c,l,f,h,d,p,g,y;return br(this,(function(v){switch(v.label){case 0:return null==a?[3,1]:(t=a,[3,3]);case 1:return[4,this.regionProvider()];case 2:t=v.sent(),v.label=3;case 3:return e=t,o=Qr(i),c=o.shortDate,l=o.longDate,f=Wr(c,e,null!=u?u:this.service),[4,Gr({headers:{},body:r},this.sha256)];case 4:return h=v.sent(),(d=new this.sha256).update(n),g=xr,[4,d.digest()];case 5:return p=g.apply(void 0,[v.sent()]),y=[Br,l,f,s,p,h].join("\n"),[2,this.signString(y,{signingDate:i,signingRegion:e,signingService:u})]}}))}))},e.prototype.signString=function(e,t){var n=void 0===t?{}:t,r=n.signingDate,o=void 0===r?new Date:r,i=n.signingRegion,s=n.signingService;return mr(this,void 0,void 0,(function(){var t,n,r,a,u,c,l,f;return br(this,(function(h){switch(h.label){case 0:return[4,this.credentialProvider()];case 1:return t=h.sent(),null==i?[3,2]:(r=i,[3,4]);case 2:return[4,this.regionProvider()];case 3:r=h.sent(),h.label=4;case 4:return n=r,a=Qr(o).shortDate,l=(c=this.sha256).bind,[4,this.getSigningKey(t,n,a,s)];case 5:return(u=new(l.apply(c,[void 0,h.sent()]))).update(e),f=xr,[4,u.digest()];case 6:return[2,f.apply(void 0,[h.sent()])]}}))}))},e.prototype.signRequest=function(e,t){var n=void 0===t?{}:t,r=n.signingDate,o=void 0===r?new Date:r,i=n.signableHeaders,s=n.unsignableHeaders,a=n.signingRegion,u=n.signingService;return mr(this,void 0,void 0,(function(){var t,n,r,c,l,f,h,d,p,g,y;return br(this,(function(v){switch(v.label){case 0:return[4,this.credentialProvider()];case 1:return t=v.sent(),null==a?[3,2]:(r=a,[3,4]);case 2:return[4,this.regionProvider()];case 3:r=v.sent(),v.label=4;case 4:return n=r,c=Jr(e),l=Qr(o),f=l.longDate,h=l.shortDate,d=Wr(h,n,null!=u?u:this.service),c.headers[kr]=f,t.sessionToken&&(c.headers[Mr]=t.sessionToken),[4,Gr(c,this.sha256)];case 5:return p=v.sent(),!function(e,t){var n,r;e=e.toLowerCase();try{for(var o=wr(Object.keys(t)),i=o.next();!i.done;i=o.next())if(e===i.value.toLowerCase())return!0}catch(e){n={error:e}}finally{try{i&&!i.done&&(r=o.return)&&r.call(o)}finally{if(n)throw n.error}}return!1}(jr,c.headers)&&this.applyChecksum&&(c.headers[jr]=p),g=Kr(c,s,i),[4,this.getSignature(f,d,this.getSigningKey(t,n,h,u),this.createCanonicalRequest(c,g,p))];case 6:return y=v.sent(),c.headers[Tr]=Lr+" Credential="+t.accessKeyId+"/"+d+", SignedHeaders="+Xr(g)+", Signature="+y,[2,c]}}))}))},e.prototype.createCanonicalRequest=function(e,t,n){var r=Object.keys(t).sort();return e.method+"\n"+this.getCanonicalPath(e)+"\n"+function(e){var t,n,r=e.query,o=void 0===r?{}:r,i=[],s={},a=function(e){if(e.toLowerCase()===Rr)return"continue";i.push(e);var t=o[e];"string"==typeof t?s[e]=mn(e)+"="+mn(t):Array.isArray(t)&&(s[e]=t.slice(0).sort().reduce((function(t,n){return t.concat([mn(e)+"="+mn(n)])}),[]).join("&"))};try{for(var u=wr(Object.keys(o).sort()),c=u.next();!c.done;c=u.next())a(c.value)}catch(e){t={error:e}}finally{try{c&&!c.done&&(n=u.return)&&n.call(u)}finally{if(t)throw t.error}}return i.map((function(e){return s[e]})).filter((function(e){return e})).join("&")}(e)+"\n"+r.map((function(e){return e+":"+t[e]})).join("\n")+"\n\n"+r.join(";")+"\n"+n},e.prototype.createStringToSign=function(e,t,n){return mr(this,void 0,void 0,(function(){var r,o;return br(this,(function(i){switch(i.label){case 0:return(r=new this.sha256).update(n),[4,r.digest()];case 1:return o=i.sent(),[2,Lr+"\n"+e+"\n"+t+"\n"+xr(o)]}}))}))},e.prototype.getCanonicalPath=function(e){var t=e.path;return this.uriEscapePath?"/"+encodeURIComponent(t.replace(/^\//,"")).replace(/%2F/g,"/"):t},e.prototype.getSignature=function(e,t,n,r){return mr(this,void 0,void 0,(function(){var o,i,s,a,u;return br(this,(function(c){switch(c.label){case 0:return[4,this.createStringToSign(e,t,r)];case 1:return o=c.sent(),a=(s=this.sha256).bind,[4,n];case 2:return(i=new(a.apply(s,[void 0,c.sent()]))).update(o),u=xr,[4,i.digest()];case 3:return[2,u.apply(void 0,[c.sent()])]}}))}))},e.prototype.getSigningKey=function(e,t,n,r){return function(e,t,n,r,o){return mr(void 0,void 0,void 0,(function(){var i,s,a,u,c,l,f,h,d;return br(this,(function(p){switch(p.label){case 0:return[4,Hr(e,t.secretAccessKey,t.accessKeyId)];case 1:if(i=p.sent(),(s=n+":"+r+":"+o+":"+xr(i)+":"+t.sessionToken)in qr)return[2,qr[s]];for(zr.push(s);zr.length>50;)delete qr[zr.shift()];a="AWS4"+t.secretAccessKey,p.label=2;case 2:p.trys.push([2,7,8,9]),u=wr([n,r,o,Vr]),c=u.next(),p.label=3;case 3:return c.done?[3,6]:(l=c.value,[4,Hr(e,a,l)]);case 4:a=p.sent(),p.label=5;case 5:return c=u.next(),[3,3];case 6:return[3,9];case 7:return f=p.sent(),h={error:f},[3,9];case 8:try{c&&!c.done&&(d=u.return)&&d.call(u)}finally{if(h)throw h.error}return[7];case 9:return[2,qr[s]=a]}}))}))}(this.sha256,e,n,t,r||this.service)},e}(),Qr=function(e){var t,n=(t=e,function(e){return"number"==typeof e?new Date(1e3*e):"string"==typeof e?Number(e)?new Date(1e3*Number(e)):new Date(e):e}(t).toISOString().replace(/\.\d{3}Z$/,"Z")).replace(/[\-:]/g,"");return{longDate:n,shortDate:n.substr(0,8)}},Xr=function(e){return Object.keys(e).sort().join(";")},eo=function(e){if("string"==typeof e){var t=Promise.resolve(e);return function(){return t}}return e},to=function(e){if("object"==typeof e){var t=Promise.resolve(e);return function(){return t}}return e};function no(e){if("object"==typeof e){var t=Promise.resolve(e);return function(){return t}}return e}var ro=function(){return ro=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},ro.apply(this,arguments)};function oo(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)s.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return s}function io(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(oo(arguments[t]));return e}var so="user-agent",ao=/[^\!\#\$\%\&\'\*\+\-\.\^\_\`\|\~\d\w]/g,uo=function(e){var t=oo(e,2),n=t[0],r=t[1],o=n.indexOf("/"),i=n.substring(0,o),s=n.substring(o+1);return"api"===i&&(s=s.toLowerCase()),[i,s,r].filter((function(e){return e&&e.length>0})).map((function(e){return null==e?void 0:e.replace(ao,"_")})).join("/")},co={name:"getUserAgentMiddleware",step:"build",priority:"low",tags:["SET_USER_AGENT","USER_AGENT"],override:!0},lo=function(e){return{applyToStack:function(t){var n;t.add((n=e,function(e,t){return function(r){return o=void 0,i=void 0,a=function(){var o,i,s,a,u,c,l,f;return function(e,t){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}}(this,(function(h){switch(h.label){case 0:return o=r.request,gt.isInstance(o)?(i=o.headers,s=(null===(l=null==t?void 0:t.userAgent)||void 0===l?void 0:l.map(uo))||[],[4,n.defaultUserAgentProvider()]):[2,e(r)];case 1:return a=h.sent().map(uo),u=(null===(f=null==n?void 0:n.customUserAgent)||void 0===f?void 0:f.map(uo))||[],i["x-amz-user-agent"]=io(a,s,u).join(" "),c=io(a.filter((function(e){return e.startsWith("aws-sdk-")})),u).join(" "),"browser"!==n.runtime&&c&&(i[so]=i[so]?i[so]+" "+c:c),[2,e(ro(ro({},r),{request:o}))]}}))},new((s=void 0)||(s=Promise))((function(e,t){function n(e){try{u(a.next(e))}catch(e){t(e)}}function r(e){try{u(a.throw(e))}catch(e){t(e)}}function u(t){var o;t.done?e(t.value):(o=t.value,o instanceof s?o:new s((function(e){e(o)}))).then(n,r)}u((a=a.apply(o,i||[])).next())}));var o,i,s,a}}),co)}}},fo=function(e){function t(t){var n,r,o,i=this,s=function(e){if(!e.region)throw new Error("Region is missing");return or(or({},e),{region:ar(e.region)})}(ct(ct({},rr),t)),a=function(e){var t;return or(or({},e),{tls:null===(t=e.tls)||void 0===t||t,endpoint:e.endpoint?ir(e):function(){return sr(e)},isCustomEndpoint:!!e.endpoint})}(s),u=function(e){var t,n=this,r=no(e.credentials||e.credentialDefaultProvider(e)),o=e.signingEscapePath,i=void 0===o||o,s=e.systemClockOffset,a=void 0===s?e.systemClockOffset||0:s,u=e.sha256;return t=e.signer?no(e.signer):function(){return no(e.region)().then((function(t){return r=n,o=void 0,s=function(){return function(e,t){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}}(this,(function(n){switch(n.label){case 0:return[4,e.regionInfoProvider(t)];case 1:return[2,[n.sent()||{},t]]}}))},new((i=void 0)||(i=Promise))((function(e,t){function n(e){try{u(s.next(e))}catch(e){t(e)}}function a(e){try{u(s.throw(e))}catch(e){t(e)}}function u(t){var r;t.done?e(t.value):(r=t.value,r instanceof i?r:new i((function(e){e(r)}))).then(n,a)}u((s=s.apply(r,o||[])).next())}));var r,o,i,s})).then((function(t){var n=function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)s.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return s}(t,2),o=n[0],s=n[1],a=o.signingRegion,c=o.signingService;return e.signingRegion=e.signingRegion||a||s,e.signingName=e.signingName||c||e.serviceId,new Zr({credentials:r,region:e.signingRegion,service:e.signingName,sha256:u,uriEscapePath:i})}))},yr(yr({},e),{systemClockOffset:a,signingEscapePath:i,credentials:r,signer:t})}(a),c=function(e){return ro(ro({},e),{customUserAgent:"string"==typeof e.customUserAgent?[[e.customUserAgent]]:e.customUserAgent})}((r=function(e){if(void 0===e&&(e=3),"number"==typeof e){var t=Promise.resolve(e);return function(){return t}}return e}((n=u).maxAttempts),Tn(Tn({},n),{maxAttempts:r,retryStrategy:n.retryStrategy||new zn(r)})));return(i=e.call(this,c)||this).config=c,i.middlewareStack.use((o=i.config,{applyToStack:function(e){e.add(function(e){return function(t,n){return function(r){return kn(void 0,void 0,void 0,(function(){var o;return Un(this,(function(i){return(null===(o=null==e?void 0:e.retryStrategy)||void 0===o?void 0:o.mode)&&(n.userAgent=function(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(Rn(arguments[t]));return e}(n.userAgent||[],[["cfg/retry-mode",e.retryStrategy.mode]])),[2,e.retryStrategy.retry(t,r)]}))}))}}}(o),jn)}})),i.middlewareStack.use(fr(i.config)),i.middlewareStack.use(dr(i.config)),i.middlewareStack.use((i.config,{applyToStack:function(e){e.add(pr(),gr)}})),i.middlewareStack.use(lo(i.config)),i}return ie(t,e),t.prototype.destroy=function(){e.prototype.destroy.call(this)},t}(en),ho=function(){return ho=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},ho.apply(this,arguments)},po=function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function s(e){try{u(r.next(e))}catch(e){i(e)}}function a(e){try{u(r.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}u((r=r.apply(e,t||[])).next())}))},go=function(e,t){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}},yo=new l("Credentials"),vo=function(){function e(e){this._gettingCredPromise=null,this._refreshHandlers={},this.Auth=void 0,this.configure(e),this._refreshHandlers.google=$.refreshGoogleToken,this._refreshHandlers.facebook=Y.refreshFacebookToken}return e.prototype.getModuleName=function(){return"Credentials"},e.prototype.getCredSource=function(){return this._credentials_source},e.prototype.configure=function(e){if(!e)return this._config||{};this._config=Object.assign({},this._config,e);var t=this._config.refreshHandlers;return t&&(this._refreshHandlers=ho(ho({},this._refreshHandlers),t)),this._storage=this._config.storage,this._storage||(this._storage=(new w).getStorage()),this._storageSync=Promise.resolve(),"function"==typeof this._storage.sync&&(this._storageSync=this._storage.sync()),this._config},e.prototype.get=function(){return yo.debug("getting credentials"),this._pickupCredentials()},e.prototype._getCognitoIdentityIdStorageKey=function(e){return"CognitoIdentityId-"+e},e.prototype._pickupCredentials=function(){return yo.debug("picking up credentials"),this._gettingCredPromise&&this._gettingCredPromise.isPending()?yo.debug("getting old cred promise"):(yo.debug("getting new cred promise"),this._gettingCredPromise=I(this._keepAlive())),this._gettingCredPromise},e.prototype._keepAlive=function(){return po(this,void 0,void 0,(function(){var e,t,n,r,o,i,s;return go(this,(function(a){switch(a.label){case 0:if(yo.debug("checking if credentials exists and not expired"),(e=this._credentials)&&!this._isExpired(e)&&!this._isPastTTL())return yo.debug("credentials not changed and not expired, directly return"),[2,Promise.resolve(e)];if(yo.debug("need to get a new credential or refresh the existing one"),t=this.Auth,!(n=void 0===t?te.Auth:t)||"function"!=typeof n.currentUserCredentials)return[2,Promise.reject("No Auth module registered in Amplify")];if(this._isExpired(e)||!this._isPastTTL())return[3,6];yo.debug("ttl has passed but token is not yet expired"),a.label=1;case 1:return a.trys.push([1,5,,6]),[4,n.currentUserPoolUser()];case 2:return r=a.sent(),[4,n.currentSession()];case 3:return o=a.sent(),i=o.refreshToken,[4,new Promise((function(e,t){r.refreshSession(i,(function(n,r){return n?t(n):e(r)}))}))];case 4:return a.sent(),[3,6];case 5:return s=a.sent(),yo.debug("Error attempting to refreshing the session",s),[3,6];case 6:return[2,n.currentUserCredentials()]}}))}))},e.prototype.refreshFederatedToken=function(e){yo.debug("Getting federated credentials");var t=e.provider,n=e.user,r=e.token,o=e.identity_id,i=e.expires_at;i=1970===new Date(i).getFullYear()?1e3*i:i;var s=this;return yo.debug("checking if federated jwt token expired"),i>(new Date).getTime()?(yo.debug("token not expired"),this._setCredentialsFromFederation({provider:t,token:r,user:n,identity_id:o,expires_at:i})):s._refreshHandlers[t]&&"function"==typeof s._refreshHandlers[t]?(yo.debug("getting refreshed jwt token from federation provider"),this._providerRefreshWithRetry({refreshHandler:s._refreshHandlers[t],provider:t,user:n})):(yo.debug("no refresh handler for provider:",t),this.clear(),Promise.reject("no refresh handler for provider"))},e.prototype._providerRefreshWithRetry=function(e){var t,n,r,o=this,i=e.refreshHandler,s=e.provider,a=e.user;return(t=i,n=[],r=1e4,void 0===r&&(r=V),B(t,n,function(e){return void 0===e&&(e=V),function(t){var n=100*Math.pow(2,t)+100*Math.random();return!(n>e)&&n}}(r))).then((function(e){return yo.debug("refresh federated token sucessfully",e),o._setCredentialsFromFederation({provider:s,token:e.token,user:a,identity_id:e.identity_id,expires_at:e.expires_at})})).catch((function(e){return"string"==typeof e&&0===e.toLowerCase().lastIndexOf("network error",e.length)||o.clear(),yo.debug("refresh federated token failed",e),Promise.reject("refreshing federation token failed: "+e)}))},e.prototype._isExpired=function(e){if(!e)return yo.debug("no credentials for expiration check"),!0;yo.debug("are these credentials expired?",e);var t=Date.now();return e.expiration.getTime()<=t},e.prototype._isPastTTL=function(){return this._nextCredentialsRefresh<=Date.now()},e.prototype._setCredentialsForGuest=function(){return po(this,void 0,void 0,(function(){var e,t,n,r,o,i,s,a,u=this;return go(this,(function(c){switch(c.label){case 0:return yo.debug("setting credentials for guest"),e=this._config,t=e.identityPoolId,n=e.region,e.mandatorySignIn?[2,Promise.reject("cannot get guest credentials when mandatory signin enabled")]:t?n?(o=this,[4,this._getGuestIdentityId()]):(yo.debug("region is not configured for getting the credentials"),[2,Promise.reject("region is not configured for getting the credentials")]):(yo.debug("No Cognito Identity pool provided for unauthenticated access"),[2,Promise.reject("No Cognito Identity pool provided for unauthenticated access")]);case 1:return r=o._identityId=c.sent(),i=new fo({region:n,customUserAgent:Q()}),s=void 0,r?s=ln({identityId:r,client:i})():(a=function(){return po(u,void 0,void 0,(function(){var e;return go(this,(function(n){switch(n.label){case 0:return[4,i.send(new fn({IdentityPoolId:t}))];case 1:return e=n.sent().IdentityId,this._identityId=e,[2,ln({client:i,identityId:e})()]}}))}))},s=a().catch((function(e){return po(u,void 0,void 0,(function(){return go(this,(function(t){throw e}))}))}))),[2,this._loadCredentials(s,"guest",!1,null).then((function(e){return e})).catch((function(e){return po(u,void 0,void 0,(function(){var n,o=this;return go(this,(function(a){switch(a.label){case 0:return"ResourceNotFoundException"!==e.name||e.message!=="Identity '"+r+"' not found."?[3,2]:(yo.debug("Failed to load guest credentials"),[4,this._removeGuestIdentityId()]);case 1:return a.sent(),n=function(){return po(o,void 0,void 0,(function(){var e;return go(this,(function(n){switch(n.label){case 0:return[4,i.send(new fn({IdentityPoolId:t}))];case 1:return e=n.sent().IdentityId,this._identityId=e,[2,ln({client:i,identityId:e})()]}}))}))},s=n().catch((function(e){return po(o,void 0,void 0,(function(){return go(this,(function(t){throw e}))}))})),[2,this._loadCredentials(s,"guest",!1,null)];case 2:return[2,e]}}))}))}))]}}))}))},e.prototype._setCredentialsFromFederation=function(e){var t=e.provider,n=e.token,r=e.identity_id,o={google:"accounts.google.com",facebook:"graph.facebook.com",amazon:"www.amazon.com",developer:"cognito-identity.amazonaws.com"}[t]||t;if(!o)return Promise.reject("You must specify a federated provider");var i={};i[o]=n;var s=this._config,a=s.identityPoolId,u=s.region;if(!a)return yo.debug("No Cognito Federated Identity pool provided"),Promise.reject("No Cognito Federated Identity pool provided");if(!u)return yo.debug("region is not configured for getting the credentials"),Promise.reject("region is not configured for getting the credentials");var c=new fo({region:u,customUserAgent:Q()}),l=void 0;return l=r?ln({identityId:r,logins:i,client:c})():function(e){var t=this,n=e.accountId,r=e.cache,o=void 0===r?"object"==typeof self&&self.indexedDB?new dn:"object"==typeof window&&window.localStorage?window.localStorage:pn:r,i=e.client,s=e.customRoleArn,a=e.identityPoolId,u=e.logins,c=e.userIdentifier,l=void 0===c?u&&0!==Object.keys(u).length?void 0:"ANONYMOUS":c,f=l?"aws:cognito-identity-credentials:"+a+":"+l:void 0,h=function(){return ne(t,void 0,void 0,(function(){var e,t,r,c,l,d,p,g,y;return re(this,(function(v){switch(v.label){case 0:return(t=f)?[4,o.getItem(f)]:[3,2];case 1:t=v.sent(),v.label=2;case 2:return(e=t)?[3,7]:(d=(l=i).send,p=fn.bind,y={AccountId:n,IdentityPoolId:a},u?[4,cn(u)]:[3,4]);case 3:return g=v.sent(),[3,5];case 4:g=void 0,v.label=5;case 5:return[4,d.apply(l,[new(p.apply(fn,[void 0,(y.Logins=g,y)]))])];case 6:r=v.sent().IdentityId,c=void 0===r?function(){throw new un("Response from Amazon Cognito contained no identity ID")}():r,e=c,f&&Promise.resolve(o.setItem(f,e)).catch((function(){})),v.label=7;case 7:return[2,(h=ln({client:i,customRoleArn:s,logins:u,identityId:e}))()]}}))}))};return function(){return h().catch((function(e){return ne(t,void 0,void 0,(function(){return re(this,(function(t){throw f&&Promise.resolve(o.removeItem(f)).catch((function(){})),e}))}))}))}}({logins:i,identityPoolId:a,client:c})(),this._loadCredentials(l,"federated",!0,e)},e.prototype._setCredentialsFromSession=function(e){var t=this;yo.debug("set credentials from session");var n=e.getIdToken().getJwtToken(),r=this._config,o=r.region,i=r.userPoolId,s=r.identityPoolId;if(!s)return yo.debug("No Cognito Federated Identity pool provided"),Promise.reject("No Cognito Federated Identity pool provided");if(!o)return yo.debug("region is not configured for getting the credentials"),Promise.reject("region is not configured for getting the credentials");var a={};a["cognito-idp."+o+".amazonaws.com/"+i]=n;var u=new fo({region:o,customUserAgent:Q()}),c=po(t,void 0,void 0,(function(){var e,t,n,r,o,i,c,l,f,h;return go(this,(function(d){switch(d.label){case 0:return[4,this._getGuestIdentityId()];case 1:return(e=d.sent())?[3,3]:[4,u.send(new fn({IdentityPoolId:s,Logins:a}))];case 2:n=d.sent().IdentityId,t=n,d.label=3;case 3:return[4,u.send(new sn({IdentityId:e||t,Logins:a}))];case 4:return r=d.sent(),o=r.Credentials,i=o.AccessKeyId,c=o.Expiration,l=o.SecretKey,f=o.SessionToken,h=r.IdentityId,this._identityId=h,e?(yo.debug("The guest identity "+e+" has been successfully linked to the logins"),e===h&&yo.debug("The guest identity "+e+" has become the primary identity"),[4,this._removeGuestIdentityId()]):[3,6];case 5:d.sent(),d.label=6;case 6:return[2,{accessKeyId:i,secretAccessKey:l,sessionToken:f,expiration:c,identityId:h}]}}))})).catch((function(e){return po(t,void 0,void 0,(function(){return go(this,(function(t){throw e}))}))}));return this._loadCredentials(c,"userPool",!0,null)},e.prototype._loadCredentials=function(e,t,n,r){var o=this,i=this;return new Promise((function(s,a){e.then((function(e){return po(o,void 0,void 0,(function(){var o,a,u,c,l;return go(this,(function(f){switch(f.label){case 0:if(yo.debug("Load credentials successfully",e),this._identityId&&!e.identityId&&(e.identityId=this._identityId),i._credentials=e,i._credentials.authenticated=n,i._credentials_source=t,i._nextCredentialsRefresh=(new Date).getTime()+3e6,"federated"===t){o=Object.assign({id:this._credentials.identityId},r.user),a=r.provider,u=r.token,c=r.expires_at,l=r.identity_id;try{this._storage.setItem("aws-amplify-federatedInfo",JSON.stringify({provider:a,token:u,user:o,expires_at:c,identity_id:l}))}catch(e){yo.debug("Failed to put federated info into auth storage",e)}}return"guest"!==t?[3,2]:[4,this._setGuestIdentityId(e.identityId)];case 1:f.sent(),f.label=2;case 2:return s(i._credentials),[2]}}))}))})).catch((function(t){if(t)return yo.debug("Failed to load credentials",e),yo.debug("Error loading credentials",t),void a(t)}))}))},e.prototype.set=function(e,t){return"session"===t?this._setCredentialsFromSession(e):"federation"===t?this._setCredentialsFromFederation(e):"guest"===t?this._setCredentialsForGuest():(yo.debug("no source specified for setting credentials"),Promise.reject("invalid source"))},e.prototype.clear=function(){return po(this,void 0,void 0,(function(){return go(this,(function(e){return this._credentials=null,this._credentials_source=null,yo.debug("removing aws-amplify-federatedInfo from storage"),this._storage.removeItem("aws-amplify-federatedInfo"),[2]}))}))},e.prototype._getGuestIdentityId=function(){return po(this,void 0,void 0,(function(){var e,t;return go(this,(function(n){switch(n.label){case 0:e=this._config.identityPoolId,n.label=1;case 1:return n.trys.push([1,3,,4]),[4,this._storageSync];case 2:return n.sent(),[2,this._storage.getItem(this._getCognitoIdentityIdStorageKey(e))];case 3:return t=n.sent(),yo.debug("Failed to get the cached guest identityId",t),[3,4];case 4:return[2]}}))}))},e.prototype._setGuestIdentityId=function(e){return po(this,void 0,void 0,(function(){var t,n;return go(this,(function(r){switch(r.label){case 0:t=this._config.identityPoolId,r.label=1;case 1:return r.trys.push([1,3,,4]),[4,this._storageSync];case 2:return r.sent(),this._storage.setItem(this._getCognitoIdentityIdStorageKey(t),e),[3,4];case 3:return n=r.sent(),yo.debug("Failed to cache guest identityId",n),[3,4];case 4:return[2]}}))}))},e.prototype._removeGuestIdentityId=function(){return po(this,void 0,void 0,(function(){var e;return go(this,(function(t){return e=this._config.identityPoolId,yo.debug("removing "+this._getCognitoIdentityIdStorageKey(e)+" from storage"),this._storage.removeItem(this._getCognitoIdentityIdStorageKey(e)),[2]}))}))},e.prototype.shear=function(e){return{accessKeyId:e.accessKeyId,sessionToken:e.sessionToken,secretAccessKey:e.secretAccessKey,identityId:e.identityId,authenticated:e.authenticated}},e}(),mo=new vo(null);te.register(mo);var bo=function(){return bo=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},bo.apply(this,arguments)},wo=new l("Parser"),So=function(e){var t,n={};if(e.aws_mobile_analytics_app_id){var r={AWSPinpoint:{appId:e.aws_mobile_analytics_app_id,region:e.aws_mobile_analytics_app_region}};n.Analytics=r}return(e.aws_cognito_identity_pool_id||e.aws_user_pools_id)&&(n.Auth={userPoolId:e.aws_user_pools_id,userPoolWebClientId:e.aws_user_pools_web_client_id,region:e.aws_cognito_region,identityPoolId:e.aws_cognito_identity_pool_id,identityPoolRegion:e.aws_cognito_region,mandatorySignIn:"enable"===e.aws_mandatory_sign_in}),t=e.aws_user_files_s3_bucket?{AWSS3:{bucket:e.aws_user_files_s3_bucket,region:e.aws_user_files_s3_bucket_region,dangerouslyConnectToHttpEndpointForTesting:e.aws_user_files_s3_dangerously_connect_to_http_endpoint_for_testing}}:e?e.Storage||e:{},e.Logging&&(n.Logging=bo(bo({},e.Logging),{region:e.aws_project_region})),e.geo&&(n.Geo=Object.assign({},e.geo),e.geo.amazon_location_service&&(n.Geo={AmazonLocationService:e.geo.amazon_location_service})),n.Analytics=Object.assign({},n.Analytics,e.Analytics),n.Auth=Object.assign({},n.Auth,e.Auth),n.Storage=Object.assign({},t),n.Logging=Object.assign({},n.Logging,e.Logging),wo.debug("parse config",e,"to amplifyconfig",n),n},_o=function(){function e(){}return e.parseMobilehubConfig=So,e}(),Ao=n(3421);function Eo(e,t){void 0===t&&(t={});var n=function(e){return e&&"j"===e[0]&&":"===e[1]?e.substr(2):e}(e);if(function(e,t){return void 0===t&&(t=!e||"{"!==e[0]&&"["!==e[0]&&'"'!==e[0]),!t}(n,t.doNotParse))try{return JSON.parse(n)}catch(e){}return e}var Po=function(){return Po=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},Po.apply(this,arguments)},xo=function(){function e(e,t){var n=this;this.changeListeners=[],this.HAS_DOCUMENT_COOKIE=!1,this.cookies=function(e,t){return"string"==typeof e?Ao.Q(e,t):"object"==typeof e&&null!==e?e:{}}(e,t),new Promise((function(){n.HAS_DOCUMENT_COOKIE="object"==typeof document&&"string"==typeof document.cookie})).catch((function(){}))}return e.prototype._updateBrowserValues=function(e){this.HAS_DOCUMENT_COOKIE&&(this.cookies=Ao.Q(document.cookie,e))},e.prototype._emitChange=function(e){for(var t=0;t<this.changeListeners.length;++t)this.changeListeners[t](e)},e.prototype.get=function(e,t,n){return void 0===t&&(t={}),this._updateBrowserValues(n),Eo(this.cookies[e],t)},e.prototype.getAll=function(e,t){void 0===e&&(e={}),this._updateBrowserValues(t);var n={};for(var r in this.cookies)n[r]=Eo(this.cookies[r],e);return n},e.prototype.set=function(e,t,n){var r;"object"==typeof t&&(t=JSON.stringify(t)),this.cookies=Po(Po({},this.cookies),((r={})[e]=t,r)),this.HAS_DOCUMENT_COOKIE&&(document.cookie=Ao.q(e,t,n)),this._emitChange({name:e,value:t,options:n})},e.prototype.remove=function(e,t){var n=t=Po(Po({},t),{expires:new Date(1970,1,1,0,0,1),maxAge:0});this.cookies=Po({},this.cookies),delete this.cookies[e],this.HAS_DOCUMENT_COOKIE&&(document.cookie=Ao.q(e,"",n)),this._emitChange({name:e,value:void 0,options:t})},e.prototype.addChangeListener=function(e){this.changeListeners.push(e)},e.prototype.removeChangeListener=function(e){var t=this.changeListeners.indexOf(e);t>=0&&this.changeListeners.splice(t,1)},e}();const Oo=xo;var Io,Co=T().isBrowser,To=function(){function e(e){void 0===e&&(e={}),this.cookies=new Oo,this.store=Co?window.localStorage:Object.create(null),this.cookies=e.req?new Oo(e.req.headers.cookie):new Oo,Object.assign(this.store,this.cookies.getAll())}return Object.defineProperty(e.prototype,"length",{get:function(){return Object.entries(this.store).length},enumerable:!0,configurable:!0}),e.prototype.clear=function(){var e=this;Array.from(new Array(this.length)).map((function(t,n){return e.key(n)})).forEach((function(t){return e.removeItem(t)}))},e.prototype.getItem=function(e){return this.getLocalItem(e)},e.prototype.getLocalItem=function(e){return Object.prototype.hasOwnProperty.call(this.store,e)?this.store[e]:null},e.prototype.getUniversalItem=function(e){return this.cookies.get(e)},e.prototype.key=function(e){return Object.keys(this.store)[e]},e.prototype.removeItem=function(e){this.removeLocalItem(e),this.removeUniversalItem(e)},e.prototype.removeLocalItem=function(e){delete this.store[e]},e.prototype.removeUniversalItem=function(e){this.cookies.remove(e,{path:"/"})},e.prototype.setItem=function(e,t){switch(this.setLocalItem(e,t),e.split(".").pop()){case"LastAuthUser":case"accessToken":case"refreshToken":case"idToken":Co?this.setUniversalItem(e,t):this.setLocalItem(e,t)}},e.prototype.setLocalItem=function(e,t){this.store[e]=t},e.prototype.setUniversalItem=function(e,t){this.cookies.set(e,t,{path:"/",sameSite:!0,secure:"localhost"!==window.location.hostname})},e}(),ko=function(){function e(e){var t=e||{},n=t.ValidationData,r=t.Username,o=t.Password,i=t.AuthParameters,s=t.ClientMetadata;this.validationData=n||{},this.authParameters=i||{},this.clientMetadata=s||{},this.username=r,this.password=o}var t=e.prototype;return t.getUsername=function(){return this.username},t.getPassword=function(){return this.password},t.getValidationData=function(){return this.validationData},t.getAuthParameters=function(){return this.authParameters},t.getClientMetadata=function(){return this.clientMetadata},e}(),Uo=n(8834),Ro=n(7359),jo=n.n(Ro),Mo=(n(1816),n(1093)),No=n.n(Mo),Do=n(6061),Fo=n.n(Do);if("undefined"!=typeof window&&window.crypto&&(Io=window.crypto),!Io&&"undefined"!=typeof window&&window.msCrypto&&(Io=window.msCrypto),!Io&&void 0!==n.g&&n.g.crypto&&(Io=n.g.crypto),!Io)try{Io=n(6538)}catch(e){}function Lo(){if(Io){if("function"==typeof Io.getRandomValues)try{return Io.getRandomValues(new Uint32Array(1))[0]}catch(e){}if("function"==typeof Io.randomBytes)try{return Io.randomBytes(4).readInt32LE()}catch(e){}}throw new Error("Native crypto module could not be used to get secure random number.")}var Bo=function(){function e(e,t){e=this.words=e||[],this.sigBytes=null!=t?t:4*e.length}var t=e.prototype;return t.random=function(t){for(var n=[],r=0;r<t;r+=4)n.push(Lo());return new e(n,t)},t.toString=function(){return function(e){for(var t=e.words,n=e.sigBytes,r=[],o=0;o<n;o++){var i=t[o>>>2]>>>24-o%4*8&255;r.push((i>>>4).toString(16)),r.push((15&i).toString(16))}return r.join("")}(this)},e}();const Vo=qo;function qo(e,t){null!=e&&this.fromString(e,t)}function zo(){return new qo(null)}var Wo,Ho="undefined"!=typeof navigator;Ho&&"Microsoft Internet Explorer"==navigator.appName?(qo.prototype.am=function(e,t,n,r,o,i){for(var s=32767&t,a=t>>15;--i>=0;){var u=32767&this[e],c=this[e++]>>15,l=a*u+c*s;o=((u=s*u+((32767&l)<<15)+n[r]+(1073741823&o))>>>30)+(l>>>15)+a*c+(o>>>30),n[r++]=1073741823&u}return o},Wo=30):Ho&&"Netscape"!=navigator.appName?(qo.prototype.am=function(e,t,n,r,o,i){for(;--i>=0;){var s=t*this[e++]+n[r]+o;o=Math.floor(s/67108864),n[r++]=67108863&s}return o},Wo=26):(qo.prototype.am=function(e,t,n,r,o,i){for(var s=16383&t,a=t>>14;--i>=0;){var u=16383&this[e],c=this[e++]>>14,l=a*u+c*s;o=((u=s*u+((16383&l)<<14)+n[r]+o)>>28)+(l>>14)+a*c,n[r++]=268435455&u}return o},Wo=28),qo.prototype.DB=Wo,qo.prototype.DM=(1<<Wo)-1,qo.prototype.DV=1<<Wo,qo.prototype.FV=Math.pow(2,52),qo.prototype.F1=52-Wo,qo.prototype.F2=2*Wo-52;var Ko,Go,$o=new Array;for(Ko="0".charCodeAt(0),Go=0;Go<=9;++Go)$o[Ko++]=Go;for(Ko="a".charCodeAt(0),Go=10;Go<36;++Go)$o[Ko++]=Go;for(Ko="A".charCodeAt(0),Go=10;Go<36;++Go)$o[Ko++]=Go;function Yo(e){return"0123456789abcdefghijklmnopqrstuvwxyz".charAt(e)}function Jo(e,t){var n=$o[e.charCodeAt(t)];return null==n?-1:n}function Zo(e){var t=zo();return t.fromInt(e),t}function Qo(e){var t,n=1;return 0!=(t=e>>>16)&&(e=t,n+=16),0!=(t=e>>8)&&(e=t,n+=8),0!=(t=e>>4)&&(e=t,n+=4),0!=(t=e>>2)&&(e=t,n+=2),0!=(t=e>>1)&&(e=t,n+=1),n}function Xo(e){this.m=e,this.mp=e.invDigit(),this.mpl=32767&this.mp,this.mph=this.mp>>15,this.um=(1<<e.DB-15)-1,this.mt2=2*e.t}function ei(e){return Uo.lW.from((new Bo).random(e).toString(),"hex")}Xo.prototype.convert=function(e){var t=zo();return e.abs().dlShiftTo(this.m.t,t),t.divRemTo(this.m,null,t),e.s<0&&t.compareTo(qo.ZERO)>0&&this.m.subTo(t,t),t},Xo.prototype.revert=function(e){var t=zo();return e.copyTo(t),this.reduce(t),t},Xo.prototype.reduce=function(e){for(;e.t<=this.mt2;)e[e.t++]=0;for(var t=0;t<this.m.t;++t){var n=32767&e[t],r=n*this.mpl+((n*this.mph+(e[t]>>15)*this.mpl&this.um)<<15)&e.DM;for(e[n=t+this.m.t]+=this.m.am(0,r,e,t,0,this.m.t);e[n]>=e.DV;)e[n]-=e.DV,e[++n]++}e.clamp(),e.drShiftTo(this.m.t,e),e.compareTo(this.m)>=0&&e.subTo(this.m,e)},Xo.prototype.mulTo=function(e,t,n){e.multiplyTo(t,n),this.reduce(n)},Xo.prototype.sqrTo=function(e,t){e.squareTo(t),this.reduce(t)},qo.prototype.copyTo=function(e){for(var t=this.t-1;t>=0;--t)e[t]=this[t];e.t=this.t,e.s=this.s},qo.prototype.fromInt=function(e){this.t=1,this.s=e<0?-1:0,e>0?this[0]=e:e<-1?this[0]=e+this.DV:this.t=0},qo.prototype.fromString=function(e,t){var n;if(16==t)n=4;else if(8==t)n=3;else if(2==t)n=1;else if(32==t)n=5;else{if(4!=t)throw new Error("Only radix 2, 4, 8, 16, 32 are supported");n=2}this.t=0,this.s=0;for(var r=e.length,o=!1,i=0;--r>=0;){var s=Jo(e,r);s<0?"-"==e.charAt(r)&&(o=!0):(o=!1,0==i?this[this.t++]=s:i+n>this.DB?(this[this.t-1]|=(s&(1<<this.DB-i)-1)<<i,this[this.t++]=s>>this.DB-i):this[this.t-1]|=s<<i,(i+=n)>=this.DB&&(i-=this.DB))}this.clamp(),o&&qo.ZERO.subTo(this,this)},qo.prototype.clamp=function(){for(var e=this.s&this.DM;this.t>0&&this[this.t-1]==e;)--this.t},qo.prototype.dlShiftTo=function(e,t){var n;for(n=this.t-1;n>=0;--n)t[n+e]=this[n];for(n=e-1;n>=0;--n)t[n]=0;t.t=this.t+e,t.s=this.s},qo.prototype.drShiftTo=function(e,t){for(var n=e;n<this.t;++n)t[n-e]=this[n];t.t=Math.max(this.t-e,0),t.s=this.s},qo.prototype.lShiftTo=function(e,t){var n,r=e%this.DB,o=this.DB-r,i=(1<<o)-1,s=Math.floor(e/this.DB),a=this.s<<r&this.DM;for(n=this.t-1;n>=0;--n)t[n+s+1]=this[n]>>o|a,a=(this[n]&i)<<r;for(n=s-1;n>=0;--n)t[n]=0;t[s]=a,t.t=this.t+s+1,t.s=this.s,t.clamp()},qo.prototype.rShiftTo=function(e,t){t.s=this.s;var n=Math.floor(e/this.DB);if(n>=this.t)t.t=0;else{var r=e%this.DB,o=this.DB-r,i=(1<<r)-1;t[0]=this[n]>>r;for(var s=n+1;s<this.t;++s)t[s-n-1]|=(this[s]&i)<<o,t[s-n]=this[s]>>r;r>0&&(t[this.t-n-1]|=(this.s&i)<<o),t.t=this.t-n,t.clamp()}},qo.prototype.subTo=function(e,t){for(var n=0,r=0,o=Math.min(e.t,this.t);n<o;)r+=this[n]-e[n],t[n++]=r&this.DM,r>>=this.DB;if(e.t<this.t){for(r-=e.s;n<this.t;)r+=this[n],t[n++]=r&this.DM,r>>=this.DB;r+=this.s}else{for(r+=this.s;n<e.t;)r-=e[n],t[n++]=r&this.DM,r>>=this.DB;r-=e.s}t.s=r<0?-1:0,r<-1?t[n++]=this.DV+r:r>0&&(t[n++]=r),t.t=n,t.clamp()},qo.prototype.multiplyTo=function(e,t){var n=this.abs(),r=e.abs(),o=n.t;for(t.t=o+r.t;--o>=0;)t[o]=0;for(o=0;o<r.t;++o)t[o+n.t]=n.am(0,r[o],t,o,0,n.t);t.s=0,t.clamp(),this.s!=e.s&&qo.ZERO.subTo(t,t)},qo.prototype.squareTo=function(e){for(var t=this.abs(),n=e.t=2*t.t;--n>=0;)e[n]=0;for(n=0;n<t.t-1;++n){var r=t.am(n,t[n],e,2*n,0,1);(e[n+t.t]+=t.am(n+1,2*t[n],e,2*n+1,r,t.t-n-1))>=t.DV&&(e[n+t.t]-=t.DV,e[n+t.t+1]=1)}e.t>0&&(e[e.t-1]+=t.am(n,t[n],e,2*n,0,1)),e.s=0,e.clamp()},qo.prototype.divRemTo=function(e,t,n){var r=e.abs();if(!(r.t<=0)){var o=this.abs();if(o.t<r.t)return null!=t&&t.fromInt(0),void(null!=n&&this.copyTo(n));null==n&&(n=zo());var i=zo(),s=this.s,a=e.s,u=this.DB-Qo(r[r.t-1]);u>0?(r.lShiftTo(u,i),o.lShiftTo(u,n)):(r.copyTo(i),o.copyTo(n));var c=i.t,l=i[c-1];if(0!=l){var f=l*(1<<this.F1)+(c>1?i[c-2]>>this.F2:0),h=this.FV/f,d=(1<<this.F1)/f,p=1<<this.F2,g=n.t,y=g-c,v=null==t?zo():t;for(i.dlShiftTo(y,v),n.compareTo(v)>=0&&(n[n.t++]=1,n.subTo(v,n)),qo.ONE.dlShiftTo(c,v),v.subTo(i,i);i.t<c;)i[i.t++]=0;for(;--y>=0;){var m=n[--g]==l?this.DM:Math.floor(n[g]*h+(n[g-1]+p)*d);if((n[g]+=i.am(0,m,n,y,0,c))<m)for(i.dlShiftTo(y,v),n.subTo(v,n);n[g]<--m;)n.subTo(v,n)}null!=t&&(n.drShiftTo(c,t),s!=a&&qo.ZERO.subTo(t,t)),n.t=c,n.clamp(),u>0&&n.rShiftTo(u,n),s<0&&qo.ZERO.subTo(n,n)}}},qo.prototype.invDigit=function(){if(this.t<1)return 0;var e=this[0];if(0==(1&e))return 0;var t=3&e;return(t=(t=(t=(t=t*(2-(15&e)*t)&15)*(2-(255&e)*t)&255)*(2-((65535&e)*t&65535))&65535)*(2-e*t%this.DV)%this.DV)>0?this.DV-t:-t},qo.prototype.addTo=function(e,t){for(var n=0,r=0,o=Math.min(e.t,this.t);n<o;)r+=this[n]+e[n],t[n++]=r&this.DM,r>>=this.DB;if(e.t<this.t){for(r+=e.s;n<this.t;)r+=this[n],t[n++]=r&this.DM,r>>=this.DB;r+=this.s}else{for(r+=this.s;n<e.t;)r+=e[n],t[n++]=r&this.DM,r>>=this.DB;r+=e.s}t.s=r<0?-1:0,r>0?t[n++]=r:r<-1&&(t[n++]=this.DV+r),t.t=n,t.clamp()},qo.prototype.toString=function(e){if(this.s<0)return"-"+this.negate().toString(e);var t;if(16==e)t=4;else if(8==e)t=3;else if(2==e)t=1;else if(32==e)t=5;else{if(4!=e)throw new Error("Only radix 2, 4, 8, 16, 32 are supported");t=2}var n,r=(1<<t)-1,o=!1,i="",s=this.t,a=this.DB-s*this.DB%t;if(s-- >0)for(a<this.DB&&(n=this[s]>>a)>0&&(o=!0,i=Yo(n));s>=0;)a<t?(n=(this[s]&(1<<a)-1)<<t-a,n|=this[--s]>>(a+=this.DB-t)):(n=this[s]>>(a-=t)&r,a<=0&&(a+=this.DB,--s)),n>0&&(o=!0),o&&(i+=Yo(n));return o?i:"0"},qo.prototype.negate=function(){var e=zo();return qo.ZERO.subTo(this,e),e},qo.prototype.abs=function(){return this.s<0?this.negate():this},qo.prototype.compareTo=function(e){var t=this.s-e.s;if(0!=t)return t;var n=this.t;if(0!=(t=n-e.t))return this.s<0?-t:t;for(;--n>=0;)if(0!=(t=this[n]-e[n]))return t;return 0},qo.prototype.bitLength=function(){return this.t<=0?0:this.DB*(this.t-1)+Qo(this[this.t-1]^this.s&this.DM)},qo.prototype.mod=function(e){var t=zo();return this.abs().divRemTo(e,null,t),this.s<0&&t.compareTo(qo.ZERO)>0&&e.subTo(t,t),t},qo.prototype.equals=function(e){return 0==this.compareTo(e)},qo.prototype.add=function(e){var t=zo();return this.addTo(e,t),t},qo.prototype.subtract=function(e){var t=zo();return this.subTo(e,t),t},qo.prototype.multiply=function(e){var t=zo();return this.multiplyTo(e,t),t},qo.prototype.divide=function(e){var t=zo();return this.divRemTo(e,t,null),t},qo.prototype.modPow=function(e,t,n){var r,o=e.bitLength(),i=Zo(1),s=new Xo(t);if(o<=0)return i;r=o<18?1:o<48?3:o<144?4:o<768?5:6;var a=new Array,u=3,c=r-1,l=(1<<r)-1;if(a[1]=s.convert(this),r>1){var f=zo();for(s.sqrTo(a[1],f);u<=l;)a[u]=zo(),s.mulTo(f,a[u-2],a[u]),u+=2}var h,d,p=e.t-1,g=!0,y=zo();for(o=Qo(e[p])-1;p>=0;){for(o>=c?h=e[p]>>o-c&l:(h=(e[p]&(1<<o+1)-1)<<c-o,p>0&&(h|=e[p-1]>>this.DB+o-c)),u=r;0==(1&h);)h>>=1,--u;if((o-=u)<0&&(o+=this.DB,--p),g)a[h].copyTo(i),g=!1;else{for(;u>1;)s.sqrTo(i,y),s.sqrTo(y,i),u-=2;u>0?s.sqrTo(i,y):(d=i,i=y,y=d),s.mulTo(y,a[h],i)}for(;p>=0&&0==(e[p]&1<<o);)s.sqrTo(i,y),d=i,i=y,y=d,--o<0&&(o=this.DB-1,--p)}var v=s.revert(i);return n(null,v),v},qo.ZERO=Zo(0),qo.ONE=Zo(1);var ti=/^[89a-f]/i,ni=function(){function e(e){this.N=new Vo("FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3DC2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F83655D23DCA3AD961C62F356208552BB9ED529077096966D670C354E4ABC9804F1746C08CA18217C32905E462E36CE3BE39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9DE2BCBF6955817183995497CEA956AE515D2261898FA051015728E5A8AAAC42DAD33170D04507A33A85521ABDF1CBA64ECFB850458DBEF0A8AEA71575D060C7DB3970F85A6E1E4C7ABF5AE8CDB0933D71E8C94E04A25619DCEE3D2261AD2EE6BF12FFA06D98A0864D87602733EC86A64521F2B18177B200CBBE117577A615D6C770988C0BAD946E208E24FA074E5AB3143DB5BFCE0FD108E4B82D120A93AD2CAFFFFFFFFFFFFFFFF",16),this.g=new Vo("2",16),this.k=new Vo(this.hexHash(""+this.padHex(this.N)+this.padHex(this.g)),16),this.smallAValue=this.generateRandomSmallA(),this.getLargeAValue((function(){})),this.infoBits=Uo.lW.from("Caldera Derived Key","utf8"),this.poolName=e}var t=e.prototype;return t.getSmallAValue=function(){return this.smallAValue},t.getLargeAValue=function(e){var t=this;this.largeAValue?e(null,this.largeAValue):this.calculateA(this.smallAValue,(function(n,r){n&&e(n,null),t.largeAValue=r,e(null,t.largeAValue)}))},t.generateRandomSmallA=function(){var e=ei(128).toString("hex");return new Vo(e,16)},t.generateRandomString=function(){return ei(40).toString("base64")},t.getRandomPassword=function(){return this.randomPassword},t.getSaltDevices=function(){return this.SaltToHashDevices},t.getVerifierDevices=function(){return this.verifierDevices},t.generateHashDevice=function(e,t,n){var r=this;this.randomPassword=this.generateRandomString();var o=""+e+t+":"+this.randomPassword,i=this.hash(o),s=ei(16).toString("hex");this.SaltToHashDevices=this.padHex(new Vo(s,16)),this.g.modPow(new Vo(this.hexHash(this.SaltToHashDevices+i),16),this.N,(function(e,t){e&&n(e,null),r.verifierDevices=r.padHex(t),n(null,null)}))},t.calculateA=function(e,t){var n=this;this.g.modPow(e,this.N,(function(e,r){e&&t(e,null),r.mod(n.N).equals(Vo.ZERO)&&t(new Error("Illegal paramater. A mod N cannot be 0."),null),t(null,r)}))},t.calculateU=function(e,t){return this.UHexHash=this.hexHash(this.padHex(e)+this.padHex(t)),new Vo(this.UHexHash,16)},t.hash=function(e){var t=e instanceof Uo.lW?jo().lib.WordArray.create(e):e,n=No()(t).toString();return new Array(64-n.length).join("0")+n},t.hexHash=function(e){return this.hash(Uo.lW.from(e,"hex"))},t.computehkdf=function(e,t){var n=jo().lib.WordArray.create(Uo.lW.concat([this.infoBits,Uo.lW.from(String.fromCharCode(1),"utf8")])),r=e instanceof Uo.lW?jo().lib.WordArray.create(e):e,o=t instanceof Uo.lW?jo().lib.WordArray.create(t):t,i=Fo()(r,o),s=Fo()(n,i);return Uo.lW.from(s.toString(),"hex").slice(0,16)},t.getPasswordAuthenticationKey=function(e,t,n,r,o){var i=this;if(n.mod(this.N).equals(Vo.ZERO))throw new Error("B cannot be zero.");if(this.UValue=this.calculateU(this.largeAValue,n),this.UValue.equals(Vo.ZERO))throw new Error("U cannot be zero.");var s=""+this.poolName+e+":"+t,a=this.hash(s),u=new Vo(this.hexHash(this.padHex(r)+a),16);this.calculateS(u,n,(function(e,t){e&&o(e,null);var n=i.computehkdf(Uo.lW.from(i.padHex(t),"hex"),Uo.lW.from(i.padHex(i.UValue),"hex"));o(null,n)}))},t.calculateS=function(e,t,n){var r=this;this.g.modPow(e,this.N,(function(o,i){o&&n(o,null),t.subtract(r.k.multiply(i)).modPow(r.smallAValue.add(r.UValue.multiply(e)),r.N,(function(e,t){e&&n(e,null),n(null,t.mod(r.N))}))}))},t.getNewPasswordRequiredChallengeUserAttributePrefix=function(){return"userAttributes."},t.padHex=function(e){if(!(e instanceof Vo))throw new Error("Not a BigInteger");var t=e.compareTo(Vo.ZERO)<0,n=e.abs().toString(16);if(n=n.length%2!=0?"0"+n:n,n=ti.test(n)?"00"+n:n,t){var r=n.split("").map((function(e){var t=15&~parseInt(e,16);return"0123456789ABCDEF".charAt(t)})).join("");(n=new Vo(r,16).add(Vo.ONE).toString(16)).toUpperCase().startsWith("FF8")&&(n=n.substring(2))}return n},e}(),ri=function(){function e(e){this.jwtToken=e||"",this.payload=this.decodePayload()}var t=e.prototype;return t.getJwtToken=function(){return this.jwtToken},t.getExpiration=function(){return this.payload.exp},t.getIssuedAt=function(){return this.payload.iat},t.decodePayload=function(){var e=this.jwtToken.split(".")[1];try{return JSON.parse(Uo.lW.from(e,"base64").toString("utf8"))}catch(e){return{}}},e}();function oi(e,t){return oi=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},oi(e,t)}var ii=function(e){var t,n;function r(t){var n=(void 0===t?{}:t).AccessToken;return e.call(this,n||"")||this}return n=e,(t=r).prototype=Object.create(n.prototype),t.prototype.constructor=t,oi(t,n),r}(ri);function si(e,t){return si=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},si(e,t)}var ai=function(e){var t,n;function r(t){var n=(void 0===t?{}:t).IdToken;return e.call(this,n||"")||this}return n=e,(t=r).prototype=Object.create(n.prototype),t.prototype.constructor=t,si(t,n),r}(ri),ui=function(){function e(e){var t=(void 0===e?{}:e).RefreshToken;this.token=t||""}return e.prototype.getToken=function(){return this.token},e}(),ci=n(8139),li=n.n(ci),fi=function(){function e(e){var t=void 0===e?{}:e,n=t.IdToken,r=t.RefreshToken,o=t.AccessToken,i=t.ClockDrift;if(null==o||null==n)throw new Error("Id token and Access Token must be present.");this.idToken=n,this.refreshToken=r,this.accessToken=o,this.clockDrift=void 0===i?this.calculateClockDrift():i}var t=e.prototype;return t.getIdToken=function(){return this.idToken},t.getRefreshToken=function(){return this.refreshToken},t.getAccessToken=function(){return this.accessToken},t.getClockDrift=function(){return this.clockDrift},t.calculateClockDrift=function(){return Math.floor(new Date/1e3)-Math.min(this.accessToken.getIssuedAt(),this.idToken.getIssuedAt())},t.isValid=function(){var e=Math.floor(new Date/1e3)-this.clockDrift;return e<this.accessToken.getExpiration()&&e<this.idToken.getExpiration()},e}(),hi=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],di=["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],pi=function(){function e(){}return e.prototype.getNowString=function(){var e=new Date,t=di[e.getUTCDay()],n=hi[e.getUTCMonth()],r=e.getUTCDate(),o=e.getUTCHours();o<10&&(o="0"+o);var i=e.getUTCMinutes();i<10&&(i="0"+i);var s=e.getUTCSeconds();return s<10&&(s="0"+s),t+" "+n+" "+r+" "+o+":"+i+":"+s+" UTC "+e.getUTCFullYear()},e}(),gi=function(){function e(e){var t=void 0===e?{}:e,n=t.Name,r=t.Value;this.Name=n||"",this.Value=r||""}var t=e.prototype;return t.getValue=function(){return this.Value},t.setValue=function(e){return this.Value=e,this},t.getName=function(){return this.Name},t.setName=function(e){return this.Name=e,this},t.toString=function(){return JSON.stringify(this)},t.toJSON=function(){return{Name:this.Name,Value:this.Value}},e}(),yi={},vi=function(){function e(){}return e.setItem=function(e,t){return yi[e]=t,yi[e]},e.getItem=function(e){return Object.prototype.hasOwnProperty.call(yi,e)?yi[e]:void 0},e.removeItem=function(e){return delete yi[e]},e.clear=function(){return yi={}},e}(),mi=function(){function e(){try{this.storageWindow=window.localStorage,this.storageWindow.setItem("aws.cognito.test-ls",1),this.storageWindow.removeItem("aws.cognito.test-ls")}catch(e){this.storageWindow=vi}}return e.prototype.getStorage=function(){return this.storageWindow},e}(),bi="undefined"!=typeof navigator?navigator.userAgent:"nodejs",wi=function(){function e(e){if(null==e||null==e.Username||null==e.Pool)throw new Error("Username and Pool information are required.");this.username=e.Username||"",this.pool=e.Pool,this.Session=null,this.client=e.Pool.client,this.signInUserSession=null,this.authenticationFlowType="USER_SRP_AUTH",this.storage=e.Storage||(new mi).getStorage(),this.keyPrefix="CognitoIdentityServiceProvider."+this.pool.getClientId(),this.userDataKey=this.keyPrefix+"."+this.username+".userData"}var t=e.prototype;return t.setSignInUserSession=function(e){this.clearCachedUserData(),this.signInUserSession=e,this.cacheTokens()},t.getSignInUserSession=function(){return this.signInUserSession},t.getUsername=function(){return this.username},t.getAuthenticationFlowType=function(){return this.authenticationFlowType},t.setAuthenticationFlowType=function(e){this.authenticationFlowType=e},t.initiateAuth=function(e,t){var n=this,r=e.getAuthParameters();r.USERNAME=this.username;var o=0!==Object.keys(e.getValidationData()).length?e.getValidationData():e.getClientMetadata(),i={AuthFlow:"CUSTOM_AUTH",ClientId:this.pool.getClientId(),AuthParameters:r,ClientMetadata:o};this.getUserContextData()&&(i.UserContextData=this.getUserContextData()),this.client.request("InitiateAuth",i,(function(e,r){if(e)return t.onFailure(e);var o=r.ChallengeName,i=r.ChallengeParameters;return"CUSTOM_CHALLENGE"===o?(n.Session=r.Session,t.customChallenge(i)):(n.signInUserSession=n.getCognitoUserSession(r.AuthenticationResult),n.cacheTokens(),t.onSuccess(n.signInUserSession))}))},t.authenticateUser=function(e,t){return"USER_PASSWORD_AUTH"===this.authenticationFlowType?this.authenticateUserPlainUsernamePassword(e,t):"USER_SRP_AUTH"===this.authenticationFlowType||"CUSTOM_AUTH"===this.authenticationFlowType?this.authenticateUserDefaultAuth(e,t):t.onFailure(new Error("Authentication flow type is invalid."))},t.authenticateUserDefaultAuth=function(e,t){var n,r,o=this,i=new ni(this.pool.getUserPoolId().split("_")[1]),s=new pi,a={};null!=this.deviceKey&&(a.DEVICE_KEY=this.deviceKey),a.USERNAME=this.username,i.getLargeAValue((function(u,c){u&&t.onFailure(u),a.SRP_A=c.toString(16),"CUSTOM_AUTH"===o.authenticationFlowType&&(a.CHALLENGE_NAME="SRP_A");var l=0!==Object.keys(e.getValidationData()).length?e.getValidationData():e.getClientMetadata(),f={AuthFlow:o.authenticationFlowType,ClientId:o.pool.getClientId(),AuthParameters:a,ClientMetadata:l};o.getUserContextData(o.username)&&(f.UserContextData=o.getUserContextData(o.username)),o.client.request("InitiateAuth",f,(function(a,u){if(a)return t.onFailure(a);var c=u.ChallengeParameters;o.username=c.USER_ID_FOR_SRP,o.userDataKey=o.keyPrefix+"."+o.username+".userData",n=new Vo(c.SRP_B,16),r=new Vo(c.SALT,16),o.getCachedDeviceKeyAndPassword(),i.getPasswordAuthenticationKey(o.username,e.getPassword(),n,r,(function(e,n){e&&t.onFailure(e);var r=s.getNowString(),a=jo().lib.WordArray.create(Uo.lW.concat([Uo.lW.from(o.pool.getUserPoolId().split("_")[1],"utf8"),Uo.lW.from(o.username,"utf8"),Uo.lW.from(c.SECRET_BLOCK,"base64"),Uo.lW.from(r,"utf8")])),f=jo().lib.WordArray.create(n),h=li().stringify(Fo()(a,f)),d={};d.USERNAME=o.username,d.PASSWORD_CLAIM_SECRET_BLOCK=c.SECRET_BLOCK,d.TIMESTAMP=r,d.PASSWORD_CLAIM_SIGNATURE=h,null!=o.deviceKey&&(d.DEVICE_KEY=o.deviceKey);var p={ChallengeName:"PASSWORD_VERIFIER",ClientId:o.pool.getClientId(),ChallengeResponses:d,Session:u.Session,ClientMetadata:l};o.getUserContextData()&&(p.UserContextData=o.getUserContextData()),function e(t,n){return o.client.request("RespondToAuthChallenge",t,(function(r,i){return r&&"ResourceNotFoundException"===r.code&&-1!==r.message.toLowerCase().indexOf("device")?(d.DEVICE_KEY=null,o.deviceKey=null,o.randomPassword=null,o.deviceGroupKey=null,o.clearCachedDeviceKeyAndPassword(),e(t,n)):n(r,i)}))}(p,(function(e,n){return e?t.onFailure(e):o.authenticateUserInternal(n,i,t)}))}))}))}))},t.authenticateUserPlainUsernamePassword=function(e,t){var n=this,r={};if(r.USERNAME=this.username,r.PASSWORD=e.getPassword(),r.PASSWORD){var o=new ni(this.pool.getUserPoolId().split("_")[1]);this.getCachedDeviceKeyAndPassword(),null!=this.deviceKey&&(r.DEVICE_KEY=this.deviceKey);var i=0!==Object.keys(e.getValidationData()).length?e.getValidationData():e.getClientMetadata(),s={AuthFlow:"USER_PASSWORD_AUTH",ClientId:this.pool.getClientId(),AuthParameters:r,ClientMetadata:i};this.getUserContextData(this.username)&&(s.UserContextData=this.getUserContextData(this.username)),this.client.request("InitiateAuth",s,(function(e,r){return e?t.onFailure(e):n.authenticateUserInternal(r,o,t)}))}else t.onFailure(new Error("PASSWORD parameter is required"))},t.authenticateUserInternal=function(e,t,n){var r=this,o=e.ChallengeName,i=e.ChallengeParameters;if("SMS_MFA"===o)return this.Session=e.Session,n.mfaRequired(o,i);if("SELECT_MFA_TYPE"===o)return this.Session=e.Session,n.selectMFAType(o,i);if("MFA_SETUP"===o)return this.Session=e.Session,n.mfaSetup(o,i);if("SOFTWARE_TOKEN_MFA"===o)return this.Session=e.Session,n.totpRequired(o,i);if("CUSTOM_CHALLENGE"===o)return this.Session=e.Session,n.customChallenge(i);if("NEW_PASSWORD_REQUIRED"===o){this.Session=e.Session;var s=null,a=null,u=[],c=t.getNewPasswordRequiredChallengeUserAttributePrefix();if(i&&(s=JSON.parse(e.ChallengeParameters.userAttributes),a=JSON.parse(e.ChallengeParameters.requiredAttributes)),a)for(var l=0;l<a.length;l++)u[l]=a[l].substr(c.length);return n.newPasswordRequired(s,u)}if("DEVICE_SRP_AUTH"===o)return this.Session=e.Session,void this.getDeviceResponse(n);this.signInUserSession=this.getCognitoUserSession(e.AuthenticationResult),this.challengeName=o,this.cacheTokens();var f=e.AuthenticationResult.NewDeviceMetadata;if(null==f)return n.onSuccess(this.signInUserSession);t.generateHashDevice(e.AuthenticationResult.NewDeviceMetadata.DeviceGroupKey,e.AuthenticationResult.NewDeviceMetadata.DeviceKey,(function(o){if(o)return n.onFailure(o);var i={Salt:Uo.lW.from(t.getSaltDevices(),"hex").toString("base64"),PasswordVerifier:Uo.lW.from(t.getVerifierDevices(),"hex").toString("base64")};r.verifierDevices=i.PasswordVerifier,r.deviceGroupKey=f.DeviceGroupKey,r.randomPassword=t.getRandomPassword(),r.client.request("ConfirmDevice",{DeviceKey:f.DeviceKey,AccessToken:r.signInUserSession.getAccessToken().getJwtToken(),DeviceSecretVerifierConfig:i,DeviceName:bi},(function(t,o){return t?n.onFailure(t):(r.deviceKey=e.AuthenticationResult.NewDeviceMetadata.DeviceKey,r.cacheDeviceKeyAndPassword(),!0===o.UserConfirmationNecessary?n.onSuccess(r.signInUserSession,o.UserConfirmationNecessary):n.onSuccess(r.signInUserSession))}))}))},t.completeNewPasswordChallenge=function(e,t,n,r){var o=this;if(!e)return n.onFailure(new Error("New password is required."));var i=new ni(this.pool.getUserPoolId().split("_")[1]),s=i.getNewPasswordRequiredChallengeUserAttributePrefix(),a={};t&&Object.keys(t).forEach((function(e){a[s+e]=t[e]})),a.NEW_PASSWORD=e,a.USERNAME=this.username;var u={ChallengeName:"NEW_PASSWORD_REQUIRED",ClientId:this.pool.getClientId(),ChallengeResponses:a,Session:this.Session,ClientMetadata:r};this.getUserContextData()&&(u.UserContextData=this.getUserContextData()),this.client.request("RespondToAuthChallenge",u,(function(e,t){return e?n.onFailure(e):o.authenticateUserInternal(t,i,n)}))},t.getDeviceResponse=function(e,t){var n=this,r=new ni(this.deviceGroupKey),o=new pi,i={};i.USERNAME=this.username,i.DEVICE_KEY=this.deviceKey,r.getLargeAValue((function(s,a){s&&e.onFailure(s),i.SRP_A=a.toString(16);var u={ChallengeName:"DEVICE_SRP_AUTH",ClientId:n.pool.getClientId(),ChallengeResponses:i,ClientMetadata:t,Session:n.Session};n.getUserContextData()&&(u.UserContextData=n.getUserContextData()),n.client.request("RespondToAuthChallenge",u,(function(t,i){if(t)return e.onFailure(t);var s=i.ChallengeParameters,a=new Vo(s.SRP_B,16),u=new Vo(s.SALT,16);r.getPasswordAuthenticationKey(n.deviceKey,n.randomPassword,a,u,(function(t,r){if(t)return e.onFailure(t);var a=o.getNowString(),u=jo().lib.WordArray.create(Uo.lW.concat([Uo.lW.from(n.deviceGroupKey,"utf8"),Uo.lW.from(n.deviceKey,"utf8"),Uo.lW.from(s.SECRET_BLOCK,"base64"),Uo.lW.from(a,"utf8")])),c=jo().lib.WordArray.create(r),l=li().stringify(Fo()(u,c)),f={};f.USERNAME=n.username,f.PASSWORD_CLAIM_SECRET_BLOCK=s.SECRET_BLOCK,f.TIMESTAMP=a,f.PASSWORD_CLAIM_SIGNATURE=l,f.DEVICE_KEY=n.deviceKey;var h={ChallengeName:"DEVICE_PASSWORD_VERIFIER",ClientId:n.pool.getClientId(),ChallengeResponses:f,Session:i.Session};n.getUserContextData()&&(h.UserContextData=n.getUserContextData()),n.client.request("RespondToAuthChallenge",h,(function(t,r){return t?e.onFailure(t):(n.signInUserSession=n.getCognitoUserSession(r.AuthenticationResult),n.cacheTokens(),e.onSuccess(n.signInUserSession))}))}))}))}))},t.confirmRegistration=function(e,t,n,r){var o={ClientId:this.pool.getClientId(),ConfirmationCode:e,Username:this.username,ForceAliasCreation:t,ClientMetadata:r};this.getUserContextData()&&(o.UserContextData=this.getUserContextData()),this.client.request("ConfirmSignUp",o,(function(e){return e?n(e,null):n(null,"SUCCESS")}))},t.sendCustomChallengeAnswer=function(e,t,n){var r=this,o={};o.USERNAME=this.username,o.ANSWER=e;var i=new ni(this.pool.getUserPoolId().split("_")[1]);this.getCachedDeviceKeyAndPassword(),null!=this.deviceKey&&(o.DEVICE_KEY=this.deviceKey);var s={ChallengeName:"CUSTOM_CHALLENGE",ChallengeResponses:o,ClientId:this.pool.getClientId(),Session:this.Session,ClientMetadata:n};this.getUserContextData()&&(s.UserContextData=this.getUserContextData()),this.client.request("RespondToAuthChallenge",s,(function(e,n){return e?t.onFailure(e):r.authenticateUserInternal(n,i,t)}))},t.sendMFACode=function(e,t,n,r){var o=this,i={};i.USERNAME=this.username,i.SMS_MFA_CODE=e;var s=n||"SMS_MFA";"SOFTWARE_TOKEN_MFA"===s&&(i.SOFTWARE_TOKEN_MFA_CODE=e),null!=this.deviceKey&&(i.DEVICE_KEY=this.deviceKey);var a={ChallengeName:s,ChallengeResponses:i,ClientId:this.pool.getClientId(),Session:this.Session,ClientMetadata:r};this.getUserContextData()&&(a.UserContextData=this.getUserContextData()),this.client.request("RespondToAuthChallenge",a,(function(e,n){if(e)return t.onFailure(e);if("DEVICE_SRP_AUTH"!==n.ChallengeName){if(o.signInUserSession=o.getCognitoUserSession(n.AuthenticationResult),o.cacheTokens(),null==n.AuthenticationResult.NewDeviceMetadata)return t.onSuccess(o.signInUserSession);var r=new ni(o.pool.getUserPoolId().split("_")[1]);r.generateHashDevice(n.AuthenticationResult.NewDeviceMetadata.DeviceGroupKey,n.AuthenticationResult.NewDeviceMetadata.DeviceKey,(function(e){if(e)return t.onFailure(e);var i={Salt:Uo.lW.from(r.getSaltDevices(),"hex").toString("base64"),PasswordVerifier:Uo.lW.from(r.getVerifierDevices(),"hex").toString("base64")};o.verifierDevices=i.PasswordVerifier,o.deviceGroupKey=n.AuthenticationResult.NewDeviceMetadata.DeviceGroupKey,o.randomPassword=r.getRandomPassword(),o.client.request("ConfirmDevice",{DeviceKey:n.AuthenticationResult.NewDeviceMetadata.DeviceKey,AccessToken:o.signInUserSession.getAccessToken().getJwtToken(),DeviceSecretVerifierConfig:i,DeviceName:bi},(function(e,r){return e?t.onFailure(e):(o.deviceKey=n.AuthenticationResult.NewDeviceMetadata.DeviceKey,o.cacheDeviceKeyAndPassword(),!0===r.UserConfirmationNecessary?t.onSuccess(o.signInUserSession,r.UserConfirmationNecessary):t.onSuccess(o.signInUserSession))}))}))}else o.getDeviceResponse(t)}))},t.changePassword=function(e,t,n,r){if(null==this.signInUserSession||!this.signInUserSession.isValid())return n(new Error("User is not authenticated"),null);this.client.request("ChangePassword",{PreviousPassword:e,ProposedPassword:t,AccessToken:this.signInUserSession.getAccessToken().getJwtToken(),ClientMetadata:r},(function(e){return e?n(e,null):n(null,"SUCCESS")}))},t.enableMFA=function(e){if(null==this.signInUserSession||!this.signInUserSession.isValid())return e(new Error("User is not authenticated"),null);var t=[];t.push({DeliveryMedium:"SMS",AttributeName:"phone_number"}),this.client.request("SetUserSettings",{MFAOptions:t,AccessToken:this.signInUserSession.getAccessToken().getJwtToken()},(function(t){return t?e(t,null):e(null,"SUCCESS")}))},t.setUserMfaPreference=function(e,t,n){if(null==this.signInUserSession||!this.signInUserSession.isValid())return n(new Error("User is not authenticated"),null);this.client.request("SetUserMFAPreference",{SMSMfaSettings:e,SoftwareTokenMfaSettings:t,AccessToken:this.signInUserSession.getAccessToken().getJwtToken()},(function(e){return e?n(e,null):n(null,"SUCCESS")}))},t.disableMFA=function(e){if(null==this.signInUserSession||!this.signInUserSession.isValid())return e(new Error("User is not authenticated"),null);this.client.request("SetUserSettings",{MFAOptions:[],AccessToken:this.signInUserSession.getAccessToken().getJwtToken()},(function(t){return t?e(t,null):e(null,"SUCCESS")}))},t.deleteUser=function(e,t){var n=this;if(null==this.signInUserSession||!this.signInUserSession.isValid())return e(new Error("User is not authenticated"),null);this.client.request("DeleteUser",{AccessToken:this.signInUserSession.getAccessToken().getJwtToken(),ClientMetadata:t},(function(t){return t?e(t,null):(n.clearCachedUser(),e(null,"SUCCESS"))}))},t.updateAttributes=function(e,t,n){var r=this;if(null==this.signInUserSession||!this.signInUserSession.isValid())return t(new Error("User is not authenticated"),null);this.client.request("UpdateUserAttributes",{AccessToken:this.signInUserSession.getAccessToken().getJwtToken(),UserAttributes:e,ClientMetadata:n},(function(e){return e?t(e,null):r.getUserData((function(){return t(null,"SUCCESS")}),{bypassCache:!0})}))},t.getUserAttributes=function(e){if(null==this.signInUserSession||!this.signInUserSession.isValid())return e(new Error("User is not authenticated"),null);this.client.request("GetUser",{AccessToken:this.signInUserSession.getAccessToken().getJwtToken()},(function(t,n){if(t)return e(t,null);for(var r=[],o=0;o<n.UserAttributes.length;o++){var i={Name:n.UserAttributes[o].Name,Value:n.UserAttributes[o].Value},s=new gi(i);r.push(s)}return e(null,r)}))},t.getMFAOptions=function(e){if(null==this.signInUserSession||!this.signInUserSession.isValid())return e(new Error("User is not authenticated"),null);this.client.request("GetUser",{AccessToken:this.signInUserSession.getAccessToken().getJwtToken()},(function(t,n){return t?e(t,null):e(null,n.MFAOptions)}))},t.createGetUserRequest=function(){return this.client.promisifyRequest("GetUser",{AccessToken:this.signInUserSession.getAccessToken().getJwtToken()})},t.refreshSessionIfPossible=function(e){var t=this;return void 0===e&&(e={}),new Promise((function(n){var r=t.signInUserSession.getRefreshToken();r&&r.getToken()?t.refreshSession(r,n,e.clientMetadata):n()}))},t.getUserData=function(e,t){var n=this;if(null==this.signInUserSession||!this.signInUserSession.isValid())return this.clearCachedUserData(),e(new Error("User is not authenticated"),null);var r=this.getUserDataFromCache();if(r)if(this.isFetchUserDataAndTokenRequired(t))this.fetchUserData().then((function(e){return n.refreshSessionIfPossible(t).then((function(){return e}))})).then((function(t){return e(null,t)})).catch(e);else try{return void e(null,JSON.parse(r))}catch(t){return this.clearCachedUserData(),void e(t,null)}else this.fetchUserData().then((function(t){e(null,t)})).catch(e)},t.getUserDataFromCache=function(){return this.storage.getItem(this.userDataKey)},t.isFetchUserDataAndTokenRequired=function(e){var t=(e||{}).bypassCache;return void 0!==t&&t},t.fetchUserData=function(){var e=this;return this.createGetUserRequest().then((function(t){return e.cacheUserData(t),t}))},t.deleteAttributes=function(e,t){var n=this;if(null==this.signInUserSession||!this.signInUserSession.isValid())return t(new Error("User is not authenticated"),null);this.client.request("DeleteUserAttributes",{UserAttributeNames:e,AccessToken:this.signInUserSession.getAccessToken().getJwtToken()},(function(e){return e?t(e,null):n.getUserData((function(){return t(null,"SUCCESS")}),{bypassCache:!0})}))},t.resendConfirmationCode=function(e,t){var n={ClientId:this.pool.getClientId(),Username:this.username,ClientMetadata:t};this.client.request("ResendConfirmationCode",n,(function(t,n){return t?e(t,null):e(null,n)}))},t.getSession=function(e,t){if(void 0===t&&(t={}),null==this.username)return e(new Error("Username is null. Cannot retrieve a new session"),null);if(null!=this.signInUserSession&&this.signInUserSession.isValid())return e(null,this.signInUserSession);var n="CognitoIdentityServiceProvider."+this.pool.getClientId()+"."+this.username,r=n+".idToken",o=n+".accessToken",i=n+".refreshToken",s=n+".clockDrift";if(this.storage.getItem(r)){var a=new ai({IdToken:this.storage.getItem(r)}),u=new ii({AccessToken:this.storage.getItem(o)}),c=new ui({RefreshToken:this.storage.getItem(i)}),l=parseInt(this.storage.getItem(s),0)||0,f=new fi({IdToken:a,AccessToken:u,RefreshToken:c,ClockDrift:l});if(f.isValid())return this.signInUserSession=f,e(null,this.signInUserSession);if(!c.getToken())return e(new Error("Cannot retrieve a new session. Please authenticate."),null);this.refreshSession(c,e,t.clientMetadata)}else e(new Error("Local storage is missing an ID Token, Please authenticate"),null)},t.refreshSession=function(e,t,n){var r=this,o=this.pool.wrapRefreshSessionCallback?this.pool.wrapRefreshSessionCallback(t):t,i={};i.REFRESH_TOKEN=e.getToken();var s="CognitoIdentityServiceProvider."+this.pool.getClientId(),a=s+".LastAuthUser";if(this.storage.getItem(a)){this.username=this.storage.getItem(a);var u=s+"."+this.username+".deviceKey";this.deviceKey=this.storage.getItem(u),i.DEVICE_KEY=this.deviceKey}var c={ClientId:this.pool.getClientId(),AuthFlow:"REFRESH_TOKEN_AUTH",AuthParameters:i,ClientMetadata:n};this.getUserContextData()&&(c.UserContextData=this.getUserContextData()),this.client.request("InitiateAuth",c,(function(t,n){if(t)return"NotAuthorizedException"===t.code&&r.clearCachedUser(),o(t,null);if(n){var i=n.AuthenticationResult;return Object.prototype.hasOwnProperty.call(i,"RefreshToken")||(i.RefreshToken=e.getToken()),r.signInUserSession=r.getCognitoUserSession(i),r.cacheTokens(),o(null,r.signInUserSession)}}))},t.cacheTokens=function(){var e="CognitoIdentityServiceProvider."+this.pool.getClientId(),t=e+"."+this.username+".idToken",n=e+"."+this.username+".accessToken",r=e+"."+this.username+".refreshToken",o=e+"."+this.username+".clockDrift",i=e+".LastAuthUser";this.storage.setItem(t,this.signInUserSession.getIdToken().getJwtToken()),this.storage.setItem(n,this.signInUserSession.getAccessToken().getJwtToken()),this.storage.setItem(r,this.signInUserSession.getRefreshToken().getToken()),this.storage.setItem(o,""+this.signInUserSession.getClockDrift()),this.storage.setItem(i,this.username)},t.cacheUserData=function(e){this.storage.setItem(this.userDataKey,JSON.stringify(e))},t.clearCachedUserData=function(){this.storage.removeItem(this.userDataKey)},t.clearCachedUser=function(){this.clearCachedTokens(),this.clearCachedUserData()},t.cacheDeviceKeyAndPassword=function(){var e="CognitoIdentityServiceProvider."+this.pool.getClientId()+"."+this.username,t=e+".deviceKey",n=e+".randomPasswordKey",r=e+".deviceGroupKey";this.storage.setItem(t,this.deviceKey),this.storage.setItem(n,this.randomPassword),this.storage.setItem(r,this.deviceGroupKey)},t.getCachedDeviceKeyAndPassword=function(){var e="CognitoIdentityServiceProvider."+this.pool.getClientId()+"."+this.username,t=e+".deviceKey",n=e+".randomPasswordKey",r=e+".deviceGroupKey";this.storage.getItem(t)&&(this.deviceKey=this.storage.getItem(t),this.randomPassword=this.storage.getItem(n),this.deviceGroupKey=this.storage.getItem(r))},t.clearCachedDeviceKeyAndPassword=function(){var e="CognitoIdentityServiceProvider."+this.pool.getClientId()+"."+this.username,t=e+".deviceKey",n=e+".randomPasswordKey",r=e+".deviceGroupKey";this.storage.removeItem(t),this.storage.removeItem(n),this.storage.removeItem(r)},t.clearCachedTokens=function(){var e="CognitoIdentityServiceProvider."+this.pool.getClientId(),t=e+"."+this.username+".idToken",n=e+"."+this.username+".accessToken",r=e+"."+this.username+".refreshToken",o=e+".LastAuthUser",i=e+"."+this.username+".clockDrift";this.storage.removeItem(t),this.storage.removeItem(n),this.storage.removeItem(r),this.storage.removeItem(o),this.storage.removeItem(i)},t.getCognitoUserSession=function(e){var t=new ai(e),n=new ii(e),r=new ui(e);return new fi({IdToken:t,AccessToken:n,RefreshToken:r})},t.forgotPassword=function(e,t){var n={ClientId:this.pool.getClientId(),Username:this.username,ClientMetadata:t};this.getUserContextData()&&(n.UserContextData=this.getUserContextData()),this.client.request("ForgotPassword",n,(function(t,n){return t?e.onFailure(t):"function"==typeof e.inputVerificationCode?e.inputVerificationCode(n):e.onSuccess(n)}))},t.confirmPassword=function(e,t,n,r){var o={ClientId:this.pool.getClientId(),Username:this.username,ConfirmationCode:e,Password:t,ClientMetadata:r};this.getUserContextData()&&(o.UserContextData=this.getUserContextData()),this.client.request("ConfirmForgotPassword",o,(function(e){return e?n.onFailure(e):n.onSuccess("SUCCESS")}))},t.getAttributeVerificationCode=function(e,t,n){if(null==this.signInUserSession||!this.signInUserSession.isValid())return t.onFailure(new Error("User is not authenticated"));this.client.request("GetUserAttributeVerificationCode",{AttributeName:e,AccessToken:this.signInUserSession.getAccessToken().getJwtToken(),ClientMetadata:n},(function(e,n){return e?t.onFailure(e):"function"==typeof t.inputVerificationCode?t.inputVerificationCode(n):t.onSuccess("SUCCESS")}))},t.verifyAttribute=function(e,t,n){if(null==this.signInUserSession||!this.signInUserSession.isValid())return n.onFailure(new Error("User is not authenticated"));this.client.request("VerifyUserAttribute",{AttributeName:e,Code:t,AccessToken:this.signInUserSession.getAccessToken().getJwtToken()},(function(e){return e?n.onFailure(e):n.onSuccess("SUCCESS")}))},t.getDevice=function(e){if(null==this.signInUserSession||!this.signInUserSession.isValid())return e.onFailure(new Error("User is not authenticated"));this.client.request("GetDevice",{AccessToken:this.signInUserSession.getAccessToken().getJwtToken(),DeviceKey:this.deviceKey},(function(t,n){return t?e.onFailure(t):e.onSuccess(n)}))},t.forgetSpecificDevice=function(e,t){if(null==this.signInUserSession||!this.signInUserSession.isValid())return t.onFailure(new Error("User is not authenticated"));this.client.request("ForgetDevice",{AccessToken:this.signInUserSession.getAccessToken().getJwtToken(),DeviceKey:e},(function(e){return e?t.onFailure(e):t.onSuccess("SUCCESS")}))},t.forgetDevice=function(e){var t=this;this.forgetSpecificDevice(this.deviceKey,{onFailure:e.onFailure,onSuccess:function(n){return t.deviceKey=null,t.deviceGroupKey=null,t.randomPassword=null,t.clearCachedDeviceKeyAndPassword(),e.onSuccess(n)}})},t.setDeviceStatusRemembered=function(e){if(null==this.signInUserSession||!this.signInUserSession.isValid())return e.onFailure(new Error("User is not authenticated"));this.client.request("UpdateDeviceStatus",{AccessToken:this.signInUserSession.getAccessToken().getJwtToken(),DeviceKey:this.deviceKey,DeviceRememberedStatus:"remembered"},(function(t){return t?e.onFailure(t):e.onSuccess("SUCCESS")}))},t.setDeviceStatusNotRemembered=function(e){if(null==this.signInUserSession||!this.signInUserSession.isValid())return e.onFailure(new Error("User is not authenticated"));this.client.request("UpdateDeviceStatus",{AccessToken:this.signInUserSession.getAccessToken().getJwtToken(),DeviceKey:this.deviceKey,DeviceRememberedStatus:"not_remembered"},(function(t){return t?e.onFailure(t):e.onSuccess("SUCCESS")}))},t.listDevices=function(e,t,n){if(null==this.signInUserSession||!this.signInUserSession.isValid())return n.onFailure(new Error("User is not authenticated"));var r={AccessToken:this.signInUserSession.getAccessToken().getJwtToken(),Limit:e};t&&(r.PaginationToken=t),this.client.request("ListDevices",r,(function(e,t){return e?n.onFailure(e):n.onSuccess(t)}))},t.globalSignOut=function(e){var t=this;if(null==this.signInUserSession||!this.signInUserSession.isValid())return e.onFailure(new Error("User is not authenticated"));this.client.request("GlobalSignOut",{AccessToken:this.signInUserSession.getAccessToken().getJwtToken()},(function(n){return n?e.onFailure(n):(t.clearCachedUser(),e.onSuccess("SUCCESS"))}))},t.signOut=function(e){var t=this;e&&"function"==typeof e?this.getSession((function(n,r){if(n)return e(n);t.revokeTokens((function(n){t.cleanClientData(),e(n)}))})):this.cleanClientData()},t.revokeTokens=function(e){if(void 0===e&&(e=function(){}),"function"!=typeof e)throw new Error("Invalid revokeTokenCallback. It should be a function.");if(!this.signInUserSession)return e(new Error("User is not authenticated"));if(!this.signInUserSession.getAccessToken())return e(new Error("No Access token available"));var t=this.signInUserSession.getRefreshToken().getToken(),n=this.signInUserSession.getAccessToken();if(this.isSessionRevocable(n)&&t)return this.revokeToken({token:t,callback:e});e()},t.isSessionRevocable=function(e){if(e&&"function"==typeof e.decodePayload)try{return!!e.decodePayload().origin_jti}catch(e){}return!1},t.cleanClientData=function(){this.signInUserSession=null,this.clearCachedUser()},t.revokeToken=function(e){var t=e.token,n=e.callback;this.client.requestWithRetry("RevokeToken",{Token:t,ClientId:this.pool.getClientId()},(function(e){if(e)return n(e);n()}))},t.sendMFASelectionAnswer=function(e,t){var n=this,r={};r.USERNAME=this.username,r.ANSWER=e;var o={ChallengeName:"SELECT_MFA_TYPE",ChallengeResponses:r,ClientId:this.pool.getClientId(),Session:this.Session};this.getUserContextData()&&(o.UserContextData=this.getUserContextData()),this.client.request("RespondToAuthChallenge",o,(function(r,o){return r?t.onFailure(r):(n.Session=o.Session,"SMS_MFA"===e?t.mfaRequired(o.ChallengeName,o.ChallengeParameters):"SOFTWARE_TOKEN_MFA"===e?t.totpRequired(o.ChallengeName,o.ChallengeParameters):void 0)}))},t.getUserContextData=function(){return this.pool.getUserContextData(this.username)},t.associateSoftwareToken=function(e){var t=this;null!=this.signInUserSession&&this.signInUserSession.isValid()?this.client.request("AssociateSoftwareToken",{AccessToken:this.signInUserSession.getAccessToken().getJwtToken()},(function(t,n){return t?e.onFailure(t):e.associateSecretCode(n.SecretCode)})):this.client.request("AssociateSoftwareToken",{Session:this.Session},(function(n,r){return n?e.onFailure(n):(t.Session=r.Session,e.associateSecretCode(r.SecretCode))}))},t.verifySoftwareToken=function(e,t,n){var r=this;null!=this.signInUserSession&&this.signInUserSession.isValid()?this.client.request("VerifySoftwareToken",{AccessToken:this.signInUserSession.getAccessToken().getJwtToken(),UserCode:e,FriendlyDeviceName:t},(function(e,t){return e?n.onFailure(e):n.onSuccess(t)})):this.client.request("VerifySoftwareToken",{Session:this.Session,UserCode:e,FriendlyDeviceName:t},(function(e,t){if(e)return n.onFailure(e);r.Session=t.Session;var o={};o.USERNAME=r.username;var i={ChallengeName:"MFA_SETUP",ClientId:r.pool.getClientId(),ChallengeResponses:o,Session:r.Session};r.getUserContextData()&&(i.UserContextData=r.getUserContextData()),r.client.request("RespondToAuthChallenge",i,(function(e,t){return e?n.onFailure(e):(r.signInUserSession=r.getCognitoUserSession(t.AuthenticationResult),r.cacheTokens(),n.onSuccess(r.signInUserSession))}))}))},e}(),Si=(n(2405),"aws-amplify/5.0.4"),_i={userAgent:Si+" js",product:"",navigator:null,isReactNative:!1};function Ai(){}"undefined"!=typeof navigator&&navigator.product&&(_i.product=navigator.product||"",_i.navigator=navigator||null,"ReactNative"===navigator.product?(_i.userAgent=Si+" react-native",_i.isReactNative=!0):(_i.userAgent=Si+" js",_i.isReactNative=!1)),Ai.prototype.userAgent=_i.userAgent;const Ei=Ai;function Pi(e){var t="function"==typeof Map?new Map:void 0;return Pi=function(e){if(null===e||(n=e,-1===Function.toString.call(n).indexOf("[native code]")))return e;var n;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,r)}function r(){return xi(e,arguments,Ii(this).constructor)}return r.prototype=Object.create(e.prototype,{constructor:{value:r,enumerable:!1,writable:!0,configurable:!0}}),Oi(r,e)},Pi(e)}function xi(e,t,n){return xi=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}()?Reflect.construct.bind():function(e,t,n){var r=[null];r.push.apply(r,t);var o=new(Function.bind.apply(e,r));return n&&Oi(o,n.prototype),o},xi.apply(null,arguments)}function Oi(e,t){return Oi=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},Oi(e,t)}function Ii(e){return Ii=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},Ii(e)}var Ci=function(e){function t(t,n,r,o){var i;return(i=e.call(this,t)||this).code=n,i.name=r,i.statusCode=o,i}return r=e,(n=t).prototype=Object.create(r.prototype),n.prototype.constructor=n,Oi(n,r),t;var n,r}(Pi(Error)),Ti=function(){function e(e,t,n){this.endpoint=t||"https://cognito-idp."+e+".amazonaws.com/";var r=(n||{}).credentials;this.fetchOptions=r?{credentials:r}:{}}var t=e.prototype;return t.promisifyRequest=function(e,t){var n=this;return new Promise((function(r,o){n.request(e,t,(function(e,t){e?o(new Ci(e.message,e.code,e.name,e.statusCode)):r(t)}))}))},t.requestWithRetry=function(e,t,n){var r,o,i=this;(r=[t],o=5e3,void 0===o&&(o=ji),Ri((function(t){return new Promise((function(n,r){i.request(e,t,(function(e,t){e?r(e):n(t)}))}))}),r,function(e){return function(t){var n=100*Math.pow(2,t)+100*Math.random();return!(n>e)&&n}}(o))).then((function(e){return n(null,e)})).catch((function(e){return n(e)}))},t.request=function(e,t,n){var r,o={"Content-Type":"application/x-amz-json-1.1","X-Amz-Target":"AWSCognitoIdentityProviderService."+e,"X-Amz-User-Agent":Ei.prototype.userAgent},i=Object.assign({},this.fetchOptions,{headers:o,method:"POST",mode:"cors",cache:"no-cache",body:JSON.stringify(t)});fetch(this.endpoint,i).then((function(e){return r=e,e}),(function(e){if(e instanceof TypeError)throw new Error("Network error");throw e})).then((function(e){return e.json().catch((function(){return{}}))})).then((function(e){if(r.ok)return n(null,e);var t=(e.__type||e.code).split("#").pop(),o=new Error(e.message||e.Message||null);return o.name=t,o.code=t,n(o)})).catch((function(e){if(r&&r.headers&&r.headers.get("x-amzn-errortype"))try{var t=r.headers.get("x-amzn-errortype").split(":")[0],o=new Error(r.status?r.status.toString():null);return o.code=t,o.name=t,o.statusCode=r.status,n(o)}catch(t){return n(e)}else e instanceof Error&&"Network error"===e.message&&(e.code="NetworkError");return n(e)}))},e}(),ki={debug:function(){}},Ui=(Error,function(e){return e&&e.nonRetryable});function Ri(e,t,n,r){if(void 0===r&&(r=1),"function"!=typeof e)throw Error("functionToRetry must be a function");return ki.debug(e.name+" attempt #"+r+" with args: "+JSON.stringify(t)),e.apply(void 0,t).catch((function(o){if(ki.debug("error on "+e.name,o),Ui(o))throw ki.debug(e.name+" non retryable error",o),o;var i=n(r,t,o);if(ki.debug(e.name+" retrying in "+i+" ms"),!1!==i)return new Promise((function(e){return setTimeout(e,i)})).then((function(){return Ri(e,t,n,r+1)}));throw o}))}var ji=3e5,Mi=function(){function e(e,t){var n=e||{},r=n.UserPoolId,o=n.ClientId,i=n.endpoint,s=n.fetchOptions,a=n.AdvancedSecurityDataCollectionFlag;if(!r||!o)throw new Error("Both UserPoolId and ClientId are required.");if(r.length>55||!/^[\w-]+_[0-9a-zA-Z]+$/.test(r))throw new Error("Invalid UserPoolId format.");var u=r.split("_")[0];this.userPoolId=r,this.clientId=o,this.client=new Ti(u,i,s),this.advancedSecurityDataCollectionFlag=!1!==a,this.storage=e.Storage||(new mi).getStorage(),t&&(this.wrapRefreshSessionCallback=t)}var t=e.prototype;return t.getUserPoolId=function(){return this.userPoolId},t.getClientId=function(){return this.clientId},t.signUp=function(e,t,n,r,o,i){var s=this,a={ClientId:this.clientId,Username:e,Password:t,UserAttributes:n,ValidationData:r,ClientMetadata:i};this.getUserContextData(e)&&(a.UserContextData=this.getUserContextData(e)),this.client.request("SignUp",a,(function(t,n){if(t)return o(t,null);var r={Username:e,Pool:s,Storage:s.storage},i={user:new wi(r),userConfirmed:n.UserConfirmed,userSub:n.UserSub,codeDeliveryDetails:n.CodeDeliveryDetails};return o(null,i)}))},t.getCurrentUser=function(){var e="CognitoIdentityServiceProvider."+this.clientId+".LastAuthUser",t=this.storage.getItem(e);if(t){var n={Username:t,Pool:this,Storage:this.storage};return new wi(n)}return null},t.getUserContextData=function(e){if("undefined"!=typeof AmazonCognitoAdvancedSecurityData){var t=AmazonCognitoAdvancedSecurityData;if(this.advancedSecurityDataCollectionFlag){var n=t.getData(e,this.userPoolId,this.clientId);if(n)return{EncodedData:n}}return{}}},e}(),Ni=n(2034),Di=function(){function e(e){if(!e.domain)throw new Error("The domain of cookieStorage can not be undefined.");if(this.domain=e.domain,e.path?this.path=e.path:this.path="/",Object.prototype.hasOwnProperty.call(e,"expires")?this.expires=e.expires:this.expires=365,Object.prototype.hasOwnProperty.call(e,"secure")?this.secure=e.secure:this.secure=!0,Object.prototype.hasOwnProperty.call(e,"sameSite")){if(!["strict","lax","none"].includes(e.sameSite))throw new Error('The sameSite value of cookieStorage must be "lax", "strict" or "none".');if("none"===e.sameSite&&!this.secure)throw new Error("sameSite = None requires the Secure attribute in latest browser versions.");this.sameSite=e.sameSite}else this.sameSite=null}var t=e.prototype;return t.setItem=function(e,t){var n={path:this.path,expires:this.expires,domain:this.domain,secure:this.secure};return this.sameSite&&(n.sameSite=this.sameSite),Ni.set(e,t,n),Ni.get(e)},t.getItem=function(e){return Ni.get(e)},t.removeItem=function(e){var t={path:this.path,expires:this.expires,domain:this.domain,secure:this.secure};return this.sameSite&&(t.sameSite=this.sameSite),Ni.remove(e,t)},t.clear=function(){for(var e=Ni.get(),t=Object.keys(e).length,n=0;n<t;++n)this.removeItem(Object.keys(e)[n]);return{}},e}(),Fi=n(883),Li=function(e){var t=window.open(e,"_self");return t?Promise.resolve(t):Promise.reject()},Bi=function(){return Bi=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},Bi.apply(this,arguments)},Vi=function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function s(e){try{u(r.next(e))}catch(e){i(e)}}function a(e){try{u(r.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}u((r=r.apply(e,t||[])).next())}))},qi=function(e,t){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}},zi=function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)s.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return s},Wi="undefined"!=typeof Symbol&&"function"==typeof Symbol.for?Symbol.for("amplify_default"):"@@amplify_default",Hi=function(e,t,n){v.dispatch("auth",{event:e,data:t,message:n},"Auth",Wi)},Ki=new l("OAuth"),Gi=function(){function t(e){var t=e.config,n=e.cognitoClientId,r=e.scopes,o=void 0===r?[]:r;if(this._urlOpener=t.urlOpener||Li,this._config=t,this._cognitoClientId=n,!this.isValidScopes(o))throw Error("scopes must be a String Array");this._scopes=o}return t.prototype.isValidScopes=function(e){return Array.isArray(e)&&e.every((function(e){return"string"==typeof e}))},t.prototype.oauthSignIn=function(t,n,r,o,i,s){void 0===t&&(t="code"),void 0===i&&(i=e.Cognito);var a=this._generateState(32),u=s?a+"-"+s.split("").map((function(e){return e.charCodeAt(0).toString(16).padStart(2,"0")})).join(""):a;!function(e){window.sessionStorage.setItem("oauth_state",e)}(u);var c,l=this._generateRandom(128);c=l,window.sessionStorage.setItem("ouath_pkce_key",c);var f=this._generateChallenge(l),h=this._scopes.join(" "),d=Object.entries(Bi(Bi({redirect_uri:r,response_type:t,client_id:o,identity_provider:i,scope:h,state:u},"code"===t?{code_challenge:f}:{}),"code"===t?{code_challenge_method:"S256"}:{})).map((function(e){var t=zi(e,2),n=t[0],r=t[1];return encodeURIComponent(n)+"="+encodeURIComponent(r)})).join("&"),p="https://"+n+"/oauth2/authorize?"+d;Ki.debug("Redirecting to "+p),this._urlOpener(p,r)},t.prototype._handleCodeFlow=function(e){return Vi(this,void 0,void 0,(function(){var t,n,r,o,s,a,u,c,l,f,h,d,p,g;return qi(this,(function(y){switch(y.label){case 0:return t=((0,Fi.Qc)(e).query||"").split("&").map((function(e){return e.split("=")})).reduce((function(e,t){var n,r=zi(t,2),o=r[0],i=r[1];return Bi(Bi({},e),((n={})[o]=i,n))}),{code:void 0}).code,n=(0,Fi.Qc)(e).pathname||"/",r=(0,Fi.Qc)(this._config.redirectSignIn).pathname||"/",t&&n===r?(o="https://"+this._config.domain+"/oauth2/token",Hi("codeFlow",{},"Retrieving tokens from "+o),s=i(this._config)?this._cognitoClientId:this._config.clientID,a=i(this._config)?this._config.redirectSignIn:this._config.redirectUri,v=window.sessionStorage.getItem("ouath_pkce_key"),window.sessionStorage.removeItem("ouath_pkce_key"),c=Bi({grant_type:"authorization_code",code:t,client_id:s,redirect_uri:a},(u=v)?{code_verifier:u}:{}),Ki.debug("Calling token endpoint: "+o+" with",c),l=Object.entries(c).map((function(e){var t=zi(e,2),n=t[0],r=t[1];return encodeURIComponent(n)+"="+encodeURIComponent(r)})).join("&"),[4,fetch(o,{method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:l})]):[2];case 1:return[4,y.sent().json()];case 2:if(f=y.sent(),h=f.access_token,d=f.refresh_token,p=f.id_token,g=f.error)throw new Error(g);return[2,{accessToken:h,refreshToken:d,idToken:p}]}var v}))}))},t.prototype._handleImplicitFlow=function(e){return Vi(this,void 0,void 0,(function(){var t,n,r;return qi(this,(function(o){return t=((0,Fi.Qc)(e).hash||"#").substr(1).split("&").map((function(e){return e.split("=")})).reduce((function(e,t){var n,r=zi(t,2),o=r[0],i=r[1];return Bi(Bi({},e),((n={})[o]=i,n))}),{id_token:void 0,access_token:void 0}),n=t.id_token,r=t.access_token,Hi("implicitFlow",{},"Got tokens from "+e),Ki.debug("Retrieving implicit tokens from "+e+" with"),[2,{accessToken:r,idToken:n,refreshToken:null}]}))}))},t.prototype.handleAuthResponse=function(e){return Vi(this,void 0,void 0,(function(){var t,n,r,o,i,s,a;return qi(this,(function(u){switch(u.label){case 0:if(u.trys.push([0,5,,6]),t=e?Bi(Bi({},((0,Fi.Qc)(e).hash||"#").substr(1).split("&").map((function(e){return e.split("=")})).reduce((function(e,t){var n=zi(t,2),r=n[0],o=n[1];return e[r]=o,e}),{})),((0,Fi.Qc)(e).query||"").split("&").map((function(e){return e.split("=")})).reduce((function(e,t){var n=zi(t,2),r=n[0],o=n[1];return e[r]=o,e}),{})):{},n=t.error,r=t.error_description,n)throw new Error(r);return o=this._validateState(t),Ki.debug("Starting "+this._config.responseType+" flow with "+e),"code"!==this._config.responseType?[3,2]:(i=[{}],[4,this._handleCodeFlow(e)]);case 1:return[2,Bi.apply(void 0,[Bi.apply(void 0,i.concat([u.sent()])),{state:o}])];case 2:return s=[{}],[4,this._handleImplicitFlow(e)];case 3:return[2,Bi.apply(void 0,[Bi.apply(void 0,s.concat([u.sent()])),{state:o}])];case 4:return[3,6];case 5:throw a=u.sent(),Ki.error("Error handling auth response.",a),a;case 6:return[2]}}))}))},t.prototype._validateState=function(e){if(e){var t,n=(t=window.sessionStorage.getItem("oauth_state"),window.sessionStorage.removeItem("oauth_state"),t),r=e.state;if(n&&n!==r)throw new Error("Invalid state in OAuth flow");return r}},t.prototype.signOut=function(){return Vi(this,void 0,void 0,(function(){var e,t,n;return qi(this,(function(r){return e="https://"+this._config.domain+"/logout?",t=i(this._config)?this._cognitoClientId:this._config.oauth.clientID,n=i(this._config)?this._config.redirectSignOut:this._config.returnTo,e+=Object.entries({client_id:t,logout_uri:encodeURIComponent(n)}).map((function(e){var t=zi(e,2);return t[0]+"="+t[1]})).join("&"),Hi("oAuthSignOut",{oAuth:"signOut"},"Signing out from "+e),Ki.debug("Signing out from "+e),[2,this._urlOpener(e,n)]}))}))},t.prototype._generateState=function(e){for(var t="",n=e;n>0;--n)t+="0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"[Math.round(61*Math.random())];return t},t.prototype._generateChallenge=function(e){return this._base64URL(No()(e))},t.prototype._base64URL=function(e){return e.toString(li()).replace(/=/g,"").replace(/\+/g,"-").replace(/\//g,"_")},t.prototype._generateRandom=function(e){var t=new Uint8Array(e);if("undefined"!=typeof window&&window.crypto)window.crypto.getRandomValues(t);else for(var n=0;n<e;n+=1)t[n]=66*Math.random()|0;return this._bufferToString(t)},t.prototype._bufferToString=function(e){for(var t=[],n=0;n<e.byteLength;n+=1){var r=e[n]%62;t.push("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"[r])}return t.join("")},t}();const $i=Gi;var Yi;!function(e){e.DEFAULT_MSG="Authentication Error",e.EMPTY_EMAIL="Email cannot be empty",e.EMPTY_PHONE="Phone number cannot be empty",e.EMPTY_USERNAME="Username cannot be empty",e.INVALID_USERNAME="The username should either be a string or one of the sign in types",e.EMPTY_PASSWORD="Password cannot be empty",e.EMPTY_CODE="Confirmation code cannot be empty",e.SIGN_UP_ERROR="Error creating account",e.NO_MFA="No valid MFA method provided",e.INVALID_MFA="Invalid MFA type",e.EMPTY_CHALLENGE="Challenge response cannot be empty",e.NO_USER_SESSION="Failed to get the session because the user is empty",e.NETWORK_ERROR="Network Error",e.DEVICE_CONFIG="Device tracking has not been configured in this User Pool"}(Yi||(Yi={}));var Ji=function(){var e=function(t,n){return e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},e(t,n)};return function(t,n){function r(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}}(),Zi=new l("AuthError"),Qi=function(e){function t(n){var r=this,o=es[n],i=o.message,s=o.log;return(r=e.call(this,i)||this).constructor=t,Object.setPrototypeOf(r,t.prototype),r.name="AuthError",r.log=s||i,Zi.error(r.log),r}return Ji(t,e),t}(Error),Xi=function(e){function t(n){var r=e.call(this,n)||this;return r.constructor=t,Object.setPrototypeOf(r,t.prototype),r.name="NoUserPoolError",r}return Ji(t,e),t}(Qi),es={noConfig:{message:Yi.DEFAULT_MSG,log:"\n            Error: Amplify has not been configured correctly.\n            This error is typically caused by one of the following scenarios:\n\n            1. Make sure you're passing the awsconfig object to Amplify.configure() in your app's entry point\n                See https://aws-amplify.github.io/docs/js/authentication#configure-your-app for more information\n            \n            2. There might be multiple conflicting versions of amplify packages in your node_modules.\n\t\t\t\tRefer to our docs site for help upgrading Amplify packages (https://docs.amplify.aws/lib/troubleshooting/upgrading/q/platform/js)\n        "},missingAuthConfig:{message:Yi.DEFAULT_MSG,log:"\n            Error: Amplify has not been configured correctly. \n            The configuration object is missing required auth properties.\n            This error is typically caused by one of the following scenarios:\n\n            1. Did you run `amplify push` after adding auth via `amplify add auth`?\n                See https://aws-amplify.github.io/docs/js/authentication#amplify-project-setup for more information\n\n            2. This could also be caused by multiple conflicting versions of amplify packages, see (https://docs.amplify.aws/lib/troubleshooting/upgrading/q/platform/js) for help upgrading Amplify packages.\n        "},emptyUsername:{message:Yi.EMPTY_USERNAME},invalidUsername:{message:Yi.INVALID_USERNAME},emptyPassword:{message:Yi.EMPTY_PASSWORD},emptyCode:{message:Yi.EMPTY_CODE},signUpError:{message:Yi.SIGN_UP_ERROR,log:"The first parameter should either be non-null string or object"},noMFA:{message:Yi.NO_MFA},invalidMFA:{message:Yi.INVALID_MFA},emptyChallengeResponse:{message:Yi.EMPTY_CHALLENGE},noUserSession:{message:Yi.NO_USER_SESSION},deviceConfig:{message:Yi.DEVICE_CONFIG},networkError:{message:Yi.NETWORK_ERROR},default:{message:Yi.DEFAULT_MSG}},ts=function(){return ts=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},ts.apply(this,arguments)},ns=function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function s(e){try{u(r.next(e))}catch(e){i(e)}}function a(e){try{u(r.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}u((r=r.apply(e,t||[])).next())}))},rs=function(e,t){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}},os=function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)s.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return s},is=new l("AuthClass"),ss="aws.cognito.signin.user.admin",as="undefined"!=typeof Symbol&&"function"==typeof Symbol.for?Symbol.for("amplify_default"):"@@amplify_default",us=function(e,t,n){v.dispatch("auth",{event:e,data:t,message:n},"Auth",as)},cs=function(){function n(e){var t=this;this.userPool=null,this.user=null,this.oAuthFlowInProgress=!1,this.Credentials=mo,this.wrapRefreshSessionCallback=function(e){return function(t,n){return n?us("tokenRefresh",void 0,"New token retrieved"):us("tokenRefresh_failure",t,"Failed to retrieve new token"),e(t,n)}},this.configure(e),this.currentCredentials=this.currentCredentials.bind(this),this.currentUserCredentials=this.currentUserCredentials.bind(this),v.listen("auth",(function(e){switch(e.payload.event){case"signIn":t._storage.setItem("amplify-signin-with-hostedUI","false");break;case"signOut":t._storage.removeItem("amplify-signin-with-hostedUI");break;case"cognitoHostedUI":t._storage.setItem("amplify-signin-with-hostedUI","true")}}))}return n.prototype.getModuleName=function(){return"Auth"},n.prototype.configure=function(e){var t=this;if(!e)return this._config||{};is.debug("configure Auth");var n=Object.assign({},this._config,_o.parseMobilehubConfig(e).Auth,e);this._config=n;var r=this._config,o=r.userPoolId,s=r.userPoolWebClientId,a=r.cookieStorage,u=r.oauth,c=r.region,l=r.identityPoolId,f=r.mandatorySignIn,h=r.refreshHandlers,d=r.identityPoolRegion,p=r.clientMetadata,g=r.endpoint;if(this._config.storage){if(!this._isValidAuthStorage(this._config.storage))throw is.error("The storage in the Auth config is not valid!"),new Error("Empty storage object");this._storage=this._config.storage}else this._storage=a?new Di(a):e.ssr?new To:(new w).getStorage();if(this._storageSync=Promise.resolve(),"function"==typeof this._storage.sync&&(this._storageSync=this._storage.sync()),o){var y={UserPoolId:o,ClientId:s,endpoint:g};y.Storage=this._storage,this.userPool=new Mi(y,this.wrapRefreshSessionCallback)}this.Credentials.configure({mandatorySignIn:f,region:d||c,userPoolId:o,identityPoolId:l,refreshHandlers:h,storage:this._storage});var v=u?i(this._config.oauth)?u:u.awsCognito:void 0;if(v){var m=Object.assign({cognitoClientId:s,UserPoolId:o,domain:v.domain,scopes:v.scope,redirectSignIn:v.redirectSignIn,redirectSignOut:v.redirectSignOut,responseType:v.responseType,Storage:this._storage,urlOpener:v.urlOpener,clientMetadata:p},v.options);this._oAuthHandler=new $i({scopes:m.scopes,config:m,cognitoClientId:m.cognitoClientId});var b={};!function(e){if(T().isBrowser&&window.location)!function(e){var n=e.url;b[n]||(b[n]=!0,t._handleAuthResponse(n))}({url:window.location.href});else if(!T().isNode)throw new Error("Not supported")}()}return us("configured",null,"The Auth category has been configured successfully"),this._config},n.prototype.signUp=function(e){for(var n=this,r=[],o=1;o<arguments.length;o++)r[o-1]=arguments[o];if(!this.userPool)return this.rejectNoUserPool();var i,s=null,a=null,u=[],c=null;if(e&&"string"==typeof e){s=e,a=r?r[0]:null;var l=r?r[1]:null,f=r?r[2]:null;l&&u.push(new gi({Name:"email",Value:l})),f&&u.push(new gi({Name:"phone_number",Value:f}))}else{if(!e||"object"!=typeof e)return this.rejectAuthError(t.SignUpError);s=e.username,a=e.password,e&&e.clientMetadata?i=e.clientMetadata:this._config.clientMetadata&&(i=this._config.clientMetadata);var h=e.attributes;h&&Object.keys(h).map((function(e){u.push(new gi({Name:e,Value:h[e]}))}));var d=e.validationData;d&&(c=[],Object.keys(d).map((function(e){c.push(new gi({Name:e,Value:d[e]}))})))}return s?a?(is.debug("signUp attrs:",u),is.debug("signUp validation data:",c),new Promise((function(e,t){n.userPool.signUp(s,a,u,c,(function(n,r){n?(us("signUp_failure",n,s+" failed to signup"),t(n)):(us("signUp",r,s+" has signed up successfully"),e(r))}),i)}))):this.rejectAuthError(t.EmptyPassword):this.rejectAuthError(t.EmptyUsername)},n.prototype.confirmSignUp=function(e,n,r){if(!this.userPool)return this.rejectNoUserPool();if(!e)return this.rejectAuthError(t.EmptyUsername);if(!n)return this.rejectAuthError(t.EmptyCode);var o,i=this.createCognitoUser(e),s=!r||"boolean"!=typeof r.forceAliasCreation||r.forceAliasCreation;return r&&r.clientMetadata?o=r.clientMetadata:this._config.clientMetadata&&(o=this._config.clientMetadata),new Promise((function(e,t){i.confirmRegistration(n,s,(function(n,r){n?t(n):e(r)}),o)}))},n.prototype.resendSignUp=function(e,n){if(void 0===n&&(n=this._config.clientMetadata),!this.userPool)return this.rejectNoUserPool();if(!e)return this.rejectAuthError(t.EmptyUsername);var r=this.createCognitoUser(e);return new Promise((function(e,t){r.resendConfirmationCode((function(n,r){n?t(n):e(r)}),n)}))},n.prototype.signIn=function(e,n,r){if(void 0===r&&(r=this._config.clientMetadata),!this.userPool)return this.rejectNoUserPool();var o=null,i=null,s={};if("string"==typeof e)o=e,i=n;else{if(!e.username)return this.rejectAuthError(t.InvalidUsername);void 0!==n&&is.warn("The password should be defined under the first parameter object!"),o=e.username,i=e.password,s=e.validationData}if(!o)return this.rejectAuthError(t.EmptyUsername);var a=new ko({Username:o,Password:i,ValidationData:s,ClientMetadata:r});return i?this.signInWithPassword(a):this.signInWithoutPassword(a)},n.prototype.authCallbacks=function(e,t,n){var r=this,o=this;return{onSuccess:function(i){return ns(r,void 0,void 0,(function(){var r,s,a,u;return rs(this,(function(c){switch(c.label){case 0:is.debug(i),delete e.challengeName,delete e.challengeParam,c.label=1;case 1:return c.trys.push([1,4,5,9]),[4,this.Credentials.clear()];case 2:return c.sent(),[4,this.Credentials.set(i,"session")];case 3:return r=c.sent(),is.debug("succeed to get cognito credentials",r),[3,9];case 4:return s=c.sent(),is.debug("cannot get cognito credentials",s),[3,9];case 5:return c.trys.push([5,7,,8]),[4,this.currentUserPoolUser()];case 6:return a=c.sent(),o.user=a,us("signIn",a,"A user "+e.getUsername()+" has been signed in"),t(a),[3,8];case 7:return u=c.sent(),is.error("Failed to get the signed in user",u),n(u),[3,8];case 8:return[7];case 9:return[2]}}))}))},onFailure:function(t){is.debug("signIn failure",t),us("signIn_failure",t,e.getUsername()+" failed to signin"),n(t)},customChallenge:function(n){is.debug("signIn custom challenge answer required"),e.challengeName="CUSTOM_CHALLENGE",e.challengeParam=n,t(e)},mfaRequired:function(n,r){is.debug("signIn MFA required"),e.challengeName=n,e.challengeParam=r,t(e)},mfaSetup:function(n,r){is.debug("signIn mfa setup",n),e.challengeName=n,e.challengeParam=r,t(e)},newPasswordRequired:function(n,r){is.debug("signIn new password"),e.challengeName="NEW_PASSWORD_REQUIRED",e.challengeParam={userAttributes:n,requiredAttributes:r},t(e)},totpRequired:function(n,r){is.debug("signIn totpRequired"),e.challengeName=n,e.challengeParam=r,t(e)},selectMFAType:function(n,r){is.debug("signIn selectMFAType",n),e.challengeName=n,e.challengeParam=r,t(e)}}},n.prototype.signInWithPassword=function(e){var t=this;if(this.pendingSignIn)throw new Error("Pending sign-in attempt already in progress");var n=this.createCognitoUser(e.getUsername());return this.pendingSignIn=new Promise((function(r,o){n.authenticateUser(e,t.authCallbacks(n,(function(e){t.pendingSignIn=null,r(e)}),(function(e){t.pendingSignIn=null,o(e)})))})),this.pendingSignIn},n.prototype.signInWithoutPassword=function(e){var t=this,n=this.createCognitoUser(e.getUsername());return n.setAuthenticationFlowType("CUSTOM_AUTH"),new Promise((function(r,o){n.initiateAuth(e,t.authCallbacks(n,r,o))}))},n.prototype.getMFAOptions=function(e){return new Promise((function(t,n){e.getMFAOptions((function(e,r){if(e)return is.debug("get MFA Options failed",e),void n(e);is.debug("get MFA options success",r),t(r)}))}))},n.prototype.getPreferredMFA=function(e,t){var n=this,r=this;return new Promise((function(o,i){var s=n._config.clientMetadata,a=!!t&&t.bypassCache;e.getUserData((function(t,s){return ns(n,void 0,void 0,(function(){var n,a;return rs(this,(function(u){switch(u.label){case 0:if(!t)return[3,5];if(is.debug("getting preferred mfa failed",t),!this.isSessionInvalid(t))return[3,4];u.label=1;case 1:return u.trys.push([1,3,,4]),[4,this.cleanUpInvalidSession(e)];case 2:return u.sent(),[3,4];case 3:return n=u.sent(),i(new Error("Session is invalid due to: "+t.message+" and failed to clean up invalid session: "+n.message)),[2];case 4:return i(t),[2];case 5:return(a=r._getMfaTypeFromUserData(s))?(o(a),[2]):(i("invalid MFA Type"),[2])}}))}))}),{bypassCache:a,clientMetadata:s})}))},n.prototype._getMfaTypeFromUserData=function(e){var t=null,n=e.PreferredMfaSetting;if(n)t=n;else{var r=e.UserMFASettingList;r?0===r.length?t="NOMFA":is.debug("invalid case for getPreferredMFA",e):t=e.MFAOptions?"SMS_MFA":"NOMFA"}return t},n.prototype._getUserData=function(e,t){var n=this;return new Promise((function(r,o){e.getUserData((function(t,i){return ns(n,void 0,void 0,(function(){var n;return rs(this,(function(s){switch(s.label){case 0:if(!t)return[3,5];if(is.debug("getting user data failed",t),!this.isSessionInvalid(t))return[3,4];s.label=1;case 1:return s.trys.push([1,3,,4]),[4,this.cleanUpInvalidSession(e)];case 2:return s.sent(),[3,4];case 3:return n=s.sent(),o(new Error("Session is invalid due to: "+t.message+" and failed to clean up invalid session: "+n.message)),[2];case 4:return o(t),[2];case 5:r(i),s.label=6;case 6:return[2]}}))}))}),t)}))},n.prototype.setPreferredMFA=function(e,n){return ns(this,void 0,void 0,(function(){var r,o,i,s,a,u,c=this;return rs(this,(function(l){switch(l.label){case 0:return r=this._config.clientMetadata,[4,this._getUserData(e,{bypassCache:!0,clientMetadata:r})];case 1:switch(o=l.sent(),i=null,s=null,n){case"TOTP":case"SOFTWARE_TOKEN_MFA":return[3,2];case"SMS":case"SMS_MFA":return[3,3];case"NOMFA":return[3,4]}return[3,6];case 2:return s={PreferredMfa:!0,Enabled:!0},[3,7];case 3:return i={PreferredMfa:!0,Enabled:!0},[3,7];case 4:return a=o.UserMFASettingList,[4,this._getMfaTypeFromUserData(o)];case 5:if("NOMFA"===(u=l.sent()))return[2,Promise.resolve("No change for mfa type")];if("SMS_MFA"===u)i={PreferredMfa:!1,Enabled:!1};else{if("SOFTWARE_TOKEN_MFA"!==u)return[2,this.rejectAuthError(t.InvalidMFA)];s={PreferredMfa:!1,Enabled:!1}}return a&&0!==a.length&&a.forEach((function(e){"SMS_MFA"===e?i={PreferredMfa:!1,Enabled:!1}:"SOFTWARE_TOKEN_MFA"===e&&(s={PreferredMfa:!1,Enabled:!1})})),[3,7];case 6:return is.debug("no validmfa method provided"),[2,this.rejectAuthError(t.NoMFA)];case 7:return[2,new Promise((function(t,n){e.setUserMfaPreference(i,s,(function(o,i){if(o)return is.debug("Set user mfa preference error",o),n(o);is.debug("Set user mfa success",i),is.debug("Caching the latest user data into local"),e.getUserData((function(r,o){return ns(c,void 0,void 0,(function(){var o;return rs(this,(function(s){switch(s.label){case 0:if(!r)return[3,5];if(is.debug("getting user data failed",r),!this.isSessionInvalid(r))return[3,4];s.label=1;case 1:return s.trys.push([1,3,,4]),[4,this.cleanUpInvalidSession(e)];case 2:return s.sent(),[3,4];case 3:return o=s.sent(),n(new Error("Session is invalid due to: "+r.message+" and failed to clean up invalid session: "+o.message)),[2];case 4:return[2,n(r)];case 5:return[2,t(i)]}}))}))}),{bypassCache:!0,clientMetadata:r})}))}))]}}))}))},n.prototype.disableSMS=function(e){return new Promise((function(t,n){e.disableMFA((function(e,r){if(e)return is.debug("disable mfa failed",e),void n(e);is.debug("disable mfa succeed",r),t(r)}))}))},n.prototype.enableSMS=function(e){return new Promise((function(t,n){e.enableMFA((function(e,r){if(e)return is.debug("enable mfa failed",e),void n(e);is.debug("enable mfa succeed",r),t(r)}))}))},n.prototype.setupTOTP=function(e){return new Promise((function(t,n){e.associateSoftwareToken({onFailure:function(e){is.debug("associateSoftwareToken failed",e),n(e)},associateSecretCode:function(e){is.debug("associateSoftwareToken sucess",e),t(e)}})}))},n.prototype.verifyTotpToken=function(e,t){return is.debug("verification totp token",e,t),new Promise((function(n,r){e.verifySoftwareToken(t,"My TOTP device",{onFailure:function(e){is.debug("verifyTotpToken failed",e),r(e)},onSuccess:function(t){us("signIn",e,"A user "+e.getUsername()+" has been signed in"),is.debug("verifyTotpToken success",t),n(t)}})}))},n.prototype.confirmSignIn=function(e,n,r,o){var i=this;if(void 0===o&&(o=this._config.clientMetadata),!n)return this.rejectAuthError(t.EmptyCode);var s=this;return new Promise((function(t,a){e.sendMFACode(n,{onSuccess:function(n){return ns(i,void 0,void 0,(function(){var r,o;return rs(this,(function(i){switch(i.label){case 0:is.debug(n),i.label=1;case 1:return i.trys.push([1,4,5,6]),[4,this.Credentials.clear()];case 2:return i.sent(),[4,this.Credentials.set(n,"session")];case 3:return r=i.sent(),is.debug("succeed to get cognito credentials",r),[3,6];case 4:return o=i.sent(),is.debug("cannot get cognito credentials",o),[3,6];case 5:return s.user=e,us("signIn",e,"A user "+e.getUsername()+" has been signed in"),t(e),[7];case 6:return[2]}}))}))},onFailure:function(e){is.debug("confirm signIn failure",e),a(e)}},r,o)}))},n.prototype.completeNewPassword=function(e,n,r,o){var i=this;if(void 0===r&&(r={}),void 0===o&&(o=this._config.clientMetadata),!n)return this.rejectAuthError(t.EmptyPassword);var s=this;return new Promise((function(t,a){e.completeNewPasswordChallenge(n,r,{onSuccess:function(n){return ns(i,void 0,void 0,(function(){var r,o;return rs(this,(function(i){switch(i.label){case 0:is.debug(n),i.label=1;case 1:return i.trys.push([1,4,5,6]),[4,this.Credentials.clear()];case 2:return i.sent(),[4,this.Credentials.set(n,"session")];case 3:return r=i.sent(),is.debug("succeed to get cognito credentials",r),[3,6];case 4:return o=i.sent(),is.debug("cannot get cognito credentials",o),[3,6];case 5:return s.user=e,us("signIn",e,"A user "+e.getUsername()+" has been signed in"),t(e),[7];case 6:return[2]}}))}))},onFailure:function(e){is.debug("completeNewPassword failure",e),us("completeNewPassword_failure",e,i.user+" failed to complete the new password flow"),a(e)},mfaRequired:function(n,r){is.debug("signIn MFA required"),e.challengeName=n,e.challengeParam=r,t(e)},mfaSetup:function(n,r){is.debug("signIn mfa setup",n),e.challengeName=n,e.challengeParam=r,t(e)},totpRequired:function(n,r){is.debug("signIn mfa setup",n),e.challengeName=n,e.challengeParam=r,t(e)}},o)}))},n.prototype.sendCustomChallengeAnswer=function(e,n,r){var o=this;return void 0===r&&(r=this._config.clientMetadata),this.userPool?n?new Promise((function(t,i){e.sendCustomChallengeAnswer(n,o.authCallbacks(e,t,i),r)})):this.rejectAuthError(t.EmptyChallengeResponse):this.rejectNoUserPool()},n.prototype.deleteUserAttributes=function(e,t){var n=this;return new Promise((function(r,o){n.userSession(e).then((function(n){e.deleteAttributes(t,(function(e,t){return e?o(e):r(t)}))}))}))},n.prototype.deleteUser=function(){return ns(this,void 0,void 0,(function(){var e,t,n=this;return rs(this,(function(r){switch(r.label){case 0:return r.trys.push([0,2,,3]),[4,this._storageSync];case 1:return r.sent(),[3,3];case 2:throw e=r.sent(),is.debug("Failed to sync cache info into memory",e),new Error(e);case 3:return t=this._oAuthHandler&&"true"===this._storage.getItem("amplify-signin-with-hostedUI"),[2,new Promise((function(e,r){return ns(n,void 0,void 0,(function(){var n,o=this;return rs(this,(function(i){if(this.userPool){if(!(n=this.userPool.getCurrentUser()))return is.debug("Failed to get user from user pool"),[2,r(new Error("No current user."))];n.getSession((function(i,s){return ns(o,void 0,void 0,(function(){var o,s=this;return rs(this,(function(a){switch(a.label){case 0:if(!i)return[3,5];if(is.debug("Failed to get the user session",i),!this.isSessionInvalid(i))return[3,4];a.label=1;case 1:return a.trys.push([1,3,,4]),[4,this.cleanUpInvalidSession(n)];case 2:return a.sent(),[3,4];case 3:return o=a.sent(),r(new Error("Session is invalid due to: "+i.message+" and failed to clean up invalid session: "+o.message)),[2];case 4:return[2,r(i)];case 5:n.deleteUser((function(o,i){if(o)r(o);else{us("userDeleted",i,"The authenticated user has been deleted."),n.signOut(),s.user=null;try{s.cleanCachedItems()}catch(e){is.debug("failed to clear cached items")}t?s.oAuthSignOutRedirect(e,r):(us("signOut",s.user,"A user has been signed out"),e(i))}})),a.label=6;case 6:return[2]}}))}))}))}else is.debug("no Congito User pool"),r(new Error("Cognito User pool does not exist"));return[2]}))}))}))]}}))}))},n.prototype.updateUserAttributes=function(e,t,n){void 0===n&&(n=this._config.clientMetadata);var r=[],o=this;return new Promise((function(i,s){o.userSession(e).then((function(o){for(var a in t)if("sub"!==a&&a.indexOf("_verified")<0){var u={Name:a,Value:t[a]};r.push(u)}e.updateAttributes(r,(function(e,t){return e?s(e):i(t)}),n)}))}))},n.prototype.userAttributes=function(e){var t=this;return new Promise((function(n,r){t.userSession(e).then((function(t){e.getUserAttributes((function(e,t){e?r(e):n(t)}))}))}))},n.prototype.verifiedContact=function(e){var t=this;return this.userAttributes(e).then((function(e){var n=t.attributesToObject(e),r={},o={};return n.email&&(n.email_verified?o.email=n.email:r.email=n.email),n.phone_number&&(n.phone_number_verified?o.phone_number=n.phone_number:r.phone_number=n.phone_number),{verified:o,unverified:r}}))},n.prototype.isErrorWithMessage=function(e){return"object"==typeof e&&Object.prototype.hasOwnProperty.call(e,"message")},n.prototype.isTokenRevokedError=function(e){return this.isErrorWithMessage(e)&&"Access Token has been revoked"===e.message},n.prototype.isRefreshTokenRevokedError=function(e){return this.isErrorWithMessage(e)&&"Refresh Token has been revoked"===e.message},n.prototype.isUserDisabledError=function(e){return this.isErrorWithMessage(e)&&"User is disabled."===e.message},n.prototype.isUserDoesNotExistError=function(e){return this.isErrorWithMessage(e)&&"User does not exist."===e.message},n.prototype.isRefreshTokenExpiredError=function(e){return this.isErrorWithMessage(e)&&"Refresh Token has expired"===e.message},n.prototype.isSignedInHostedUI=function(){return this._oAuthHandler&&"true"===this._storage.getItem("amplify-signin-with-hostedUI")},n.prototype.isSessionInvalid=function(e){return this.isUserDisabledError(e)||this.isUserDoesNotExistError(e)||this.isTokenRevokedError(e)||this.isRefreshTokenRevokedError(e)||this.isRefreshTokenExpiredError(e)},n.prototype.cleanUpInvalidSession=function(e){return ns(this,void 0,void 0,(function(){var t=this;return rs(this,(function(n){switch(n.label){case 0:e.signOut(),this.user=null,n.label=1;case 1:return n.trys.push([1,3,,4]),[4,this.cleanCachedItems()];case 2:return n.sent(),[3,4];case 3:return n.sent(),is.debug("failed to clear cached items"),[3,4];case 4:return this.isSignedInHostedUI()?[2,new Promise((function(e,n){t.oAuthSignOutRedirect(e,n)}))]:(us("signOut",this.user,"A user has been signed out"),[2])}}))}))},n.prototype.currentUserPoolUser=function(e){var t=this;return this.userPool?new Promise((function(n,r){t._storageSync.then((function(){return ns(t,void 0,void 0,(function(){var t,o,i=this;return rs(this,(function(s){switch(s.label){case 0:return this.isOAuthInProgress()?(is.debug("OAuth signIn in progress, waiting for resolution..."),[4,new Promise((function(e){var t=setTimeout((function(){is.debug("OAuth signIn in progress timeout"),v.remove("auth",n),e()}),1e4);function n(r){var o=r.payload.event;"cognitoHostedUI"!==o&&"cognitoHostedUI_failure"!==o||(is.debug("OAuth signIn resolved: "+o),clearTimeout(t),v.remove("auth",n),e())}v.listen("auth",n)}))]):[3,2];case 1:s.sent(),s.label=2;case 2:return(t=this.userPool.getCurrentUser())?(o=this._config.clientMetadata,t.getSession((function(o,s){return ns(i,void 0,void 0,(function(){var i,a,u,c,l=this;return rs(this,(function(f){switch(f.label){case 0:if(!o)return[3,5];if(is.debug("Failed to get the user session",o),!this.isSessionInvalid(o))return[3,4];f.label=1;case 1:return f.trys.push([1,3,,4]),[4,this.cleanUpInvalidSession(t)];case 2:return f.sent(),[3,4];case 3:return i=f.sent(),r(new Error("Session is invalid due to: "+o.message+" and failed to clean up invalid session: "+i.message)),[2];case 4:return r(o),[2];case 5:return(a=!!e&&e.bypassCache)?[4,this.Credentials.clear()]:[3,7];case 6:f.sent(),f.label=7;case 7:return u=this._config.clientMetadata,(void 0===(c=s.getAccessToken().decodePayload().scope)?"":c).split(" ").includes(ss)?(t.getUserData((function(e,o){return ns(l,void 0,void 0,(function(){var i,s,a,u,c,l,f;return rs(this,(function(h){switch(h.label){case 0:if(!e)return[3,7];if(is.debug("getting user data failed",e),!this.isSessionInvalid(e))return[3,5];h.label=1;case 1:return h.trys.push([1,3,,4]),[4,this.cleanUpInvalidSession(t)];case 2:return h.sent(),[3,4];case 3:return i=h.sent(),r(new Error("Session is invalid due to: "+e.message+" and failed to clean up invalid session: "+i.message)),[2];case 4:return r(e),[3,6];case 5:n(t),h.label=6;case 6:return[2];case 7:for(s=o.PreferredMfaSetting||"NOMFA",a=[],u=0;u<o.UserAttributes.length;u++)c={Name:o.UserAttributes[u].Name,Value:o.UserAttributes[u].Value},l=new gi(c),a.push(l);return f=this.attributesToObject(a),Object.assign(t,{attributes:f,preferredMFA:s}),[2,n(t)]}}))}))}),{bypassCache:a,clientMetadata:u}),[2]):(is.debug("Unable to get the user data because the "+ss+" is not in the scopes of the access token"),[2,n(t)])}}))}))}),{clientMetadata:o}),[2]):(is.debug("Failed to get user from user pool"),r("No current user"),[2])}}))}))})).catch((function(e){return is.debug("Failed to sync cache info into memory",e),r(e)}))})):this.rejectNoUserPool()},n.prototype.isOAuthInProgress=function(){return this.oAuthFlowInProgress},n.prototype.currentAuthenticatedUser=function(e){return ns(this,void 0,void 0,(function(){var t,n,r,o,i;return rs(this,(function(s){switch(s.label){case 0:is.debug("getting current authenticated user"),t=null,s.label=1;case 1:return s.trys.push([1,3,,4]),[4,this._storageSync];case 2:return s.sent(),[3,4];case 3:throw n=s.sent(),is.debug("Failed to sync cache info into memory",n),n;case 4:try{(r=JSON.parse(this._storage.getItem("aws-amplify-federatedInfo")))&&(t=ts(ts({},r.user),{token:r.token}))}catch(e){is.debug("cannot load federated user from auth storage")}return t?(this.user=t,is.debug("get current authenticated federated user",this.user),[2,this.user]):[3,5];case 5:is.debug("get current authenticated userpool user"),o=null,s.label=6;case 6:return s.trys.push([6,8,,9]),[4,this.currentUserPoolUser(e)];case 7:return o=s.sent(),[3,9];case 8:return"No userPool"===(i=s.sent())&&is.error("Cannot get the current user because the user pool is missing. Please make sure the Auth module is configured with a valid Cognito User Pool ID"),is.debug("The user is not authenticated by the error",i),[2,Promise.reject("The user is not authenticated")];case 9:return this.user=o,[2,this.user]}}))}))},n.prototype.currentSession=function(){var e=this;return is.debug("Getting current session"),this.userPool?new Promise((function(t,n){e.currentUserPoolUser().then((function(r){e.userSession(r).then((function(e){t(e)})).catch((function(e){is.debug("Failed to get the current session",e),n(e)}))})).catch((function(e){is.debug("Failed to get the current user",e),n(e)}))})):this.rejectNoUserPool()},n.prototype.userSession=function(e){var n=this;if(!e)return is.debug("the user is null"),this.rejectAuthError(t.NoUserSession);var r=this._config.clientMetadata;return new Promise((function(t,o){is.debug("Getting the session from this user:",e),e.getSession((function(r,i){return ns(n,void 0,void 0,(function(){var n;return rs(this,(function(s){switch(s.label){case 0:if(!r)return[3,5];if(is.debug("Failed to get the session from user",e),!this.isSessionInvalid(r))return[3,4];s.label=1;case 1:return s.trys.push([1,3,,4]),[4,this.cleanUpInvalidSession(e)];case 2:return s.sent(),[3,4];case 3:return n=s.sent(),o(new Error("Session is invalid due to: "+r.message+" and failed to clean up invalid session: "+n.message)),[2];case 4:return o(r),[2];case 5:return is.debug("Succeed to get the user session",i),t(i),[2]}}))}))}),{clientMetadata:r})}))},n.prototype.currentUserCredentials=function(){return ns(this,void 0,void 0,(function(){var e,t,n=this;return rs(this,(function(r){switch(r.label){case 0:is.debug("Getting current user credentials"),r.label=1;case 1:return r.trys.push([1,3,,4]),[4,this._storageSync];case 2:return r.sent(),[3,4];case 3:throw e=r.sent(),is.debug("Failed to sync cache info into memory",e),e;case 4:t=null;try{t=JSON.parse(this._storage.getItem("aws-amplify-federatedInfo"))}catch(e){is.debug("failed to get or parse item aws-amplify-federatedInfo",e)}return t?[2,this.Credentials.refreshFederatedToken(t)]:[2,this.currentSession().then((function(e){return is.debug("getting session success",e),n.Credentials.set(e,"session")})).catch((function(){return is.debug("getting guest credentials"),n.Credentials.set(null,"guest")}))]}}))}))},n.prototype.currentCredentials=function(){return is.debug("getting current credentials"),this.Credentials.get()},n.prototype.verifyUserAttribute=function(e,t,n){return void 0===n&&(n=this._config.clientMetadata),new Promise((function(r,o){e.getAttributeVerificationCode(t,{onSuccess:function(e){return r(e)},onFailure:function(e){return o(e)}},n)}))},n.prototype.verifyUserAttributeSubmit=function(e,n,r){return r?new Promise((function(t,o){e.verifyAttribute(n,r,{onSuccess:function(e){t(e)},onFailure:function(e){o(e)}})})):this.rejectAuthError(t.EmptyCode)},n.prototype.verifyCurrentUserAttribute=function(e){var t=this;return t.currentUserPoolUser().then((function(n){return t.verifyUserAttribute(n,e)}))},n.prototype.verifyCurrentUserAttributeSubmit=function(e,t){var n=this;return n.currentUserPoolUser().then((function(r){return n.verifyUserAttributeSubmit(r,e,t)}))},n.prototype.cognitoIdentitySignOut=function(e,t){return ns(this,void 0,void 0,(function(){var n,r,o=this;return rs(this,(function(i){switch(i.label){case 0:return i.trys.push([0,2,,3]),[4,this._storageSync];case 1:return i.sent(),[3,3];case 2:throw n=i.sent(),is.debug("Failed to sync cache info into memory",n),n;case 3:return r=this._oAuthHandler&&"true"===this._storage.getItem("amplify-signin-with-hostedUI"),[2,new Promise((function(n,i){if(e&&e.global){is.debug("user global sign out",t);var s=o._config.clientMetadata;t.getSession((function(e,s){return ns(o,void 0,void 0,(function(){var o,s=this;return rs(this,(function(a){switch(a.label){case 0:if(!e)return[3,5];if(is.debug("failed to get the user session",e),!this.isSessionInvalid(e))return[3,4];a.label=1;case 1:return a.trys.push([1,3,,4]),[4,this.cleanUpInvalidSession(t)];case 2:return a.sent(),[3,4];case 3:return o=a.sent(),i(new Error("Session is invalid due to: "+e.message+" and failed to clean up invalid session: "+o.message)),[2];case 4:return[2,i(e)];case 5:return t.globalSignOut({onSuccess:function(e){if(is.debug("global sign out success"),!r)return n();s.oAuthSignOutRedirect(n,i)},onFailure:function(e){return is.debug("global sign out failed",e),i(e)}}),[2]}}))}))}),{clientMetadata:s})}else is.debug("user sign out",t),t.signOut((function(){if(!r)return n();o.oAuthSignOutRedirect(n,i)}))}))]}}))}))},n.prototype.oAuthSignOutRedirect=function(e,t){T().isBrowser?this.oAuthSignOutRedirectOrReject(t):this.oAuthSignOutAndResolve(e)},n.prototype.oAuthSignOutAndResolve=function(e){this._oAuthHandler.signOut(),e()},n.prototype.oAuthSignOutRedirectOrReject=function(e){this._oAuthHandler.signOut(),setTimeout((function(){return e(Error("Signout timeout fail"))}),3e3)},n.prototype.signOut=function(e){return ns(this,void 0,void 0,(function(){var t;return rs(this,(function(n){switch(n.label){case 0:return n.trys.push([0,2,,3]),[4,this.cleanCachedItems()];case 1:return n.sent(),[3,3];case 2:return n.sent(),is.debug("failed to clear cached items"),[3,3];case 3:return this.userPool?(t=this.userPool.getCurrentUser())?[4,this.cognitoIdentitySignOut(e,t)]:[3,5]:[3,7];case 4:return n.sent(),[3,6];case 5:is.debug("no current Cognito user"),n.label=6;case 6:return[3,8];case 7:is.debug("no Cognito User pool"),n.label=8;case 8:return us("signOut",this.user,"A user has been signed out"),this.user=null,[2]}}))}))},n.prototype.cleanCachedItems=function(){return ns(this,void 0,void 0,(function(){return rs(this,(function(e){switch(e.label){case 0:return[4,this.Credentials.clear()];case 1:return e.sent(),[2]}}))}))},n.prototype.changePassword=function(e,t,n,r){var o=this;return void 0===r&&(r=this._config.clientMetadata),new Promise((function(i,s){o.userSession(e).then((function(o){e.changePassword(t,n,(function(e,t){return e?(is.debug("change password failure",e),s(e)):i(t)}),r)}))}))},n.prototype.forgotPassword=function(e,n){if(void 0===n&&(n=this._config.clientMetadata),!this.userPool)return this.rejectNoUserPool();if(!e)return this.rejectAuthError(t.EmptyUsername);var r=this.createCognitoUser(e);return new Promise((function(t,o){r.forgotPassword({onSuccess:function(){t()},onFailure:function(t){is.debug("forgot password failure",t),us("forgotPassword_failure",t,e+" forgotPassword failed"),o(t)},inputVerificationCode:function(n){us("forgotPassword",r,e+" has initiated forgot password flow"),t(n)}},n)}))},n.prototype.forgotPasswordSubmit=function(e,n,r,o){if(void 0===o&&(o=this._config.clientMetadata),!this.userPool)return this.rejectNoUserPool();if(!e)return this.rejectAuthError(t.EmptyUsername);if(!n)return this.rejectAuthError(t.EmptyCode);if(!r)return this.rejectAuthError(t.EmptyPassword);var i=this.createCognitoUser(e);return new Promise((function(t,s){i.confirmPassword(n,r,{onSuccess:function(n){us("forgotPasswordSubmit",i,e+" forgotPasswordSubmit successful"),t(n)},onFailure:function(t){us("forgotPasswordSubmit_failure",t,e+" forgotPasswordSubmit failed"),s(t)}},o)}))},n.prototype.currentUserInfo=function(){return ns(this,void 0,void 0,(function(){var e,t,n,r,o,i,s;return rs(this,(function(a){switch(a.label){case 0:return(e=this.Credentials.getCredSource())&&"aws"!==e&&"userPool"!==e?[3,9]:[4,this.currentUserPoolUser().catch((function(e){return is.error(e)}))];case 1:if(!(s=a.sent()))return[2,null];a.label=2;case 2:return a.trys.push([2,8,,9]),[4,this.userAttributes(s)];case 3:t=a.sent(),n=this.attributesToObject(t),r=null,a.label=4;case 4:return a.trys.push([4,6,,7]),[4,this.currentCredentials()];case 5:return r=a.sent(),[3,7];case 6:return o=a.sent(),is.debug("Failed to retrieve credentials while getting current user info",o),[3,7];case 7:return[2,{id:r?r.identityId:void 0,username:s.getUsername(),attributes:n}];case 8:return i=a.sent(),is.error("currentUserInfo error",i),[2,{}];case 9:return"federated"===e?[2,(s=this.user)||{}]:[2]}}))}))},n.prototype.federatedSignIn=function(t,n,r){return ns(this,void 0,void 0,(function(){var s,a,u,c,l,f,h,d,p,g,y;return rs(this,(function(v){switch(v.label){case 0:if(!this._config.identityPoolId&&!this._config.userPoolId)throw new Error("Federation requires either a User Pool or Identity Pool in config");if(void 0===t&&this._config.identityPoolId&&!this._config.userPoolId)throw new Error("Federation with Identity Pools requires tokens passed as arguments");return o(t)||(m=t)&&["customProvider"].find((function(e){return m.hasOwnProperty(e)}))||function(e){return e&&!!["customState"].find((function(t){return e.hasOwnProperty(t)}))}(t)||void 0===t?(s=t||{provider:e.Cognito},l=o(s)?s.provider:s.customProvider,o(s),a=s.customState,this._config.userPoolId&&(u=i(this._config.oauth)?this._config.userPoolWebClientId:this._config.oauth.clientID,c=i(this._config.oauth)?this._config.oauth.redirectSignIn:this._config.oauth.redirectUri,this._oAuthHandler.oauthSignIn(this._config.oauth.responseType,this._config.oauth.domain,c,u,l,a)),[3,4]):[3,1];case 1:l=t;try{(f=JSON.stringify(JSON.parse(this._storage.getItem("aws-amplify-federatedInfo")).user))&&is.warn("There is already a signed in user: "+f+" in your app.\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tYou should not call Auth.federatedSignIn method again as it may cause unexpected behavior.")}catch(e){}return h=n.token,d=n.identity_id,p=n.expires_at,[4,this.Credentials.set({provider:l,token:h,identity_id:d,user:r,expires_at:p},"federation")];case 2:return g=v.sent(),[4,this.currentAuthenticatedUser()];case 3:return y=v.sent(),us("signIn",y,"A user "+y.username+" has been signed in"),is.debug("federated sign in credentials",g),[2,g];case 4:return[2]}var m}))}))},n.prototype._handleAuthResponse=function(e){return ns(this,void 0,void 0,(function(){var t,n,r,o,i,s,a,u,c,l,f,h,d,p;return rs(this,(function(g){switch(g.label){case 0:if(this.oAuthFlowInProgress)return is.debug("Skipping URL "+e+" current flow in progress"),[2];g.label=1;case 1:if(g.trys.push([1,,8,9]),this.oAuthFlowInProgress=!0,!this._config.userPoolId)throw new Error("OAuth responses require a User Pool defined in config");if(us("parsingCallbackUrl",{url:e},"The callback url is being parsed"),t=e||(T().isBrowser?window.location.href:""),n=!!((0,Fi.Qc)(t).query||"").split("&").map((function(e){return e.split("=")})).find((function(e){var t=os(e,1)[0];return"code"===t||"error"===t})),r=!!((0,Fi.Qc)(t).hash||"#").substr(1).split("&").map((function(e){return e.split("=")})).find((function(e){var t=os(e,1)[0];return"access_token"===t||"error"===t})),!n&&!r)return[3,7];this._storage.setItem("amplify-redirected-from-hosted-ui","true"),g.label=2;case 2:return g.trys.push([2,6,,7]),[4,this._oAuthHandler.handleAuthResponse(t)];case 3:return o=g.sent(),i=o.accessToken,s=o.idToken,a=o.refreshToken,u=o.state,c=new fi({IdToken:new ai({IdToken:s}),RefreshToken:new ui({RefreshToken:a}),AccessToken:new ii({AccessToken:i})}),l=void 0,this._config.identityPoolId?[4,this.Credentials.set(c,"session")]:[3,5];case 4:l=g.sent(),is.debug("AWS credentials",l),g.label=5;case 5:return f=/-/.test(u),(h=this.createCognitoUser(c.getIdToken().decodePayload()["cognito:username"])).setSignInUserSession(c),window&&void 0!==window.history&&window.history.replaceState({},null,this._config.oauth.redirectSignIn),us("signIn",h,"A user "+h.getUsername()+" has been signed in"),us("cognitoHostedUI",h,"A user "+h.getUsername()+" has been signed in via Cognito Hosted UI"),f&&(d=u.split("-").splice(1).join("-"),us("customOAuthState",d.match(/.{2}/g).map((function(e){return String.fromCharCode(parseInt(e,16))})).join(""),"State for user "+h.getUsername())),[2,l];case 6:return p=g.sent(),is.debug("Error in cognito hosted auth response",p),window&&void 0!==window.history&&window.history.replaceState({},null,this._config.oauth.redirectSignIn),us("signIn_failure",p,"The OAuth response flow failed"),us("cognitoHostedUI_failure",p,"A failure occurred when returning to the Cognito Hosted UI"),us("customState_failure",p,"A failure occurred when returning state"),[3,7];case 7:return[3,9];case 8:return this.oAuthFlowInProgress=!1,[7];case 9:return[2]}}))}))},n.prototype.essentialCredentials=function(e){return{accessKeyId:e.accessKeyId,sessionToken:e.sessionToken,secretAccessKey:e.secretAccessKey,identityId:e.identityId,authenticated:e.authenticated}},n.prototype.attributesToObject=function(e){var t=this,n={};return e&&e.map((function(e){"email_verified"===e.Name||"phone_number_verified"===e.Name?n[e.Name]=t.isTruthyString(e.Value)||!0===e.Value:n[e.Name]=e.Value})),n},n.prototype.isTruthyString=function(e){return"function"==typeof e.toLowerCase&&"true"===e.toLowerCase()},n.prototype.createCognitoUser=function(e){var t={Username:e,Pool:this.userPool};t.Storage=this._storage;var n=this._config.authenticationFlowType,r=new wi(t);return n&&r.setAuthenticationFlowType(n),r},n.prototype._isValidAuthStorage=function(e){return!!e&&"function"==typeof e.getItem&&"function"==typeof e.setItem&&"function"==typeof e.removeItem&&"function"==typeof e.clear},n.prototype.noUserPoolErrorHandler=function(e){return!e||e.userPoolId&&e.identityPoolId?t.NoConfig:t.MissingAuthConfig},n.prototype.rejectAuthError=function(e){return Promise.reject(new Qi(e))},n.prototype.rejectNoUserPool=function(){var e=this.noUserPoolErrorHandler(this._config);return Promise.reject(new Xi(e))},n.prototype.rememberDevice=function(){return ns(this,void 0,void 0,(function(){var e,n;return rs(this,(function(r){switch(r.label){case 0:return r.trys.push([0,2,,3]),[4,this.currentUserPoolUser()];case 1:return e=r.sent(),[3,3];case 2:return n=r.sent(),is.debug("The user is not authenticated by the error",n),[2,Promise.reject("The user is not authenticated")];case 3:return e.getCachedDeviceKeyAndPassword(),[2,new Promise((function(n,r){e.setDeviceStatusRemembered({onSuccess:function(e){n(e)},onFailure:function(e){"InvalidParameterException"===e.code?r(new Qi(t.DeviceConfig)):"NetworkError"===e.code?r(new Qi(t.NetworkError)):r(e)}})}))]}}))}))},n.prototype.forgetDevice=function(){return ns(this,void 0,void 0,(function(){var e,n;return rs(this,(function(r){switch(r.label){case 0:return r.trys.push([0,2,,3]),[4,this.currentUserPoolUser()];case 1:return e=r.sent(),[3,3];case 2:return n=r.sent(),is.debug("The user is not authenticated by the error",n),[2,Promise.reject("The user is not authenticated")];case 3:return e.getCachedDeviceKeyAndPassword(),[2,new Promise((function(n,r){e.forgetDevice({onSuccess:function(e){n(e)},onFailure:function(e){"InvalidParameterException"===e.code?r(new Qi(t.DeviceConfig)):"NetworkError"===e.code?r(new Qi(t.NetworkError)):r(e)}})}))]}}))}))},n.prototype.fetchDevices=function(){return ns(this,void 0,void 0,(function(){var e,n;return rs(this,(function(r){switch(r.label){case 0:return r.trys.push([0,2,,3]),[4,this.currentUserPoolUser()];case 1:return e=r.sent(),[3,3];case 2:throw n=r.sent(),is.debug("The user is not authenticated by the error",n),new Error("The user is not authenticated");case 3:return e.getCachedDeviceKeyAndPassword(),[2,new Promise((function(n,r){var o={onSuccess:function(e){var t=e.Devices.map((function(e){var t=e.DeviceAttributes.find((function(e){return"device_name"===e.Name}))||{};return{id:e.DeviceKey,name:t.Value}}));n(t)},onFailure:function(e){"InvalidParameterException"===e.code?r(new Qi(t.DeviceConfig)):"NetworkError"===e.code?r(new Qi(t.NetworkError)):r(e)}};e.listDevices(60,null,o)}))]}}))}))},n}(),ls=new cs(null);te.register(ls);const fs=function(e,t){return e===t||e!=e&&t!=t},hs=function(e,t){for(var n=e.length;n--;)if(fs(e[n][0],t))return n;return-1};var ds=Array.prototype.splice;function ps(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}ps.prototype.clear=function(){this.__data__=[],this.size=0},ps.prototype.delete=function(e){var t=this.__data__,n=hs(t,e);return!(n<0||(n==t.length-1?t.pop():ds.call(t,n,1),--this.size,0))},ps.prototype.get=function(e){var t=this.__data__,n=hs(t,e);return n<0?void 0:t[n][1]},ps.prototype.has=function(e){return hs(this.__data__,e)>-1},ps.prototype.set=function(e,t){var n=this.__data__,r=hs(n,e);return r<0?(++this.size,n.push([e,t])):n[r][1]=t,this};const gs=ps,ys="object"==typeof global&&global&&global.Object===Object&&global;var vs="object"==typeof self&&self&&self.Object===Object&&self;const ms=ys||vs||Function("return this")(),bs=ms.Symbol;var ws=Object.prototype,Ss=ws.hasOwnProperty,_s=ws.toString,As=bs?bs.toStringTag:void 0;var Es=Object.prototype.toString;var Ps=bs?bs.toStringTag:void 0;const xs=function(e){return null==e?void 0===e?"[object Undefined]":"[object Null]":Ps&&Ps in Object(e)?function(e){var t=Ss.call(e,As),n=e[As];try{e[As]=void 0;var r=!0}catch(e){}var o=_s.call(e);return r&&(t?e[As]=n:delete e[As]),o}(e):function(e){return Es.call(e)}(e)},Os=function(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)},Is=function(e){if(!Os(e))return!1;var t=xs(e);return"[object Function]"==t||"[object GeneratorFunction]"==t||"[object AsyncFunction]"==t||"[object Proxy]"==t},Cs=ms["__core-js_shared__"];var Ts,ks=(Ts=/[^.]+$/.exec(Cs&&Cs.keys&&Cs.keys.IE_PROTO||""))?"Symbol(src)_1."+Ts:"";var Us=Function.prototype.toString;const Rs=function(e){if(null!=e){try{return Us.call(e)}catch(e){}try{return e+""}catch(e){}}return""};var js=/^\[object .+?Constructor\]$/,Ms=Function.prototype,Ns=Object.prototype,Ds=Ms.toString,Fs=Ns.hasOwnProperty,Ls=RegExp("^"+Ds.call(Fs).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");const Bs=function(e){return!(!Os(e)||(t=e,ks&&ks in t))&&(Is(e)?Ls:js).test(Rs(e));var t},Vs=function(e,t){var n=function(e,t){return null==e?void 0:e[t]}(e,t);return Bs(n)?n:void 0},qs=Vs(ms,"Map"),zs=Vs(Object,"create");var Ws=Object.prototype.hasOwnProperty;var Hs=Object.prototype.hasOwnProperty;function Ks(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}Ks.prototype.clear=function(){this.__data__=zs?zs(null):{},this.size=0},Ks.prototype.delete=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t},Ks.prototype.get=function(e){var t=this.__data__;if(zs){var n=t[e];return"__lodash_hash_undefined__"===n?void 0:n}return Ws.call(t,e)?t[e]:void 0},Ks.prototype.has=function(e){var t=this.__data__;return zs?void 0!==t[e]:Hs.call(t,e)},Ks.prototype.set=function(e,t){var n=this.__data__;return this.size+=this.has(e)?0:1,n[e]=zs&&void 0===t?"__lodash_hash_undefined__":t,this};const Gs=Ks,$s=function(e,t){var n,r,o=e.__data__;return("string"==(r=typeof(n=t))||"number"==r||"symbol"==r||"boolean"==r?"__proto__"!==n:null===n)?o["string"==typeof t?"string":"hash"]:o.map};function Ys(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}Ys.prototype.clear=function(){this.size=0,this.__data__={hash:new Gs,map:new(qs||gs),string:new Gs}},Ys.prototype.delete=function(e){var t=$s(this,e).delete(e);return this.size-=t?1:0,t},Ys.prototype.get=function(e){return $s(this,e).get(e)},Ys.prototype.has=function(e){return $s(this,e).has(e)},Ys.prototype.set=function(e,t){var n=$s(this,e),r=n.size;return n.set(e,t),this.size+=n.size==r?0:1,this};const Js=Ys;function Zs(e){var t=this.__data__=new gs(e);this.size=t.size}Zs.prototype.clear=function(){this.__data__=new gs,this.size=0},Zs.prototype.delete=function(e){var t=this.__data__,n=t.delete(e);return this.size=t.size,n},Zs.prototype.get=function(e){return this.__data__.get(e)},Zs.prototype.has=function(e){return this.__data__.has(e)},Zs.prototype.set=function(e,t){var n=this.__data__;if(n instanceof gs){var r=n.__data__;if(!qs||r.length<199)return r.push([e,t]),this.size=++n.size,this;n=this.__data__=new Js(r)}return n.set(e,t),this.size=n.size,this};const Qs=Zs,Xs=function(){try{var e=Vs(Object,"defineProperty");return e({},"",{}),e}catch(e){}}(),ea=function(e,t,n){"__proto__"==t&&Xs?Xs(e,t,{configurable:!0,enumerable:!0,value:n,writable:!0}):e[t]=n},ta=function(e,t,n){(void 0!==n&&!fs(e[t],n)||void 0===n&&!(t in e))&&ea(e,t,n)},na=function(e,t,n){for(var r=-1,o=Object(e),i=n(e),s=i.length;s--;){var a=i[ra?s:++r];if(!1===t(o[a],a,o))break}return e};var ra,oa="object"==typeof exports&&exports&&!exports.nodeType&&exports,ia=oa&&"object"==typeof module&&module&&!module.nodeType&&module,sa=ia&&ia.exports===oa?ms.Buffer:void 0,aa=sa?sa.allocUnsafe:void 0;const ua=ms.Uint8Array,ca=function(e,t){var n,r,o=t?(n=e.buffer,r=new n.constructor(n.byteLength),new ua(r).set(new ua(n)),r):e.buffer;return new e.constructor(o,e.byteOffset,e.length)};var la=Object.create;const fa=function(){function e(){}return function(t){if(!Os(t))return{};if(la)return la(t);e.prototype=t;var n=new e;return e.prototype=void 0,n}}(),ha=function(e,t){return function(n){return e(t(n))}},da=ha(Object.getPrototypeOf,Object);var pa=Object.prototype;const ga=function(e){var t=e&&e.constructor;return e===("function"==typeof t&&t.prototype||pa)},ya=function(e){return null!=e&&"object"==typeof e},va=function(e){return ya(e)&&"[object Arguments]"==xs(e)};var ma=Object.prototype,ba=ma.hasOwnProperty,wa=ma.propertyIsEnumerable;const Sa=va(function(){return arguments}())?va:function(e){return ya(e)&&ba.call(e,"callee")&&!wa.call(e,"callee")},_a=Array.isArray,Aa=function(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=9007199254740991},Ea=function(e){return null!=e&&Aa(e.length)&&!Is(e)};var Pa="object"==typeof exports&&exports&&!exports.nodeType&&exports,xa=Pa&&"object"==typeof module&&module&&!module.nodeType&&module,Oa=xa&&xa.exports===Pa?ms.Buffer:void 0;const Ia=(Oa?Oa.isBuffer:void 0)||function(){return!1};var Ca=Function.prototype,Ta=Object.prototype,ka=Ca.toString,Ua=Ta.hasOwnProperty,Ra=ka.call(Object);var ja={};ja["[object Float32Array]"]=ja["[object Float64Array]"]=ja["[object Int8Array]"]=ja["[object Int16Array]"]=ja["[object Int32Array]"]=ja["[object Uint8Array]"]=ja["[object Uint8ClampedArray]"]=ja["[object Uint16Array]"]=ja["[object Uint32Array]"]=!0,ja["[object Arguments]"]=ja["[object Array]"]=ja["[object ArrayBuffer]"]=ja["[object Boolean]"]=ja["[object DataView]"]=ja["[object Date]"]=ja["[object Error]"]=ja["[object Function]"]=ja["[object Map]"]=ja["[object Number]"]=ja["[object Object]"]=ja["[object RegExp]"]=ja["[object Set]"]=ja["[object String]"]=ja["[object WeakMap]"]=!1;var Ma="object"==typeof exports&&exports&&!exports.nodeType&&exports,Na=Ma&&"object"==typeof module&&module&&!module.nodeType&&module,Da=Na&&Na.exports===Ma&&ys.process,Fa=function(){try{return Na&&Na.require&&Na.require("util").types||Da&&Da.binding&&Da.binding("util")}catch(e){}}(),La=Fa&&Fa.isTypedArray;const Ba=La?(Va=La,function(e){return Va(e)}):function(e){return ya(e)&&Aa(e.length)&&!!ja[xs(e)]};var Va;const qa=function(e,t){if(("constructor"!==t||"function"!=typeof e[t])&&"__proto__"!=t)return e[t]};var za=Object.prototype.hasOwnProperty;const Wa=function(e,t,n){var r=e[t];za.call(e,t)&&fs(r,n)&&(void 0!==n||t in e)||ea(e,t,n)};var Ha=/^(?:0|[1-9]\d*)$/;const Ka=function(e,t){var n=typeof e;return!!(t=null==t?9007199254740991:t)&&("number"==n||"symbol"!=n&&Ha.test(e))&&e>-1&&e%1==0&&e<t};var Ga=Object.prototype.hasOwnProperty;const $a=function(e,t){var n=_a(e),r=!n&&Sa(e),o=!n&&!r&&Ia(e),i=!n&&!r&&!o&&Ba(e),s=n||r||o||i,a=s?function(e,t){for(var n=-1,r=Array(e);++n<e;)r[n]=t(n);return r}(e.length,String):[],u=a.length;for(var c in e)!t&&!Ga.call(e,c)||s&&("length"==c||o&&("offset"==c||"parent"==c)||i&&("buffer"==c||"byteLength"==c||"byteOffset"==c)||Ka(c,u))||a.push(c);return a};var Ya=Object.prototype.hasOwnProperty;const Ja=function(e){if(!Os(e))return function(e){var t=[];if(null!=e)for(var n in Object(e))t.push(n);return t}(e);var t=ga(e),n=[];for(var r in e)("constructor"!=r||!t&&Ya.call(e,r))&&n.push(r);return n},Za=function(e){return Ea(e)?$a(e,!0):Ja(e)},Qa=function(e){return function(e,t,n,r){var o=!n;n||(n={});for(var i=-1,s=t.length;++i<s;){var a=t[i],u=r?r(n[a],e[a],a,n,e):void 0;void 0===u&&(u=e[a]),o?ea(n,a,u):Wa(n,a,u)}return n}(e,Za(e))},Xa=function(e,t,n,r,o,i,s){var a,u=qa(e,n),c=qa(t,n),l=s.get(c);if(l)ta(e,n,l);else{var f=i?i(u,c,n+"",e,t,s):void 0,h=void 0===f;if(h){var d=_a(c),p=!d&&Ia(c),g=!d&&!p&&Ba(c);f=c,d||p||g?_a(u)?f=u:ya(a=u)&&Ea(a)?f=function(e,t){var n=-1,r=e.length;for(t||(t=Array(r));++n<r;)t[n]=e[n];return t}(u):p?(h=!1,f=function(e,t){if(t)return e.slice();var n=e.length,r=aa?aa(n):new e.constructor(n);return e.copy(r),r}(c,!0)):g?(h=!1,f=ca(c,!0)):f=[]:function(e){if(!ya(e)||"[object Object]"!=xs(e))return!1;var t=da(e);if(null===t)return!0;var n=Ua.call(t,"constructor")&&t.constructor;return"function"==typeof n&&n instanceof n&&ka.call(n)==Ra}(c)||Sa(c)?(f=u,Sa(u)?f=Qa(u):Os(u)&&!Is(u)||(f=function(e){return"function"!=typeof e.constructor||ga(e)?{}:fa(da(e))}(c))):h=!1}h&&(s.set(c,f),o(f,c,r,i,s),s.delete(c)),ta(e,n,f)}},eu=function e(t,n,r,o,i){t!==n&&na(n,(function(s,a){if(i||(i=new Qs),Os(s))Xa(t,n,a,r,e,o,i);else{var u=o?o(qa(t,a),s,a+"",t,n,i):void 0;void 0===u&&(u=s),ta(t,a,u)}}),Za)},tu=function(e){return e};var nu=Math.max;const ru=Xs?function(e,t){return Xs(e,"toString",{configurable:!0,enumerable:!1,value:(n=t,function(){return n}),writable:!0});var n}:tu;var ou=Date.now;const iu=function(e){var t=0,n=0;return function(){var r=ou(),o=16-(r-n);if(n=r,o>0){if(++t>=800)return arguments[0]}else t=0;return e.apply(void 0,arguments)}}(ru),su=function(e,t){return iu(function(e,t,n){return t=nu(void 0===t?e.length-1:t,0),function(){for(var r=arguments,o=-1,i=nu(r.length-t,0),s=Array(i);++o<i;)s[o]=r[t+o];o=-1;for(var a=Array(t+1);++o<t;)a[o]=r[o];return a[t]=n(s),function(e,t,n){switch(n.length){case 0:return e.call(t);case 1:return e.call(t,n[0]);case 2:return e.call(t,n[0],n[1]);case 3:return e.call(t,n[0],n[1],n[2])}return e.apply(t,n)}(e,this,a)}}(e,t,tu),e+"")},au=(uu=function(e,t,n){eu(e,t,n)},su((function(e,t){var n=-1,r=t.length,o=r>1?t[r-1]:void 0,i=r>2?t[2]:void 0;for(o=uu.length>3&&"function"==typeof o?(r--,o):void 0,i&&function(e,t,n){if(!Os(n))return!1;var r=typeof t;return!!("number"==r?Ea(n)&&Ka(t,n.length):"string"==r&&t in n)&&fs(n[t],e)}(t[0],t[1],i)&&(o=r<3?void 0:o,r=1),e=Object(e);++n<r;){var s=t[n];s&&uu(e,s,n,o)}return e})));var uu;let cu={baseUrl:"",region:"",cardsBucket:""};const lu=async(e,t)=>{try{const n={"Content-Type":"application/json",Accept:"application/json",Authorization:`Bearer ${(await ls.currentSession()).getIdToken().getJwtToken()}`},r=await fetch(cu.baseUrl+e,au(t,{headers:n}));return r.ok?r.headers.has("Content-Type")&&"application/json"===r.headers.get("Content-Type")&&"0"!==r.headers.get("Content-Length")?{success:!0,value:await r.json()}:{success:!0,value:await r.text()}:{success:!1,errorCode:"API_REQUEST_NOT_OK",reason:"The API has returned failed status.",extra:r}}catch(e){return{success:!1,errorCode:"API_REQUEST_UNHANDLED_ERROR",reason:"Un unexpected error has occurred during the request.",extra:e}}},fu=async e=>{try{return await lu("/analyze",{method:"POST",body:JSON.stringify(e)})}catch(e){return{success:!1,errorCode:"API_TRANSLATION_REQUEST_FAILED",reason:"The translation request has failed.",extra:e}}},hu=new(n(2215).XMLParser),du=async e=>{try{return await lu(`/languages/${e.language}`,{method:"PUT",body:JSON.stringify(e)})}catch(e){return{success:!1,errorCode:"LANGUAGE_DECK_SAVE_ERROR",reason:"An error during the saving of a language deck has occurred.",extra:e}}},pu=async e=>{try{const t=await lu(`/languages/${e}`,{method:"GET"});return!1===t.success||t.value?t:{success:!0,value:{language:e,cards:[]}}}catch(e){return{success:!1,errorCode:"LANGUAGE_DECK_LOAD_ERROR",reason:"An error during the loading of a language deck has occurred.",extra:e}}},gu=e=>{if(void 0!==e)return e.getValue()},yu={rate:{ios:void 0,android:void 0,chromeExtension:void 0,safariExtension:void 0}},vu=(e,t)=>({...e,...t,rate:{...e.rate,...t.rate}}),mu=async()=>{const e=await lu("/files/metadata.json",{method:"GET"});return!1===e.success?e:{success:!0,value:(t=e.value,vu(yu,t))};var t};let bu=(e=21)=>crypto.getRandomValues(new Uint8Array(e)).reduce(((e,t)=>e+((t&=63)<36?t.toString(36):t<62?(t-26).toString(36).toUpperCase():t>62?"-":"_")),"");const wu=e=>t=>{const n=e.findIndex((e=>t=>t.id===e)(t));return-1===n?{success:!1,errorCode:"CRUD_UNABLE_TO_FIND_ITEM",reason:`Unable to find item with ID ${t}`}:(e.splice(n,1),{success:!0,value:!0})};let Su;"undefined"!=typeof chrome?Su=chrome:"undefined"!=typeof browser&&(Su=browser);const _u=e=>(t,n)=>new Promise(((r,o)=>{if(!Su)return void o("browserEnv environment is not defined");if(!Su.runtime)return void o("browserEnv.runtime is not defined defined");const i=[{identifier:e,data:t},e=>{if(Su.runtime.lastError)return o(Su.runtime.lastError);r(e)}];n&&i.unshift(n),Su.runtime.sendMessage(...i)})),Au=(e,t)=>(n,r,o)=>{if("object"!=typeof n||null===n||n.identifier!==e)return;const i=n.data;return t((e=>(o(e),e)),i),!0},Eu=e=>{const t=_u(e);return[(e,n)=>t(n,e),t=>{Su.runtime.onMessageExternal.addListener(Au(e,t))}]},Pu=e=>(e=>[_u(e),t=>{Su.runtime.onMessage.addListener(Au(e,t))}])(`vocably.${e}`),[xu,Ou]=Pu("isLoggedIn"),[Iu,Cu]=Pu("isActive"),[Tu,ku]=Pu("isEligibleForTrial"),[Uu,Ru]=Pu("analyze"),[ju,Mu]=Pu("removeCard"),[Nu,Du]=Pu("addCard"),[Fu,Lu]=Pu("listLanguages"),[Bu,Vu]=Pu("listTargetLanguages"),[qu,zu]=Pu("getLocationLanguage"),[Wu,Hu]=Pu("saveLocationLanguage"),[Ku,Gu]=Pu("cleanUp"),[$u,Yu]=Pu("ping"),[Ju,Zu]=Pu("getInternalProxyLanguage"),[Qu,Xu]=Pu("setInternalProxyLanguage"),[ec,tc]=Pu("getInternalSourceLanguage"),[nc,rc]=Pu("setInternalSourceLanguage"),[oc,ic]=Pu("isUserKnowsHowToAdd"),[sc,ac]=Pu("setUserKnowsHowToAdd"),[uc,cc]=Eu("vocably.ping-external"),[lc,fc]=Eu("vocably.setProxyLanguage"),[hc,dc]=Eu("vocably.getProxyLanguage"),[pc,gc]=Eu("vocably.setSourceLanguage"),[yc,vc]=Eu("vocably.getSourceLanguage"),[mc,bc]=Pu("playSound"),[wc,Sc]=Pu("askForRating"),[_c,Ac]=Pu("askForRatingResponse"),Ec=function(e){return"symbol"==typeof e||ya(e)&&"[object Symbol]"==xs(e)};var Pc=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,xc=/^\w*$/;function Oc(e,t){if("function"!=typeof e||null!=t&&"function"!=typeof t)throw new TypeError("Expected a function");var n=function(){var r=arguments,o=t?t.apply(this,r):r[0],i=n.cache;if(i.has(o))return i.get(o);var s=e.apply(this,r);return n.cache=i.set(o,s)||i,s};return n.cache=new(Oc.Cache||Js),n}Oc.Cache=Js;const Ic=Oc;var Cc=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,Tc=/\\(\\)?/g;const kc=function(e){var t=Ic(e,(function(e){return 500===n.size&&n.clear(),e})),n=t.cache;return t}((function(e){var t=[];return 46===e.charCodeAt(0)&&t.push(""),e.replace(Cc,(function(e,n,r,o){t.push(r?o.replace(Tc,"$1"):n||e)})),t}));var Uc=bs?bs.prototype:void 0,Rc=Uc?Uc.toString:void 0;const jc=function e(t){if("string"==typeof t)return t;if(_a(t))return function(e,t){for(var n=-1,r=null==e?0:e.length,o=Array(r);++n<r;)o[n]=t(e[n],n,e);return o}(t,e)+"";if(Ec(t))return Rc?Rc.call(t):"";var n=t+"";return"0"==n&&1/t==-1/0?"-0":n},Mc=function(e,t){return _a(e)?e:function(e,t){if(_a(e))return!1;var n=typeof e;return!("number"!=n&&"symbol"!=n&&"boolean"!=n&&null!=e&&!Ec(e))||xc.test(e)||!Pc.test(e)||null!=t&&e in Object(t)}(e,t)?[e]:kc(function(e){return null==e?"":jc(e)}(e))},Nc=function(e){if("string"==typeof e||Ec(e))return e;var t=e+"";return"0"==t&&1/e==-1/0?"-0":t},Dc=function(e,t,n){var r=null==e?void 0:function(e,t){for(var n=0,r=(t=Mc(t,e)).length;null!=e&&n<r;)e=e[Nc(t[n++])];return n&&n==r?e:void 0}(e,t);return void 0===r?n:r};function Fc(e){var t=-1,n=null==e?0:e.length;for(this.__data__=new Js;++t<n;)this.add(e[t])}Fc.prototype.add=Fc.prototype.push=function(e){return this.__data__.set(e,"__lodash_hash_undefined__"),this},Fc.prototype.has=function(e){return this.__data__.has(e)};const Lc=Fc,Bc=function(e,t){for(var n=-1,r=null==e?0:e.length;++n<r;)if(t(e[n],n,e))return!0;return!1},Vc=function(e,t){return e.has(t)},qc=function(e,t,n,r,o,i){var s=1&n,a=e.length,u=t.length;if(a!=u&&!(s&&u>a))return!1;var c=i.get(e),l=i.get(t);if(c&&l)return c==t&&l==e;var f=-1,h=!0,d=2&n?new Lc:void 0;for(i.set(e,t),i.set(t,e);++f<a;){var p=e[f],g=t[f];if(r)var y=s?r(g,p,f,t,e,i):r(p,g,f,e,t,i);if(void 0!==y){if(y)continue;h=!1;break}if(d){if(!Bc(t,(function(e,t){if(!Vc(d,t)&&(p===e||o(p,e,n,r,i)))return d.push(t)}))){h=!1;break}}else if(p!==g&&!o(p,g,n,r,i)){h=!1;break}}return i.delete(e),i.delete(t),h},zc=function(e){var t=-1,n=Array(e.size);return e.forEach((function(e,r){n[++t]=[r,e]})),n},Wc=function(e){var t=-1,n=Array(e.size);return e.forEach((function(e){n[++t]=e})),n};var Hc=bs?bs.prototype:void 0,Kc=Hc?Hc.valueOf:void 0;var Gc=Object.prototype.propertyIsEnumerable,$c=Object.getOwnPropertySymbols;const Yc=$c?function(e){return null==e?[]:(e=Object(e),function(e,t){for(var n=-1,r=null==e?0:e.length,o=0,i=[];++n<r;){var s=e[n];t(s,n,e)&&(i[o++]=s)}return i}($c(e),(function(t){return Gc.call(e,t)})))}:function(){return[]},Jc=ha(Object.keys,Object);var Zc=Object.prototype.hasOwnProperty;const Qc=function(e){return Ea(e)?$a(e):function(e){if(!ga(e))return Jc(e);var t=[];for(var n in Object(e))Zc.call(e,n)&&"constructor"!=n&&t.push(n);return t}(e)},Xc=function(e){return function(e,t,n){var r=t(e);return _a(e)?r:function(e,t){for(var n=-1,r=t.length,o=e.length;++n<r;)e[o+n]=t[n];return e}(r,n(e))}(e,Qc,Yc)};var el=Object.prototype.hasOwnProperty;const tl=Vs(ms,"DataView"),nl=Vs(ms,"Promise"),rl=Vs(ms,"Set"),ol=Vs(ms,"WeakMap");var il="[object Map]",sl="[object Promise]",al="[object Set]",ul="[object WeakMap]",cl="[object DataView]",ll=Rs(tl),fl=Rs(qs),hl=Rs(nl),dl=Rs(rl),pl=Rs(ol),gl=xs;(tl&&gl(new tl(new ArrayBuffer(1)))!=cl||qs&&gl(new qs)!=il||nl&&gl(nl.resolve())!=sl||rl&&gl(new rl)!=al||ol&&gl(new ol)!=ul)&&(gl=function(e){var t=xs(e),n="[object Object]"==t?e.constructor:void 0,r=n?Rs(n):"";if(r)switch(r){case ll:return cl;case fl:return il;case hl:return sl;case dl:return al;case pl:return ul}return t});const yl=gl;var vl="[object Arguments]",ml="[object Array]",bl="[object Object]",wl=Object.prototype.hasOwnProperty;const Sl=function(e,t,n,r,o,i){var s=_a(e),a=_a(t),u=s?ml:yl(e),c=a?ml:yl(t),l=(u=u==vl?bl:u)==bl,f=(c=c==vl?bl:c)==bl,h=u==c;if(h&&Ia(e)){if(!Ia(t))return!1;s=!0,l=!1}if(h&&!l)return i||(i=new Qs),s||Ba(e)?qc(e,t,n,r,o,i):function(e,t,n,r,o,i,s){switch(n){case"[object DataView]":if(e.byteLength!=t.byteLength||e.byteOffset!=t.byteOffset)return!1;e=e.buffer,t=t.buffer;case"[object ArrayBuffer]":return!(e.byteLength!=t.byteLength||!i(new ua(e),new ua(t)));case"[object Boolean]":case"[object Date]":case"[object Number]":return fs(+e,+t);case"[object Error]":return e.name==t.name&&e.message==t.message;case"[object RegExp]":case"[object String]":return e==t+"";case"[object Map]":var a=zc;case"[object Set]":var u=1&r;if(a||(a=Wc),e.size!=t.size&&!u)return!1;var c=s.get(e);if(c)return c==t;r|=2,s.set(e,t);var l=qc(a(e),a(t),r,o,i,s);return s.delete(e),l;case"[object Symbol]":if(Kc)return Kc.call(e)==Kc.call(t)}return!1}(e,t,u,n,r,o,i);if(!(1&n)){var d=l&&wl.call(e,"__wrapped__"),p=f&&wl.call(t,"__wrapped__");if(d||p){var g=d?e.value():e,y=p?t.value():t;return i||(i=new Qs),o(g,y,n,r,i)}}return!!h&&(i||(i=new Qs),function(e,t,n,r,o,i){var s=1&n,a=Xc(e),u=a.length;if(u!=Xc(t).length&&!s)return!1;for(var c=u;c--;){var l=a[c];if(!(s?l in t:el.call(t,l)))return!1}var f=i.get(e),h=i.get(t);if(f&&h)return f==t&&h==e;var d=!0;i.set(e,t),i.set(t,e);for(var p=s;++c<u;){var g=e[l=a[c]],y=t[l];if(r)var v=s?r(y,g,l,t,e,i):r(g,y,l,e,t,i);if(!(void 0===v?g===y||o(g,y,n,r,i):v)){d=!1;break}p||(p="constructor"==l)}if(d&&!p){var m=e.constructor,b=t.constructor;m==b||!("constructor"in e)||!("constructor"in t)||"function"==typeof m&&m instanceof m&&"function"==typeof b&&b instanceof b||(d=!1)}return i.delete(e),i.delete(t),d}(e,t,n,r,o,i))},_l=function e(t,n,r,o,i){return t===n||(null==t||null==n||!ya(t)&&!ya(n)?t!=t&&n!=n:Sl(t,n,r,o,e,i))},Al=function(e,t){return _l(e,t)};let El;"undefined"!=typeof chrome?El=chrome:"undefined"!=typeof browser&&(El=browser);const Pl=El.storage.sync,xl="askForRatingCounter",Ol=e=>t=>e.source.toLowerCase()===t.source.toLowerCase()&&e.partOfSpeech===t.partOfSpeech,Il=e=>{const t=new Date;return Date.UTC(t.getUTCFullYear(),t.getUTCMonth(),t.getUTCDate()+e)},Cl=e=>e&&0!==e.length?1===e.length?e[0]:e.map((e=>`* ${e}`)).join("\n"):"",Tl=e=>e?e.split("\n").map((e=>e.replace(/^\* */,"").replace(/ +$/,""))).filter((e=>""!==e)):[],kl=(e,t)=>t.map((t=>{const n=e.find((e=>t=>Ol(e)(t.data))(t));return void 0===n?{data:t}:au({data:t},n)})),Ul=(e,t)=>{const n=e.findIndex(Ol(t));return-1===n?[...e,t]:e.map(((e,r)=>r!==n?e:{...e,definition:Cl([...Tl(e.definition),...Tl(t.definition)])}))},Rl=(e,t,n)=>{const r={interval:0,repetition:0,eFactor:2.5,dueDate:Il(0)};return void 0===n.items||0===n.items.length?kl(e,[{language:n.translation.sourceLanguage,source:(o=t,o&&o.source&&o.targetLanguage?t.source:n.source),example:"",definition:"",translation:n.translation.target,partOfSpeech:"",...r}]):kl(e,n.items.map((e=>({language:n.translation.sourceLanguage,source:e.source,ipa:e.ipa,example:Cl(e.examples??[]),definition:Cl(e.definitions),translation:e.translation,partOfSpeech:e.partOfSpeech??"",...r}))).reduce(Ul,[]));var o};n(7993);let jl={timestamp:0,list:[]};const Ml={};(async()=>{const{locationLanguages:e}=await El.storage.sync.get(["locationLanguages"]);e&&Object.assign(Ml,e)})();const Nl={};(async()=>{const{languagePairs:e}=await El.storage.sync.get(["languagePairs"]);e&&Object.assign(Nl,e)})();const Dl=async()=>{await El.storage.sync.set({languagePairs:Nl})},Fl=e=>Nl[e],Ll=async()=>{const{sourceLanguage:e}=await El.storage.sync.get(["sourceLanguage"]);return e??null},Bl=async e=>{if(await Ll()===e)return;const t=Fl(e);await El.storage.sync.set({sourceLanguage:e}),t&&await El.storage.sync.set({proxyLanguage:t.currentTargetLanguage})},Vl=async()=>{const{proxyLanguage:e}=await El.storage.sync.get(["proxyLanguage"]);return e??null},ql=async e=>{if(await Vl()===e)return;const t=await Ll();t&&await(async(e,t)=>{if(!Nl[e])return Nl[e]={currentTargetLanguage:t,possibleTargetLanguages:[t]},void await Dl();Nl[e].currentTargetLanguage!==t&&(Nl[e]={currentTargetLanguage:t,possibleTargetLanguages:[t,...Nl[e].possibleTargetLanguages.filter((e=>e!==t))].slice(0,3)},await Dl())})(t,e),await El.storage.sync.set({proxyLanguage:e})};let zl=null;const Wl=async()=>{if(null!==zl)return{success:!0,value:zl};const e=await mu();return!1===e.success?e:(zl=e.value,{success:!0,value:e.value})},Hl=()=>{zl=null},Kl=async e=>(zl=e,(async e=>{const t=await mu();if(!1===t.success)return t;const n=vu(t.value,e),r=await lu("/files/metadata.json",{method:"PUT",body:JSON.stringify(n)});return r.success?{success:!0,value:n}:r})(e));let Gl;"undefined"!=typeof chrome?Gl=chrome:"undefined"!=typeof browser&&(Gl=browser);let $l=null;const Yl=1e3;let Jl,Zl=!0;function Ql(){void 0===Jl&&(Jl=setInterval(Xl,4*Yl))}async function Xl(){console.log("Wake up Neo..."),null==$l&&($l=Gl.runtime.connect({name:"whatever"}),$l.onDisconnect.addListener((()=>{chrome.runtime.lastError,$l=null}))),$l&&$l.postMessage({content:"ping"}),Zl&&(Zl=!1,clearInterval(Jl),Jl=setInterval(Xl,180*Yl))}chrome.runtime.onInstalled.addListener((async()=>{console.log("Stay alive: extension installed"),Ql()})),Gl.windows.onRemoved.addListener((e=>{console.log("Stay alive: window removed"),void 0!==Jl&&(clearInterval(Jl),Jl=void 0,Zl=!0)})),chrome.windows.onCreated.addListener((async()=>{console.log("Stay alive: window created"),Ql()})),Ql();const ef="@Auth_",tf=e=>`${ef}${e}`,nf=e=>e.startsWith(ef),rf=e=>e.replace(ef,""),of=e=>e.get().then((e=>Object.entries(e).reduce(((e,[t,n])=>nf(t)?Object.assign(Object.assign({},e),{[rf(t)]:n}):e),{})));var sf=function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function s(e){try{u(r.next(e))}catch(e){i(e)}}function a(e){try{u(r.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}u((r=r.apply(e,t||[])).next())}))};let af={};class uf{constructor(e){this.syncPromise=null,this.storage=e}setItem(e,t){return sf(this,void 0,void 0,(function*(){return yield((e,t)=>e.set(Object.entries(t).reduce(((e,[t,n])=>Object.assign(Object.assign({},e),{[tf(t)]:n})),{})))(this.storage,{[e]:t}),af[e]=t,af[e]}))}getItem(e){return Object.prototype.hasOwnProperty.call(af,e)?af[e]:void 0}removeItem(e){return sf(this,void 0,void 0,(function*(){return yield((e,t)=>e.remove(t.map(tf)))(this.storage,[e]),delete af[e]}))}clear(){return sf(this,void 0,void 0,(function*(){return yield(e=>e.get().then((t=>e.remove(Object.keys(t).filter(nf)))))(this.storage),af={},af}))}getAll(){return sf(this,void 0,void 0,(function*(){return of(this.storage)}))}sync(){return this.syncPromise||(this.syncPromise=of(this.storage).then((e=>{af=e}))),this.syncPromise}}const cf="authStorage",[lf,ff]=Eu(`${cf}.setItem`),[hf,df]=Eu(`${cf}.removeItem`),[pf,gf]=Eu(`${cf}.getAll`),[yf,vf]=Eu(`${cf}.clear`);var mf,bf=function(e,t,n,r){return new(n||(n=Promise))((function(o,i){function s(e){try{u(r.next(e))}catch(e){i(e)}}function a(e){try{u(r.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}u((r=r.apply(e,t||[])).next())}))};mf={auth:{region:"eu-central-1",userPoolId:"eu-central-1_7fL0W5Axi",userPoolWebClientId:"l0ng8n755dine5q5t0hcip768",storage:(e=>{const t=chrome.storage.sync,n=new uf(t);return ff(((e,{key:t,value:r})=>bf(void 0,void 0,void 0,(function*(){return yield n.setItem(t,r),e()})))),df(((e,t)=>bf(void 0,void 0,void 0,(function*(){return yield n.removeItem(t),e()})))),vf((e=>bf(void 0,void 0,void 0,(function*(){yield n.clear(),e()})))),gf((e=>bf(void 0,void 0,void 0,(function*(){return e(yield n.getAll())})))),n})()},api:{baseUrl:"https://api.vocably.pro",region:"eu-central-1",cardsBucket:"vocably-prod-cards"}},ls.configure(mf.auth),cu=mf.api,Ou((async e=>{console.info("Login check has been requested.");const t=await ls.currentSession().then((()=>!0)).catch((()=>!1));return console.info(`The user is ${t?"logged in":"not logged in"}.`),e(t)})),Cu((async e=>{const t=await ls.currentAuthenticatedUser().catch((()=>!1));return e(!!t&&Dc(t,"signInUserSession.accessToken.payload.cognito:groups",[]).includes("paid"))})),ku((async e=>{const t=await ls.currentAuthenticatedUser().catch((()=>!1));if(!1===t)return e(!1);const n=(({user:e,attributes:t})=>{const n=t.find((e=>"email"===e.getName())),r=t.find((e=>"sub"===e.getName())),o=t.find((e=>"custom:status"===e.getName())),i=t.find((e=>"custom:cancellation_date"===e.getName())),s=t.find((e=>"custom:next_bill_date"===e.getName())),a=t.find((e=>"custom:unit_price"===e.getName())),u=t.find((e=>"custom:update_url"===e.getName())),c=t.find((e=>"custom:cancel_url"===e.getName())),l=t.find((e=>"custom:product_id"===e.getName())),f=t.find((e=>"custom:plan_name"===e.getName()));if(!n||!r)throw Error("Can find email and sub in user data.");return{username:e.getUsername(),email:n.getValue(),sub:r.getValue(),status:gu(o),updateUrl:gu(u),cancelUrl:gu(c),nextBillDate:s&&new Date(s.getValue()),unitPrice:a&&parseFloat(a.getValue()),cancellationDate:i&&new Date(i.getValue()),productId:l&&parseInt(l.getValue()),planName:f&&f.getValue()}})({user:t,attributes:await ls.userAttributes(t)});return e((e=>"deleted"!==e.status)(n))})),Ru((async(e,t)=>{t.sourceLanguage&&await Bl(t.sourceLanguage),t.targetLanguage&&await ql(t.targetLanguage);const n={...t,sourceLanguage:t.sourceLanguage??await Ll()??"en",targetLanguage:t.targetLanguage??await Vl()??"en"};try{const[t,o]=await(async e=>{if(e.sourceLanguage)return Promise.all([fu(e),pu(e.sourceLanguage)]);const t=await fu(e);return!1===t.success?[t,{success:!1,errorCode:"LANGUAGE_DECK_LOAD_ERROR",reason:"The language deck can't be loaded because the source language is not specified and can't be detected."}]:[t,await pu(t.value.translation.sourceLanguage)]})(n);if(!1===t.success)return t.extra&&t.extra.body&&console.info("Backend error body",t.extra.body.toString()),e(t);if(!1===o.success)return e(o);const i=o.value,s={cards:Rl(i.cards,n,t.value),source:t.value.source,translation:t.value.translation};return r=s.translation.sourceLanguage,jl={...jl,list:[...jl.list.filter((e=>e!==r)),r]},e({success:!0,value:s})}catch(t){return console.error("Cards creation error",t),e({success:!1,errorCode:"EXTENSION_SERVICE_WORKER_ERROR_CREATING_CARDS",reason:"An unexpected error has occurred during the cards creation in service worker.",extra:t})}var r})),Mu((async(e,t)=>{const n=await pu(t.translationCards.translation.sourceLanguage);if(!1===n.success)return e(n);wu(n.value.cards)(t.card.id);const r=await du(n.value);return!1===r.success?e(r):e({success:!0,value:{...t.translationCards,cards:t.translationCards.cards.map((e=>Al(e,t.card)?{data:e.data}:e))}})})),Du((async(e,t)=>{const n=await pu(t.translationCards.translation.sourceLanguage);if(!1===n.success)return e(n);const r=(o=n.value.cards,e=>{const t=+new Date,n={id:bu(5),created:t,data:e};return o.push(n),n})(t.card.data);var o;const i=await du(n.value);return!1===i.success?e(i):e({success:!0,value:{...t.translationCards,cards:t.translationCards.cards.map((e=>Al(e,t.card)?r:e))}})})),Gu((async(e,t)=>{console.info("Clean up has been requested.",t);try{const r=await pu(t.translation.sourceLanguage);if(!1===r.success)return e(r);const o=r.value,i=wu(o.cards);return t.cards.forEach((e=>{(e=>void 0!==e.id)(e)&&i(e.id)})),0===o.cards.length?(console.info("The entire deck will be deleted.",t),n=o.language,jl={...jl,list:jl.list.filter((e=>e!==n))},e(await(async e=>{try{return await lu(`/languages/${e}`,{method:"DELETE"})}catch(e){return{success:!1,errorCode:"LANGUAGE_DECK_DELETE_ERROR",reason:"An error during the deletion of a language deck has occurred.",extra:e}}})(o.language))):(console.info(`${t.cards.length} cards will be deleted from the deck.`,t),e(await du(o)))}catch(t){return e({success:!1,errorCode:"EXTENSION_SERVICE_WORKER_ERROR_CLEANING_UP",reason:"An unexpected error has occurred during the cards clean up in service worker.",extra:t})}var n})),Lu((async e=>e(await(async()=>{const e=(new Date).getTime();if(jl.timestamp>e)return{success:!0,value:jl.list};const t=await(async()=>{try{const e=await lu("/languages",{method:"GET"});if(!1===e.success)return e;const t=hu.parse(e.value);let n=t?.ListBucketResult?.Contents??[];return Array.isArray(n)||(n=[n]),{success:!0,value:n.map((e=>e.Key)).map((e=>e.split("/").pop()))}}catch(e){return{success:!1,errorCode:"LANGUAGE_DECKS_LIST_ERROR",reason:"An error during the retrieving of available language decks has occurred.",extra:e}}})().catch((e=>{throw console.error("List languages error",e),e}));return!1===t.success?t:(jl={timestamp:e+36e5,list:t.value},{success:!0,value:jl.list})})()))),Vu((async e=>{const t=await Ll(),n=Fl(t);return e(n?n.possibleTargetLanguages:[])})),Yu((e=>e("pong"))),cc((e=>e("pong"))),Zu((async e=>e(await Vl()))),Xu((async(e,t)=>(await ql(t),e()))),tc((async e=>e(await Ll()))),rc((async(e,t)=>(await Bl(t),e()))),dc((async e=>e(await Vl()))),fc((async(e,t)=>(await ql(t),e()))),vc((async e=>e(await Ll()))),gc((async(e,t)=>(await Bl(t),e()))),ic((async e=>{const{userKnowsHowToAdd:t}=await El.storage.sync.get(["userKnowsHowToAdd"]);return e(t??!1)})),ac((async(e,t)=>(await El.storage.sync.set({userKnowsHowToAdd:t}),e()))),bc((async(e,t)=>e(await(async e=>{try{return await lu("/audio?"+new URLSearchParams(e),{method:"GET"})}catch(e){return{success:!1,errorCode:"API_TRANSLATION_REQUEST_FAILED",reason:"The translation request has failed.",extra:e}}})(t)))),Sc((async(e,t)=>{if(!1===t.translationResult.success)return e(!1);const n=await Wl();if(!1===n.success)return e(!1);const r=n.value;if(r.rate[t.extensionPlatform]&&("never"===r.rate[t.extensionPlatform].response||"review"===r.rate[t.extensionPlatform].response))return e(!1);const o=await(async e=>{const t=await Pl.get([xl]);if(void 0!==t[xl])return t[xl];const n=await pu(e);if(!1===n.success)return 1;const r=n.value.cards.length>=10?10:n.value.cards.length;return await Pl.set({[xl]:r}),r})(t.translationResult.value.translation.sourceLanguage);return await(async e=>{await Pl.set({[xl]:e})})(o+1),0===o?e(!1):r.rate[t.extensionPlatform]&&"feedback"===r.rate[t.extensionPlatform].response?e(o%30==0):e(o%10==0)})),Ac((async(e,t)=>{Hl();const n=await Wl();if(!1===n.success)return e();const r=n.value;return r.rate[t.extensionPlatform]={response:t.rateInteraction,isoDate:(new Date).toISOString()},await Kl(r),await(async()=>{await Pl.set({[xl]:1})})(),e()})),zu((async(e,t)=>e((e=>{const t=new URL(e).hostname;if(Ml[t])return Ml[t]})(t)))),Hu((async(e,[t,n])=>(await(async(e,t)=>{Ml[new URL(e).hostname]=t,await El.storage.sync.set({locationLanguages:Ml})})(t,n),e()))),console.info("The service worker has been registered"),chrome.runtime.onInstalled.addListener((e=>{return t=void 0,n=void 0,o=function*(){e.reason===chrome.runtime.OnInstalledReason.INSTALL&&(yield chrome.tabs.create({url:"https://app.vocably.pro/page/welcome"}))},new((r=void 0)||(r=Promise))((function(e,i){function s(e){try{u(o.next(e))}catch(e){i(e)}}function a(e){try{u(o.throw(e))}catch(e){i(e)}}function u(t){var n;t.done?e(t.value):(n=t.value,n instanceof r?n:new r((function(e){e(n)}))).then(s,a)}u((o=o.apply(t,n||[])).next())}));var t,n,r,o})),chrome.runtime.setUninstallURL("https://docs.google.com/forms/d/e/1FAIpQLSdMurLCVSOO6hfA9dOKvvqm260ZPDe9JKp8iNe8xwf0gbNyvQ/viewform?usp=sf_link")})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,