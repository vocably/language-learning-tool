/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { AddCardPayload, GoogleLanguage, GoogleTTSLanguage, PlaySoundPayload, PlaySoundResponse, RateInteractionPayload, RemoveCardPayload, Result, TranslationCard, TranslationCards } from "@vocably/model";
export namespace Components {
    interface VocablyAddCardHint {
    }
    interface VocablyButton {
    }
    interface VocablyCardDefinitions {
        "card": TranslationCard;
    }
    interface VocablyCardExamples {
        "example": string;
    }
    interface VocablyCardSource {
        "card": TranslationCard;
        "playSound": (
    payload: PlaySoundPayload
  ) => Promise<Result<PlaySoundResponse>>;
    }
    interface VocablyCloseButton {
    }
    interface VocablyFirstTranslationCongratulation {
    }
    interface VocablyIconAdd {
    }
    interface VocablyIconArrowRight {
    }
    interface VocablyIconPlayCircle {
    }
    interface VocablyIconRemove {
    }
    interface VocablyIconSpin {
    }
    interface VocablyIconVolumeMedium {
    }
    interface VocablyLanguage {
        "sourceLanguage": string;
        "targetLanguage": string;
        "waiting": boolean;
    }
    interface VocablyLogo {
    }
    interface VocablyMobileButton {
    }
    interface VocablyPlaySound {
        "language": GoogleTTSLanguage;
        "playSound": (
    payload: PlaySoundPayload
  ) => Promise<Result<PlaySoundResponse>>;
        "text": string;
    }
    interface VocablyPopup {
    }
    interface VocablyRate {
        "platform": { name: string; url: string };
    }
    interface VocablySignIn {
    }
    interface VocablySpinner {
    }
    interface VocablySubscribe {
        "trial": boolean;
    }
    interface VocablyTranslation {
        "askForRating": boolean;
        "canCongratulate": boolean;
        "existingSourceLanguages": GoogleLanguage[];
        "existingTargetLanguages": GoogleLanguage[];
        "extensionPlatform": { name: string; url: string };
        "isFeedbackEnabled": boolean;
        "isUpdating": TranslationCard | null;
        "loading": boolean;
        "phrase": string;
        "playSound": (
    payload: PlaySoundPayload
  ) => Promise<Result<PlaySoundResponse>>;
        "result": Result<TranslationCards> | null;
        "showSaveHint": boolean;
        "sourceLanguage": string;
        "targetLanguage": string;
    }
}
export interface VocablyAddCardHintCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVocablyAddCardHintElement;
}
export interface VocablyCloseButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVocablyCloseButtonElement;
}
export interface VocablyLanguageCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVocablyLanguageElement;
}
export interface VocablyPopupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVocablyPopupElement;
}
export interface VocablyRateCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVocablyRateElement;
}
export interface VocablySignInCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVocablySignInElement;
}
export interface VocablySubscribeCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVocablySubscribeElement;
}
export interface VocablyTranslationCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVocablyTranslationElement;
}
declare global {
    interface HTMLVocablyAddCardHintElement extends Components.VocablyAddCardHint, HTMLStencilElement {
    }
    var HTMLVocablyAddCardHintElement: {
        prototype: HTMLVocablyAddCardHintElement;
        new (): HTMLVocablyAddCardHintElement;
    };
    interface HTMLVocablyButtonElement extends Components.VocablyButton, HTMLStencilElement {
    }
    var HTMLVocablyButtonElement: {
        prototype: HTMLVocablyButtonElement;
        new (): HTMLVocablyButtonElement;
    };
    interface HTMLVocablyCardDefinitionsElement extends Components.VocablyCardDefinitions, HTMLStencilElement {
    }
    var HTMLVocablyCardDefinitionsElement: {
        prototype: HTMLVocablyCardDefinitionsElement;
        new (): HTMLVocablyCardDefinitionsElement;
    };
    interface HTMLVocablyCardExamplesElement extends Components.VocablyCardExamples, HTMLStencilElement {
    }
    var HTMLVocablyCardExamplesElement: {
        prototype: HTMLVocablyCardExamplesElement;
        new (): HTMLVocablyCardExamplesElement;
    };
    interface HTMLVocablyCardSourceElement extends Components.VocablyCardSource, HTMLStencilElement {
    }
    var HTMLVocablyCardSourceElement: {
        prototype: HTMLVocablyCardSourceElement;
        new (): HTMLVocablyCardSourceElement;
    };
    interface HTMLVocablyCloseButtonElement extends Components.VocablyCloseButton, HTMLStencilElement {
    }
    var HTMLVocablyCloseButtonElement: {
        prototype: HTMLVocablyCloseButtonElement;
        new (): HTMLVocablyCloseButtonElement;
    };
    interface HTMLVocablyFirstTranslationCongratulationElement extends Components.VocablyFirstTranslationCongratulation, HTMLStencilElement {
    }
    var HTMLVocablyFirstTranslationCongratulationElement: {
        prototype: HTMLVocablyFirstTranslationCongratulationElement;
        new (): HTMLVocablyFirstTranslationCongratulationElement;
    };
    interface HTMLVocablyIconAddElement extends Components.VocablyIconAdd, HTMLStencilElement {
    }
    var HTMLVocablyIconAddElement: {
        prototype: HTMLVocablyIconAddElement;
        new (): HTMLVocablyIconAddElement;
    };
    interface HTMLVocablyIconArrowRightElement extends Components.VocablyIconArrowRight, HTMLStencilElement {
    }
    var HTMLVocablyIconArrowRightElement: {
        prototype: HTMLVocablyIconArrowRightElement;
        new (): HTMLVocablyIconArrowRightElement;
    };
    interface HTMLVocablyIconPlayCircleElement extends Components.VocablyIconPlayCircle, HTMLStencilElement {
    }
    var HTMLVocablyIconPlayCircleElement: {
        prototype: HTMLVocablyIconPlayCircleElement;
        new (): HTMLVocablyIconPlayCircleElement;
    };
    interface HTMLVocablyIconRemoveElement extends Components.VocablyIconRemove, HTMLStencilElement {
    }
    var HTMLVocablyIconRemoveElement: {
        prototype: HTMLVocablyIconRemoveElement;
        new (): HTMLVocablyIconRemoveElement;
    };
    interface HTMLVocablyIconSpinElement extends Components.VocablyIconSpin, HTMLStencilElement {
    }
    var HTMLVocablyIconSpinElement: {
        prototype: HTMLVocablyIconSpinElement;
        new (): HTMLVocablyIconSpinElement;
    };
    interface HTMLVocablyIconVolumeMediumElement extends Components.VocablyIconVolumeMedium, HTMLStencilElement {
    }
    var HTMLVocablyIconVolumeMediumElement: {
        prototype: HTMLVocablyIconVolumeMediumElement;
        new (): HTMLVocablyIconVolumeMediumElement;
    };
    interface HTMLVocablyLanguageElement extends Components.VocablyLanguage, HTMLStencilElement {
    }
    var HTMLVocablyLanguageElement: {
        prototype: HTMLVocablyLanguageElement;
        new (): HTMLVocablyLanguageElement;
    };
    interface HTMLVocablyLogoElement extends Components.VocablyLogo, HTMLStencilElement {
    }
    var HTMLVocablyLogoElement: {
        prototype: HTMLVocablyLogoElement;
        new (): HTMLVocablyLogoElement;
    };
    interface HTMLVocablyMobileButtonElement extends Components.VocablyMobileButton, HTMLStencilElement {
    }
    var HTMLVocablyMobileButtonElement: {
        prototype: HTMLVocablyMobileButtonElement;
        new (): HTMLVocablyMobileButtonElement;
    };
    interface HTMLVocablyPlaySoundElement extends Components.VocablyPlaySound, HTMLStencilElement {
    }
    var HTMLVocablyPlaySoundElement: {
        prototype: HTMLVocablyPlaySoundElement;
        new (): HTMLVocablyPlaySoundElement;
    };
    interface HTMLVocablyPopupElement extends Components.VocablyPopup, HTMLStencilElement {
    }
    var HTMLVocablyPopupElement: {
        prototype: HTMLVocablyPopupElement;
        new (): HTMLVocablyPopupElement;
    };
    interface HTMLVocablyRateElement extends Components.VocablyRate, HTMLStencilElement {
    }
    var HTMLVocablyRateElement: {
        prototype: HTMLVocablyRateElement;
        new (): HTMLVocablyRateElement;
    };
    interface HTMLVocablySignInElement extends Components.VocablySignIn, HTMLStencilElement {
    }
    var HTMLVocablySignInElement: {
        prototype: HTMLVocablySignInElement;
        new (): HTMLVocablySignInElement;
    };
    interface HTMLVocablySpinnerElement extends Components.VocablySpinner, HTMLStencilElement {
    }
    var HTMLVocablySpinnerElement: {
        prototype: HTMLVocablySpinnerElement;
        new (): HTMLVocablySpinnerElement;
    };
    interface HTMLVocablySubscribeElement extends Components.VocablySubscribe, HTMLStencilElement {
    }
    var HTMLVocablySubscribeElement: {
        prototype: HTMLVocablySubscribeElement;
        new (): HTMLVocablySubscribeElement;
    };
    interface HTMLVocablyTranslationElement extends Components.VocablyTranslation, HTMLStencilElement {
    }
    var HTMLVocablyTranslationElement: {
        prototype: HTMLVocablyTranslationElement;
        new (): HTMLVocablyTranslationElement;
    };
    interface HTMLElementTagNameMap {
        "vocably-add-card-hint": HTMLVocablyAddCardHintElement;
        "vocably-button": HTMLVocablyButtonElement;
        "vocably-card-definitions": HTMLVocablyCardDefinitionsElement;
        "vocably-card-examples": HTMLVocablyCardExamplesElement;
        "vocably-card-source": HTMLVocablyCardSourceElement;
        "vocably-close-button": HTMLVocablyCloseButtonElement;
        "vocably-first-translation-congratulation": HTMLVocablyFirstTranslationCongratulationElement;
        "vocably-icon-add": HTMLVocablyIconAddElement;
        "vocably-icon-arrow-right": HTMLVocablyIconArrowRightElement;
        "vocably-icon-play-circle": HTMLVocablyIconPlayCircleElement;
        "vocably-icon-remove": HTMLVocablyIconRemoveElement;
        "vocably-icon-spin": HTMLVocablyIconSpinElement;
        "vocably-icon-volume-medium": HTMLVocablyIconVolumeMediumElement;
        "vocably-language": HTMLVocablyLanguageElement;
        "vocably-logo": HTMLVocablyLogoElement;
        "vocably-mobile-button": HTMLVocablyMobileButtonElement;
        "vocably-play-sound": HTMLVocablyPlaySoundElement;
        "vocably-popup": HTMLVocablyPopupElement;
        "vocably-rate": HTMLVocablyRateElement;
        "vocably-sign-in": HTMLVocablySignInElement;
        "vocably-spinner": HTMLVocablySpinnerElement;
        "vocably-subscribe": HTMLVocablySubscribeElement;
        "vocably-translation": HTMLVocablyTranslationElement;
    }
}
declare namespace LocalJSX {
    interface VocablyAddCardHint {
        "onConfirm"?: (event: VocablyAddCardHintCustomEvent<any>) => void;
    }
    interface VocablyButton {
    }
    interface VocablyCardDefinitions {
        "card"?: TranslationCard;
    }
    interface VocablyCardExamples {
        "example"?: string;
    }
    interface VocablyCardSource {
        "card"?: TranslationCard;
        "playSound"?: (
    payload: PlaySoundPayload
  ) => Promise<Result<PlaySoundResponse>>;
    }
    interface VocablyCloseButton {
        "onClose"?: (event: VocablyCloseButtonCustomEvent<void>) => void;
    }
    interface VocablyFirstTranslationCongratulation {
    }
    interface VocablyIconAdd {
    }
    interface VocablyIconArrowRight {
    }
    interface VocablyIconPlayCircle {
    }
    interface VocablyIconRemove {
    }
    interface VocablyIconSpin {
    }
    interface VocablyIconVolumeMedium {
    }
    interface VocablyLanguage {
        "onConfirm"?: (event: VocablyLanguageCustomEvent<{
    sourceLanguage: string;
    targetLanguage: string;
  }>) => void;
        "sourceLanguage"?: string;
        "targetLanguage"?: string;
        "waiting"?: boolean;
    }
    interface VocablyLogo {
    }
    interface VocablyMobileButton {
    }
    interface VocablyPlaySound {
        "language"?: GoogleTTSLanguage;
        "playSound"?: (
    payload: PlaySoundPayload
  ) => Promise<Result<PlaySoundResponse>>;
        "text"?: string;
    }
    interface VocablyPopup {
        "onClose"?: (event: VocablyPopupCustomEvent<void>) => void;
    }
    interface VocablyRate {
        "onUserSelected"?: (event: VocablyRateCustomEvent<'review' | 'later' | 'never' | 'feedback'>) => void;
        "platform"?: { name: string; url: string };
    }
    interface VocablySignIn {
        "onConfirm"?: (event: VocablySignInCustomEvent<any>) => void;
    }
    interface VocablySpinner {
    }
    interface VocablySubscribe {
        "onConfirm"?: (event: VocablySubscribeCustomEvent<any>) => void;
        "trial"?: boolean;
    }
    interface VocablyTranslation {
        "askForRating"?: boolean;
        "canCongratulate"?: boolean;
        "existingSourceLanguages"?: GoogleLanguage[];
        "existingTargetLanguages"?: GoogleLanguage[];
        "extensionPlatform"?: { name: string; url: string };
        "isFeedbackEnabled"?: boolean;
        "isUpdating"?: TranslationCard | null;
        "loading"?: boolean;
        "onAddCard"?: (event: VocablyTranslationCustomEvent<AddCardPayload>) => void;
        "onChangeSourceLanguage"?: (event: VocablyTranslationCustomEvent<string>) => void;
        "onChangeTargetLanguage"?: (event: VocablyTranslationCustomEvent<string>) => void;
        "onRatingInteraction"?: (event: VocablyTranslationCustomEvent<RateInteractionPayload>) => void;
        "onRemoveCard"?: (event: VocablyTranslationCustomEvent<RemoveCardPayload>) => void;
        "phrase"?: string;
        "playSound"?: (
    payload: PlaySoundPayload
  ) => Promise<Result<PlaySoundResponse>>;
        "result"?: Result<TranslationCards> | null;
        "showSaveHint"?: boolean;
        "sourceLanguage"?: string;
        "targetLanguage"?: string;
    }
    interface IntrinsicElements {
        "vocably-add-card-hint": VocablyAddCardHint;
        "vocably-button": VocablyButton;
        "vocably-card-definitions": VocablyCardDefinitions;
        "vocably-card-examples": VocablyCardExamples;
        "vocably-card-source": VocablyCardSource;
        "vocably-close-button": VocablyCloseButton;
        "vocably-first-translation-congratulation": VocablyFirstTranslationCongratulation;
        "vocably-icon-add": VocablyIconAdd;
        "vocably-icon-arrow-right": VocablyIconArrowRight;
        "vocably-icon-play-circle": VocablyIconPlayCircle;
        "vocably-icon-remove": VocablyIconRemove;
        "vocably-icon-spin": VocablyIconSpin;
        "vocably-icon-volume-medium": VocablyIconVolumeMedium;
        "vocably-language": VocablyLanguage;
        "vocably-logo": VocablyLogo;
        "vocably-mobile-button": VocablyMobileButton;
        "vocably-play-sound": VocablyPlaySound;
        "vocably-popup": VocablyPopup;
        "vocably-rate": VocablyRate;
        "vocably-sign-in": VocablySignIn;
        "vocably-spinner": VocablySpinner;
        "vocably-subscribe": VocablySubscribe;
        "vocably-translation": VocablyTranslation;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "vocably-add-card-hint": LocalJSX.VocablyAddCardHint & JSXBase.HTMLAttributes<HTMLVocablyAddCardHintElement>;
            "vocably-button": LocalJSX.VocablyButton & JSXBase.HTMLAttributes<HTMLVocablyButtonElement>;
            "vocably-card-definitions": LocalJSX.VocablyCardDefinitions & JSXBase.HTMLAttributes<HTMLVocablyCardDefinitionsElement>;
            "vocably-card-examples": LocalJSX.VocablyCardExamples & JSXBase.HTMLAttributes<HTMLVocablyCardExamplesElement>;
            "vocably-card-source": LocalJSX.VocablyCardSource & JSXBase.HTMLAttributes<HTMLVocablyCardSourceElement>;
            "vocably-close-button": LocalJSX.VocablyCloseButton & JSXBase.HTMLAttributes<HTMLVocablyCloseButtonElement>;
            "vocably-first-translation-congratulation": LocalJSX.VocablyFirstTranslationCongratulation & JSXBase.HTMLAttributes<HTMLVocablyFirstTranslationCongratulationElement>;
            "vocably-icon-add": LocalJSX.VocablyIconAdd & JSXBase.HTMLAttributes<HTMLVocablyIconAddElement>;
            "vocably-icon-arrow-right": LocalJSX.VocablyIconArrowRight & JSXBase.HTMLAttributes<HTMLVocablyIconArrowRightElement>;
            "vocably-icon-play-circle": LocalJSX.VocablyIconPlayCircle & JSXBase.HTMLAttributes<HTMLVocablyIconPlayCircleElement>;
            "vocably-icon-remove": LocalJSX.VocablyIconRemove & JSXBase.HTMLAttributes<HTMLVocablyIconRemoveElement>;
            "vocably-icon-spin": LocalJSX.VocablyIconSpin & JSXBase.HTMLAttributes<HTMLVocablyIconSpinElement>;
            "vocably-icon-volume-medium": LocalJSX.VocablyIconVolumeMedium & JSXBase.HTMLAttributes<HTMLVocablyIconVolumeMediumElement>;
            "vocably-language": LocalJSX.VocablyLanguage & JSXBase.HTMLAttributes<HTMLVocablyLanguageElement>;
            "vocably-logo": LocalJSX.VocablyLogo & JSXBase.HTMLAttributes<HTMLVocablyLogoElement>;
            "vocably-mobile-button": LocalJSX.VocablyMobileButton & JSXBase.HTMLAttributes<HTMLVocablyMobileButtonElement>;
            "vocably-play-sound": LocalJSX.VocablyPlaySound & JSXBase.HTMLAttributes<HTMLVocablyPlaySoundElement>;
            "vocably-popup": LocalJSX.VocablyPopup & JSXBase.HTMLAttributes<HTMLVocablyPopupElement>;
            "vocably-rate": LocalJSX.VocablyRate & JSXBase.HTMLAttributes<HTMLVocablyRateElement>;
            "vocably-sign-in": LocalJSX.VocablySignIn & JSXBase.HTMLAttributes<HTMLVocablySignInElement>;
            "vocably-spinner": LocalJSX.VocablySpinner & JSXBase.HTMLAttributes<HTMLVocablySpinnerElement>;
            "vocably-subscribe": LocalJSX.VocablySubscribe & JSXBase.HTMLAttributes<HTMLVocablySubscribeElement>;
            "vocably-translation": LocalJSX.VocablyTranslation & JSXBase.HTMLAttributes<HTMLVocablyTranslationElement>;
        }
    }
}
